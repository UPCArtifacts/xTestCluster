import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        int int0 = org.apache.commons.lang.time.DateUtils.MILLIS_IN_HOUR;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 3600000 + "'", int0 == 3600000);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) (byte) 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 100");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        int int0 = org.apache.commons.lang.time.DateUtils.RANGE_MONTH_MONDAY;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 6 + "'", int0 == 6);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addWeeks(date0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        long long0 = org.apache.commons.lang.time.DateUtils.MILLIS_PER_DAY;
        org.junit.Assert.assertTrue("'" + long0 + "' != '" + 86400000L + "'", long0 == 86400000L);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        org.apache.commons.lang.time.DateUtils dateUtils0 = new org.apache.commons.lang.time.DateUtils();
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        int int0 = org.apache.commons.lang.time.DateUtils.MILLIS_IN_SECOND;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1000 + "'", int0 == 1000);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        int int0 = org.apache.commons.lang.time.DateUtils.RANGE_WEEK_SUNDAY;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) true, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on true");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) true, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round true");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        int int0 = org.apache.commons.lang.time.DateUtils.MILLIS_IN_MINUTE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 60000 + "'", int0 == 60000);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) 1000, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 1000");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        long long0 = org.apache.commons.lang.time.DateUtils.MILLIS_PER_MINUTE;
        org.junit.Assert.assertTrue("'" + long0 + "' != '" + 60000L + "'", long0 == 60000L);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        java.util.Calendar calendar0 = null;
        java.util.Calendar calendar1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = org.apache.commons.lang.time.DateUtils.isSameDay(calendar0, calendar1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        int int0 = org.apache.commons.lang.time.DateUtils.MILLIS_IN_DAY;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 86400000 + "'", int0 == 86400000);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        long long0 = org.apache.commons.lang.time.DateUtils.MILLIS_PER_HOUR;
        org.junit.Assert.assertTrue("'" + long0 + "' != '" + 3600000L + "'", long0 == 3600000L);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date12 = org.apache.commons.lang.time.DateUtils.truncate(date10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        int int0 = org.apache.commons.lang.time.DateUtils.RANGE_WEEK_CENTER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4 + "'", int0 == 4);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        int int0 = org.apache.commons.lang.time.DateUtils.RANGE_WEEK_RELATIVE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 3 + "'", int0 == 3);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        java.util.Calendar calendar0 = null;
        java.util.Calendar calendar1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = org.apache.commons.lang.time.DateUtils.isSameInstant(calendar0, calendar1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        java.util.Calendar calendar0 = null;
        java.util.Calendar calendar1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = org.apache.commons.lang.time.DateUtils.isSameLocalTime(calendar0, calendar1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        int int0 = org.apache.commons.lang.time.DateUtils.RANGE_WEEK_MONDAY;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 2 + "'", int0 == 2);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.Class<?> wildcardClass6 = date5.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) (-1), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on -1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        long long0 = org.apache.commons.lang.time.DateUtils.MILLIS_PER_SECOND;
        org.junit.Assert.assertTrue("'" + long0 + "' != '" + 1000L + "'", long0 == 1000L);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator12 = org.apache.commons.lang.time.DateUtils.iterator(date3, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 35 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) 3, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 3");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        java.util.Date date0 = null;
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = org.apache.commons.lang.time.DateUtils.isSameInstant(date0, date6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.lang.Class<?> wildcardClass8 = date7.getClass();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) 'a', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round a");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addWeeks(date0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        int int0 = org.apache.commons.lang.time.DateUtils.SEMI_MONTH;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1001 + "'", int0 == 1001);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray4);
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unable to parse the date: hi!");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator13 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) 3, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 3");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator13 = org.apache.commons.lang.time.DateUtils.iterator(date11, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 60000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        java.util.TimeZone timeZone0 = org.apache.commons.lang.time.DateUtils.UTC_TIME_ZONE;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) timeZone0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date28 = org.apache.commons.lang.time.DateUtils.round(date25, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, 86400000, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.round(date5, (int) (short) 1);
        java.util.Date date8 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Tue Jan 01 00:00:00 CET 1980");
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator61 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) boolean59, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on false");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) '#', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round #");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        java.lang.Object obj0 = new java.lang.Object();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate(obj0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate java.lang.Object@8634d91");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.lang.Class<?> wildcardClass13 = date8.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) '4', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 4");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date3, 1001, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date3 = org.apache.commons.lang.time.DateUtils.add(date0, (int) ' ', 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) 3600000, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 3600000");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator14 = org.apache.commons.lang.time.DateUtils.iterator(date12, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        int int0 = org.apache.commons.lang.time.DateUtils.RANGE_MONTH_SUNDAY;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 5 + "'", int0 == 5);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) 6, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 6");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addDays(date5, 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator9 = org.apache.commons.lang.time.DateUtils.iterator(date7, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 35 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Jan 11 00:00:00 CET 1980");
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date34 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) boolean32, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate false");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date31 = org.apache.commons.lang.time.DateUtils.truncate(date3, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.lang.Class<?> wildcardClass26 = date24.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator36 = org.apache.commons.lang.time.DateUtils.iterator(date34, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.lang.Class<?> wildcardClass27 = date19.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date14 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date12, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date24, 3600000, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date63 = org.apache.commons.lang.time.DateUtils.truncate(date61, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:02 CET 1970");
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date28 = org.apache.commons.lang.time.DateUtils.truncate(date25, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 10");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) '4', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 4");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date21);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date15, (int) (byte) 10);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.add(date37, 0, (int) '#');
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addYears(date50, (int) (short) 10);
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date52);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        boolean boolean62 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date61);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date46);
        boolean boolean64 = org.apache.commons.lang.time.DateUtils.isSameInstant(date15, date46);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date46, 2);
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date66);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date69 = org.apache.commons.lang.time.DateUtils.round(date11, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        java.lang.Object obj0 = new java.lang.Object();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate(obj0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate java.lang.Object@5580f41e");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator17 = org.apache.commons.lang.time.DateUtils.iterator(date9, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 32 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addDays(date24, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date31 = org.apache.commons.lang.time.DateUtils.truncate(date29, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Jan 11 00:00:00 CET 1970");
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round(date19, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) (byte) -1, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate -1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.add(date21, 0, (int) '#');
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.add(date21, 0, 3);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        boolean boolean40 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date39);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date48);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date33, (int) (byte) 10);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addYears(date55, (int) (short) 10);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.add(date55, 0, (int) '#');
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray67);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.addYears(date68, (int) (short) 10);
        boolean boolean71 = org.apache.commons.lang.time.DateUtils.isSameDay(date64, date70);
        java.lang.String[] strArray76 = new java.lang.String[] { "" };
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        boolean boolean80 = org.apache.commons.lang.time.DateUtils.isSameDay(date64, date79);
        boolean boolean81 = org.apache.commons.lang.time.DateUtils.isSameDay(date55, date64);
        boolean boolean82 = org.apache.commons.lang.time.DateUtils.isSameInstant(date33, date64);
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date64, 2);
        boolean boolean85 = org.apache.commons.lang.time.DateUtils.isSameDay(date29, date84);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date84);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator88 = org.apache.commons.lang.time.DateUtils.iterator(date3, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date34, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator56 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) 5, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 5");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator36 = org.apache.commons.lang.time.DateUtils.iterator(date9, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 86400000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.add(date21, 0, (int) '#');
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.add(date21, 0, 3);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        boolean boolean40 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date39);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date48);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date33, (int) (byte) 10);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addYears(date55, (int) (short) 10);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.add(date55, 0, (int) '#');
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray67);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.addYears(date68, (int) (short) 10);
        boolean boolean71 = org.apache.commons.lang.time.DateUtils.isSameDay(date64, date70);
        java.lang.String[] strArray76 = new java.lang.String[] { "" };
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        boolean boolean80 = org.apache.commons.lang.time.DateUtils.isSameDay(date64, date79);
        boolean boolean81 = org.apache.commons.lang.time.DateUtils.isSameDay(date55, date64);
        boolean boolean82 = org.apache.commons.lang.time.DateUtils.isSameInstant(date33, date64);
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date64, 2);
        boolean boolean85 = org.apache.commons.lang.time.DateUtils.isSameDay(date29, date84);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date84);
        java.lang.Class<?> wildcardClass87 = date84.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) '#', 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate #");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) '#');
        java.lang.Class<?> wildcardClass24 = date3.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate(date0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round(date17, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 1000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "", "" };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator26 = org.apache.commons.lang.time.DateUtils.iterator(date24, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 3600000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        java.util.Date date0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.addYears(date4, (int) (short) 10);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.add(date4, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addMonths(date9, (int) (short) 10);
        java.util.Iterator iterator13 = org.apache.commons.lang.time.DateUtils.iterator(date9, (int) (byte) 1);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        boolean boolean24 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addWeeks(date23, 0);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.add(date23, (int) (byte) 1, 6);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addHours(date23, (int) ' ');
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date23);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = org.apache.commons.lang.time.DateUtils.isSameDay(date0, date9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date19 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) boolean17, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate true");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(obj0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator31 = org.apache.commons.lang.time.DateUtils.iterator(date12, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 35 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.lang.Class<?> wildcardClass8 = strArray4.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator10 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) wildcardClass8, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on class [Ljava.lang.String;");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) (byte) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 10");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, (int) ' ', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.round(obj0, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addDays(date29, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:01:59 CET 1970");
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.round(date0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameInstant(date12, date44);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator52 = org.apache.commons.lang.time.DateUtils.iterator(date44, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addMonths(date0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addHours(date15, 3600000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator19 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) 3600000, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 3600000");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Sep 08 01:00:00 CEST 2396");
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) "", (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate ");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date17, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator(date17, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "hi!" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date4, 3600000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator8 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) 3600000, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 3600000");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 01:00:00 CET 1970");
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        java.util.Date date0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.addYears(date4, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.addSeconds(date4, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = org.apache.commons.lang.time.DateUtils.isSameInstant(date0, date8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Iterator iterator12 = org.apache.commons.lang.time.DateUtils.iterator(date8, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator14 = org.apache.commons.lang.time.DateUtils.iterator(date8, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 52 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator12);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator31 = org.apache.commons.lang.time.DateUtils.iterator(date29, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 52 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:10:00 CET 1970");
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator21 = org.apache.commons.lang.time.DateUtils.iterator(date14, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 1001 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addDays(date5, 10);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMonths(date5, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date11 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Jan 11 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jul 01 00:00:00 CEST 1980");
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date12 = org.apache.commons.lang.time.DateUtils.round(date3, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray3);
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unable to parse the date: hi!");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addMonths(date19, (int) (byte) 0);
        java.lang.Class<?> wildcardClass22 = date19.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addSeconds(date0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMonths(date36, (int) (short) 10);
        boolean boolean39 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date36);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addMonths(date36, (int) (byte) -1);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date36, 0, 10);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addDays(date44, 60000);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date21, date44);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator49 = org.apache.commons.lang.time.DateUtils.iterator(date44, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addSeconds(date3, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator9 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) (byte) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray5);
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unable to parse the date: hi!");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, 1001, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date31 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) (-1), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate -1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date27, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator31 = org.apache.commons.lang.time.DateUtils.iterator(date27, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:02:00 CET 1970");
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addHours(date3, (-1));
        java.lang.Class<?> wildcardClass11 = date10.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) 4, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 4");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        java.util.Date date0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray7);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addYears(date8, (int) (short) 10);
        boolean boolean11 = org.apache.commons.lang.time.DateUtils.isSameDay(date4, date10);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date4, date19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date4, (int) (byte) 10);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addYears(date26, (int) (short) 10);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date26, 0, (int) '#');
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray34);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        boolean boolean42 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date41);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date50);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameDay(date26, date35);
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameInstant(date4, date35);
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray56);
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray60);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addYears(date61, (int) (short) 10);
        boolean boolean64 = org.apache.commons.lang.time.DateUtils.isSameDay(date57, date63);
        java.lang.String[] strArray69 = new java.lang.String[] { "" };
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray69);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray69);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray69);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameDay(date57, date72);
        boolean boolean74 = org.apache.commons.lang.time.DateUtils.isSameInstant(date4, date57);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean75 = org.apache.commons.lang.time.DateUtils.isSameInstant(date0, date4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date48);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date57);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date42);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date74, (int) (short) 10);
        boolean boolean77 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date74);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date74, 3600000);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray82);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addYears(date83, (int) (short) 10);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date79, date85);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date85);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date42);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.truncate(date27, (int) (byte) 10);
        java.lang.Class<?> wildcardClass91 = date27.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator25 = org.apache.commons.lang.time.DateUtils.iterator(date23, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 11 00:00:00 CET 1971");
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) 10, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 10");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.add(date17, 3, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date23 = org.apache.commons.lang.time.DateUtils.add(date17, (int) '#', 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Sep 26 00:00:00 CET 1989");
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addHours(date9, (int) ' ');
        java.lang.Class<?> wildcardClass18 = date17.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date23 = org.apache.commons.lang.time.DateUtils.truncate(date21, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date48);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date57);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date42);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date74, (int) (short) 10);
        boolean boolean77 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date74);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date74, 3600000);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray82);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addYears(date83, (int) (short) 10);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date79, date85);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date85);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date42);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.addDays(date42, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date92 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date42, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Sat Apr 11 00:00:00 CET 1970");
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (byte) 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 01:40:00 CET 1980");
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) 3, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 3");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date21, (int) (short) 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate -1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 28 23:59:59 CET 1970");
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date34, 5);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date58 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) 5, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 5");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) '#');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date23, (int) (short) 0);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date23, 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator29 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) 100, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 100");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Fri Jan 02 11:00:00 CET 1970");
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Iterator iterator16 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date9, 4);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date20 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date18, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 2);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray64);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addYears(date65, (int) (short) 10);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.add(date65, 0, (int) '#');
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.addHours(date65, (-1));
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date72);
        java.util.Date date74 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean75 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) 100L, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 100");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addMonths(date0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addMinutes(date0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator28 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) boolean26, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on false");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date63 = org.apache.commons.lang.time.DateUtils.round(date9, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 86400000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:02 CET 1970");
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date24);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date18, (int) (byte) 10);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addHours(date14, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date41 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date39, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Fri Nov 05 01:00:00 CET 1976");
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date48);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date57);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date42);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date74, (int) (short) 10);
        boolean boolean77 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date74);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date74, 3600000);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray82);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addYears(date83, (int) (short) 10);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date79, date85);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date85);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date42);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.truncate(date27, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date93 = org.apache.commons.lang.time.DateUtils.add(date90, 60000, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date34, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator56 = org.apache.commons.lang.time.DateUtils.iterator(date34, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.lang.Class<?> wildcardClass18 = date14.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addMonths(date5, (int) '#');
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addYears(date11, (int) (short) 10);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date11, 0, (int) '#');
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addYears(date24, (int) (short) 10);
        boolean boolean27 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date26);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        boolean boolean36 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date35);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date20);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (short) 10);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.add(date47, 0, (int) '#');
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addMonths(date52, (int) (short) 10);
        boolean boolean55 = org.apache.commons.lang.time.DateUtils.isSameDay(date43, date52);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addYears(date52, 3600000);
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray60);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addYears(date61, (int) (short) 10);
        boolean boolean64 = org.apache.commons.lang.time.DateUtils.isSameDay(date57, date63);
        boolean boolean65 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date63);
        boolean boolean66 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date20);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator68 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date7, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 01 00:00:00 CET 1982");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date10 = org.apache.commons.lang.time.DateUtils.truncate(date3, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.round(date0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addMonths(date0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        java.lang.Object obj0 = new java.lang.Object();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate(obj0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate java.lang.Object@2b4272d1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date48);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date57);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date42);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date74, (int) (short) 10);
        boolean boolean77 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date74);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date74, 3600000);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray82);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addYears(date83, (int) (short) 10);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date79, date85);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date85);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date42);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date42, 1000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator92 = org.apache.commons.lang.time.DateUtils.iterator(date42, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 1000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Thu Jan 01 00:00:01 CET 1970");
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date21);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date15, (int) (byte) 10);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.add(date37, 0, (int) '#');
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addYears(date50, (int) (short) 10);
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date52);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        boolean boolean62 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date61);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date46);
        boolean boolean64 = org.apache.commons.lang.time.DateUtils.isSameInstant(date15, date46);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date46, 2);
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date66);
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray71);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray71);
        java.lang.String[] strArray76 = new java.lang.String[] { "" };
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date77, (int) (short) 10);
        java.util.Date date82 = org.apache.commons.lang.time.DateUtils.add(date77, 0, (int) '#');
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.addMonths(date82, (int) (short) 10);
        boolean boolean85 = org.apache.commons.lang.time.DateUtils.isSameDay(date73, date82);
        java.util.Date date87 = org.apache.commons.lang.time.DateUtils.addYears(date82, 3600000);
        java.lang.String[] strArray90 = new java.lang.String[] { "" };
        java.util.Date date91 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray90);
        java.util.Date date93 = org.apache.commons.lang.time.DateUtils.addYears(date91, (int) (short) 10);
        boolean boolean94 = org.apache.commons.lang.time.DateUtils.isSameDay(date87, date93);
        boolean boolean95 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date93);
        java.util.Date date97 = org.apache.commons.lang.time.DateUtils.truncate(date11, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date99 = org.apache.commons.lang.time.DateUtils.round(date11, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date93);
        org.junit.Assert.assertEquals(date93.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(date97);
        org.junit.Assert.assertEquals(date97.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator38 = org.apache.commons.lang.time.DateUtils.iterator(date36, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator19 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date14, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 52 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date48);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date57);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date42);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date74, (int) (short) 10);
        boolean boolean77 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date74);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date74, 3600000);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray82);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addYears(date83, (int) (short) 10);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date79, date85);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date85);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date42);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.addDays(date42, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator92 = org.apache.commons.lang.time.DateUtils.iterator(date90, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Sat Apr 11 00:00:00 CET 1970");
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.lang.Class<?> wildcardClass8 = strArray4.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date10 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) wildcardClass8, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate class [Ljava.lang.String;");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator24 = org.apache.commons.lang.time.DateUtils.iterator(date22, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.round(date5, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator9 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date7, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Tue Jan 01 00:00:00 CET 1980");
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(obj0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addYears(date15, (int) (short) 10);
        boolean boolean18 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date17);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        boolean boolean27 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date26);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date11, (int) (byte) 10);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date48);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date57);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date42);
        boolean boolean60 = org.apache.commons.lang.time.DateUtils.isSameInstant(date11, date42);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date42, 2);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date62);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date65 = org.apache.commons.lang.time.DateUtils.round(date62, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date11, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Iterator iterator16 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date9, 4);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, 0);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.add(date22, 0, (int) '#');
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date22, 0, 3);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date30);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator33 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date30, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 32 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(date0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.round(date0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        java.lang.Object obj0 = new java.lang.Object();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate(obj0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate java.lang.Object@48f4dc5b");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date3 = org.apache.commons.lang.time.DateUtils.add(date0, 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date31 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) (short) 0, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date19, (int) (byte) 1, 6);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date29, 0, (int) '#');
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addHours(date34, (int) (byte) -1);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date34);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date41 = org.apache.commons.lang.time.DateUtils.add(date7, (int) '#', 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 3);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addHours(date14, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator28 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date26, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 35 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 04:00:00 CET 1970");
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(date0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.truncate(date24, 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addHours(date31, 2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 02:00:00 CET 1970");
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) (byte) 1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.add(date21, 0, (int) '#');
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.add(date21, 0, 3);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        boolean boolean40 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date39);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date48);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date33, (int) (byte) 10);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addYears(date55, (int) (short) 10);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.add(date55, 0, (int) '#');
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray67);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.addYears(date68, (int) (short) 10);
        boolean boolean71 = org.apache.commons.lang.time.DateUtils.isSameDay(date64, date70);
        java.lang.String[] strArray76 = new java.lang.String[] { "" };
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        boolean boolean80 = org.apache.commons.lang.time.DateUtils.isSameDay(date64, date79);
        boolean boolean81 = org.apache.commons.lang.time.DateUtils.isSameDay(date55, date64);
        boolean boolean82 = org.apache.commons.lang.time.DateUtils.isSameInstant(date33, date64);
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date64, 2);
        boolean boolean85 = org.apache.commons.lang.time.DateUtils.isSameDay(date29, date84);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date84);
        java.util.Date date88 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date90 = org.apache.commons.lang.time.DateUtils.truncate(date88, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Fri Jan 02 08:00:00 CET 1970");
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) '#');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date23, (int) (short) 0);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date23, 100);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date23, (int) (short) 1, (int) (byte) 1);
        java.lang.Class<?> wildcardClass31 = date23.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Jan 02 11:00:00 CET 1971");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date19, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) (short) 0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 3601970");
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date18 = org.apache.commons.lang.time.DateUtils.round(date3, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 60000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date31 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) boolean29, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate true");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Iterator iterator59 = org.apache.commons.lang.time.DateUtils.iterator(date12, (int) (byte) 1);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addDays(date12, 3);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addMonths(date61, 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(iterator59);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Jan 04 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu May 04 00:00:00 CEST 1978");
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator28 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date3, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 52 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!" };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Iterator iterator59 = org.apache.commons.lang.time.DateUtils.iterator(date12, (int) (byte) 1);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addDays(date12, 3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date63 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date61, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(iterator59);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Jan 04 00:00:00 CET 1970");
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addHours(date22, 3600000);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addDays(date22, (int) 'a');
        java.lang.Class<?> wildcardClass29 = date22.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Mon Sep 08 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate(date14, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) 4, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 4");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 0, (-1));
        java.lang.Class<?> wildcardClass9 = date3.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addDays(date0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray13);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.add(date14, 0, (int) '#');
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addHours(date14, (-1));
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date24 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) boolean22, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate false");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date12, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date16 = org.apache.commons.lang.time.DateUtils.round(date14, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 1000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date34, 2);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addDays(date34, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date58 = org.apache.commons.lang.time.DateUtils.round(date34, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Apr 08 00:00:00 CET 1970");
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang.time.DateUtils.truncate(date3, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 02 11:00:00 CET 1970");
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (short) 10, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator27 = org.apache.commons.lang.time.DateUtils.iterator(date25, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 86400000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 02:00:00 CET 1970");
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addWeeks(date0, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (byte) 1);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date13, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang.time.DateUtils.truncate(date15, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 31 23:59:59 CET 1970");
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addMonths(date5, (int) '#');
        java.lang.Class<?> wildcardClass8 = date7.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 01 00:00:00 CET 1982");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date59, 60000);
        java.util.Iterator iterator63 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date59, 6);
        java.lang.Class<?> wildcardClass64 = iterator63.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 10:01:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addHours(date0, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date48);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date57);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date42);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date74, (int) (short) 10);
        boolean boolean77 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date74);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date74, 3600000);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray82);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addYears(date83, (int) (short) 10);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date79, date85);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date85);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date42);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.truncate(date27, (int) (byte) 10);
        java.util.Date date92 = org.apache.commons.lang.time.DateUtils.addDays(date27, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator94 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) (short) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 10");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Sun Jan 11 00:02:00 CET 1970");
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 3);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (byte) 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Jan 01 00:00:00 CET 2070");
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date12, (int) (byte) 1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 86400000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date19 = org.apache.commons.lang.time.DateUtils.add(date14, (int) (byte) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Fri Jan 02 00:00:00 CET 1970");
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray55);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date62);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date71);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date56);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addHours(date56, 1);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addSeconds(date75, 3600000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Wed Feb 11 17:00:00 CET 1970");
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator31 = org.apache.commons.lang.time.DateUtils.iterator(date27, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator12 = org.apache.commons.lang.time.DateUtils.iterator(date8, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 1000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) '#', 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on #");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.add(date9, 5, 10);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date62, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator66 = org.apache.commons.lang.time.DateUtils.iterator(date62, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 1000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Jan 11 00:00:00 CET 1970");
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (short) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addSeconds(date22, 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator30 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 10");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:10 CET 1970");
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) '#');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date23, (int) (short) 0);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date23, 100);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date23, (int) (short) 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date23, 1000, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Jan 02 11:00:00 CET 1971");
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 3);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addHours(date14, 4);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addYears(date14, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator30 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date28, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 52 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1976");
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        java.lang.Class<?> wildcardClass23 = date22.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date5, 2, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator10 = org.apache.commons.lang.time.DateUtils.iterator(date8, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 01 00:00:00 CET 1980");
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.add(date9, 5, 10);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date62, (int) (short) 0);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date62, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator68 = org.apache.commons.lang.time.DateUtils.iterator(date66, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sun Jan 11 00:00:00 CET 1970");
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        java.lang.String[] strArray8 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date12, (int) (byte) 1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 86400000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date18 = org.apache.commons.lang.time.DateUtils.round(date14, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Fri Jan 02 00:00:00 CET 1970");
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.lang.Class<?> wildcardClass7 = date6.getClass();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addDays(date0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date10 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.lang.Class<?> wildcardClass58 = date12.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator(date21, 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate(date21, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 60000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Jan 01 00:00:00 CET 2005");
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray13);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.add(date14, 0, (int) '#');
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addHours(date14, (-1));
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date14);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addSeconds(date14, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date26 = org.apache.commons.lang.time.DateUtils.truncate(date14, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:01 CET 1970");
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addMinutes(date19, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date23 = org.apache.commons.lang.time.DateUtils.round(date21, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 60000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:01:00 CET 3601970");
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date34, 2);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addYears(date54, (-1));
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addYears(date54, (int) '4');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Jan 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sat Jan 01 00:00:00 CET 2022");
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.round(date0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray55);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date62);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date71);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date56);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.round(date3, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date77 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date3, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3600000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.add(date9, 4, 1);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date28, 0, (int) '#');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMonths(date33, (int) (short) 10);
        boolean boolean36 = org.apache.commons.lang.time.DateUtils.isSameDay(date22, date33);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMonths(date33, (int) (byte) -1);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addWeeks(date33, 4);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date33);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 08 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang.time.DateUtils.truncate(date23, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 01 00:00:00 CET 1971");
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addHours(date0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date11, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 1000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date25, 4);
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date34);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date34, (int) (byte) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Iterator iterator59 = org.apache.commons.lang.time.DateUtils.iterator(date12, (int) (byte) 1);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addDays(date12, 3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator63 = org.apache.commons.lang.time.DateUtils.iterator(date61, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(iterator59);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Jan 04 00:00:00 CET 1970");
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        java.util.Iterator iterator24 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date22, (int) (byte) 1);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date32, (int) (short) 10);
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date28, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addWeeks(date34, 0);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, (int) (short) -1);
        java.util.Iterator iterator41 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date34, 4);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, 0);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (short) 10);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.add(date47, 0, (int) '#');
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.add(date47, 0, 3);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameInstant(date34, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date22, date55);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray61);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addYears(date67, (int) (short) 10);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.add(date67, 0, (int) '#');
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.addMonths(date72, (int) (short) 10);
        boolean boolean75 = org.apache.commons.lang.time.DateUtils.isSameDay(date63, date72);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date72, (int) (short) 1);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.round(date72, 0);
        boolean boolean80 = org.apache.commons.lang.time.DateUtils.isSameInstant(date55, date72);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date82 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date72, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addHours(date15, 3600000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMinutes(date15, 4);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray26);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addYears(date27, (int) (short) 10);
        boolean boolean30 = org.apache.commons.lang.time.DateUtils.isSameDay(date23, date29);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addWeeks(date29, 0);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addMinutes(date29, (int) (short) -1);
        java.util.Iterator iterator36 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date29, 4);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMinutes(date29, 0);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addYears(date42, (int) (short) 10);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.add(date42, 0, (int) '#');
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.add(date42, 0, 3);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameInstant(date29, date50);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.truncate(date50, 2);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addMinutes(date50, 1);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameInstant(date15, date55);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date59 = org.apache.commons.lang.time.DateUtils.add(date55, (int) '4', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Sep 08 01:00:00 CEST 2396");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 01 00:04:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator36);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:01:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.round(date5, (int) (short) 1);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator11 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) (short) 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:01:00 CET 1980");
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Iterator iterator59 = org.apache.commons.lang.time.DateUtils.iterator(date12, (int) (byte) 1);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addDays(date12, 3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator63 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) 3, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 3");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(iterator59);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Jan 04 00:00:00 CET 1970");
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addWeeks(date59, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator63 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date61, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 97 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Mar 12 10:00:00 CET 1970");
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator(date14, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Dec 02 00:00:00 CET 1971");
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Iterator iterator16 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date9, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator18 = org.apache.commons.lang.time.DateUtils.iterator(date9, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator16);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 0, (-1));
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 08 00:00:00 CET 1970");
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate(date0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 3);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addHours(date14, 4);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addYears(date14, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator30 = org.apache.commons.lang.time.DateUtils.iterator(date28, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 35 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1976");
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addWeeks(date0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator16 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date8, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        java.util.Iterator iterator24 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date22, (int) (byte) 1);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date32, (int) (short) 10);
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date28, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addWeeks(date34, 0);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, (int) (short) -1);
        java.util.Iterator iterator41 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date34, 4);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, 0);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (short) 10);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.add(date47, 0, (int) '#');
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.add(date47, 0, 3);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameInstant(date34, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date22, date55);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray61);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addYears(date67, (int) (short) 10);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.add(date67, 0, (int) '#');
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.addMonths(date72, (int) (short) 10);
        boolean boolean75 = org.apache.commons.lang.time.DateUtils.isSameDay(date63, date72);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date72, (int) (short) 1);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.round(date72, 0);
        boolean boolean80 = org.apache.commons.lang.time.DateUtils.isSameInstant(date55, date72);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date82 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) boolean80, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round true");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addMinutes(date19, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date23 = org.apache.commons.lang.time.DateUtils.round(date19, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:01:00 CET 3601970");
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addMinutes(date19, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date19, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:01:00 CET 3601970");
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator27 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date9, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date59, 60000);
        java.util.Iterator iterator63 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date59, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date65 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) 6, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 6");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 10:01:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator63);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 2);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addHours(date61, (-1));
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMonths(date61, (int) 'a');
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addSeconds(date61, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator69 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) 5, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 5");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:00:02 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Feb 01 00:00:02 CET 1978");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:07 CET 1970");
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addYears(date0, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date25, 4);
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date34);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator37 = org.apache.commons.lang.time.DateUtils.iterator(date34, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 60000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "", "hi!", "hi!" };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addMinutes(date17, 3600000);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMonths(date17, 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Aug 02 01:00:00 CEST 1995");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Jan 27 00:00:00 CET 1997");
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date19, (int) (byte) 1, 6);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date29, 0, (int) '#');
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addHours(date34, (int) (byte) -1);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date34);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date42 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date40, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 1000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) 'a');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.truncate(date3, 1001);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date27, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 86400000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, (-1));
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.round(date36, (int) (byte) 1);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addYears(date48, (int) (short) 10);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date44, date50);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addWeeks(date50, 0);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.add(date50, (int) (byte) 1, 6);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addYears(date64, (int) (short) 10);
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date60, date66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addWeeks(date66, 0);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.add(date66, (int) (byte) 1, 6);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameDay(date50, date72);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.round(date50, (int) (short) 0);
        boolean boolean76 = org.apache.commons.lang.time.DateUtils.isSameInstant(date40, date50);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 31 23:59:00 CET 97");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        boolean boolean24 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date28, 0, (int) '#');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addHours(date28, (-1));
        boolean boolean36 = org.apache.commons.lang.time.DateUtils.isSameInstant(date23, date28);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date11, date23);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addDays(date11, (int) '#');
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addYears(date43, (int) (short) 10);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.add(date43, 0, (int) '#');
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addMonths(date48, (int) (short) 10);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addDays(date48, (int) 'a');
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date39, date52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addHours(date52, 60000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator57 = org.apache.commons.lang.time.DateUtils.iterator(date55, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 1001 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Feb 05 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Feb 10 00:00:00 CET 1977");
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 3);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.truncate(date14, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date28 = org.apache.commons.lang.time.DateUtils.truncate(date26, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date12, (int) (byte) 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        boolean boolean21 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date20);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator19 = org.apache.commons.lang.time.DateUtils.iterator(date15, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray55);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date62);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date71);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date56);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addMinutes(date3, (int) ' ');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:32:00 CET 1970");
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date23 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date21, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Jan 01 00:00:00 CET 2070");
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray13);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.add(date14, 0, (int) '#');
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addHours(date14, (-1));
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date14);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMinutes(date14, (int) '4');
        java.util.Iterator iterator26 = org.apache.commons.lang.time.DateUtils.iterator(date24, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator28 = org.apache.commons.lang.time.DateUtils.iterator(date24, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:52:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator26);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addSeconds(date14, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date23 = org.apache.commons.lang.time.DateUtils.truncate(date21, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 1000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:16:41 CET 1970");
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(obj0, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date5, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator63 = org.apache.commons.lang.time.DateUtils.iterator(date5, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Tue Jan 01 00:00:00 CET 1980");
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Iterator iterator16 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date9, 4);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, 0);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.add(date22, 0, (int) '#');
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date22, 0, 3);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date30);
        java.lang.Class<?> wildcardClass32 = date9.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date19, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date23 = org.apache.commons.lang.time.DateUtils.truncate(date19, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 3601970");
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 3);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addHours(date14, 4);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addYears(date14, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1976");
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator29 = org.apache.commons.lang.time.DateUtils.iterator(date27, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 1000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.lang.Class<?> wildcardClass20 = date19.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addMonths(date5, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date9 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date7, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 01 00:00:00 CET 1982");
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date21, (int) (short) 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date23, (int) '#', 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang.time.DateUtils.truncate(date28, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 1000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 29 00:00:00 CET 1970");
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addYears(date15, (int) (short) 10);
        boolean boolean18 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date17);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addWeeks(date17, 0);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.add(date17, (int) (byte) 1, 6);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray26);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addYears(date27, (int) (short) 10);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.add(date27, 0, (int) '#');
        boolean boolean33 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMinutes(date32, 2);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addSeconds(date35, (-1));
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray40);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addYears(date41, (int) (short) 10);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.add(date41, 0, (int) '#');
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addYears(date54, (int) (short) 10);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date50, date56);
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray62);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray62);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray62);
        boolean boolean66 = org.apache.commons.lang.time.DateUtils.isSameDay(date50, date65);
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date41, date50);
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray71);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray71);
        java.lang.String[] strArray76 = new java.lang.String[] { "" };
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date77, (int) (short) 10);
        java.util.Date date82 = org.apache.commons.lang.time.DateUtils.add(date77, 0, (int) '#');
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.addMonths(date82, (int) (short) 10);
        boolean boolean85 = org.apache.commons.lang.time.DateUtils.isSameDay(date73, date82);
        java.util.Date date87 = org.apache.commons.lang.time.DateUtils.addYears(date82, 3600000);
        java.lang.String[] strArray90 = new java.lang.String[] { "" };
        java.util.Date date91 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray90);
        java.util.Date date93 = org.apache.commons.lang.time.DateUtils.addYears(date91, (int) (short) 10);
        boolean boolean94 = org.apache.commons.lang.time.DateUtils.isSameDay(date87, date93);
        boolean boolean95 = org.apache.commons.lang.time.DateUtils.isSameDay(date50, date93);
        boolean boolean96 = org.apache.commons.lang.time.DateUtils.isSameInstant(date35, date50);
        boolean boolean97 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date50);
        java.util.Date date99 = org.apache.commons.lang.time.DateUtils.addDays(date50, (int) (byte) -1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date93);
        org.junit.Assert.assertEquals(date93.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(date99);
        org.junit.Assert.assertEquals(date99.toString(), "Wed Dec 31 00:00:00 CET 1969");
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        java.util.Date date0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.addYears(date4, (int) (short) 10);
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addYears(date10, (int) (short) 10);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date10, 0, (int) '#');
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addMonths(date15, (int) (short) 10);
        boolean boolean18 = org.apache.commons.lang.time.DateUtils.isSameDay(date4, date15);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addMonths(date15, (int) (byte) -1);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.add(date15, 0, 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addDays(date23, 60000);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date23, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date0, date23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Nov 01 00:00:00 CET 1970");
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.lang.Class<?> wildcardClass8 = date7.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        boolean boolean24 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date28, 0, (int) '#');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addHours(date28, (-1));
        boolean boolean36 = org.apache.commons.lang.time.DateUtils.isSameInstant(date23, date28);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date11, date23);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addHours(date11, (int) '4');
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, 5);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Jan 03 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Fri Jan 03 04:00:00 CET 1975");
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray55);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date62);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date71);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date56);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.round(date3, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date77 = org.apache.commons.lang.time.DateUtils.truncate(date75, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date23, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 11 00:00:00 CET 1971");
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date21, (int) (short) 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) (short) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate -1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 28 23:59:59 CET 1970");
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, (-1));
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.round(date36, (int) (byte) 1);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addWeeks(date40, 0);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addDays(date40, (int) (short) 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 31 23:59:00 CET 97");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Apr 11 00:00:00 CET 98");
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMinutes(date19, (int) (short) 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date27 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) (byte) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round -1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 01 00:10:00 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon Dec 01 00:09:59 CET 1969");
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date32, (int) (short) 10);
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date28, date34);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray40);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray40);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray40);
        boolean boolean44 = org.apache.commons.lang.time.DateUtils.isSameDay(date28, date43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date28, (int) (byte) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameInstant(date24, date28);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date19, (int) (byte) 1, 6);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date29, 0, (int) '#');
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addHours(date34, (int) (byte) -1);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date34);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, 4);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addYears(date50, (int) (short) 10);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.add(date50, 0, (int) '#');
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addMonths(date55, (int) (short) 10);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date44, date55);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addMonths(date55, (int) (byte) -1);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.add(date55, 0, 10);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date55, 3);
        boolean boolean66 = org.apache.commons.lang.time.DateUtils.isSameInstant(date40, date65);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date68 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) boolean66, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round false");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMinutes(date19, (int) (short) 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate(date23, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 01 00:10:00 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon Dec 01 00:09:59 CET 1969");
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date21);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date15, (int) (byte) 10);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.add(date37, 0, (int) '#');
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addYears(date50, (int) (short) 10);
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date52);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        boolean boolean62 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date61);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date46);
        boolean boolean64 = org.apache.commons.lang.time.DateUtils.isSameInstant(date15, date46);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date46, 2);
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date66);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator69 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) boolean67, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on true");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.lang.Class<?> wildcardClass20 = date14.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (short) 10, 2);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) 0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 02:00:00 CET 1970");
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date24, 60000);
        java.util.Iterator iterator33 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date31, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator33);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addHours(date22, 3600000);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addDays(date22, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date28, 1000, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Mon Sep 08 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 00:00:00 CET 1969");
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) '#');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date23, (int) (short) 0);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date23, 100);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date23, (int) (short) 1, (int) (byte) 1);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.truncate(date23, 5);
        java.lang.Class<?> wildcardClass33 = date32.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Jan 02 11:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Jan 02 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.add(date17, 3, (int) '4');
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.truncate(date20, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addWeeks(date20, 1001);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date28, 0, (int) '#');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMonths(date33, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addDays(date33, (int) 'a');
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addMinutes(date33, 3600000);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray48);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addYears(date49, (int) (short) 10);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.add(date49, 0, (int) '#');
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addMonths(date54, (int) (short) 10);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date45, date54);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addYears(date54, 3600000);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.add(date59, 0, (int) ' ');
        java.util.Iterator iterator64 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date62, (int) (byte) 1);
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray67);
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray71);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.addYears(date72, (int) (short) 10);
        boolean boolean75 = org.apache.commons.lang.time.DateUtils.isSameDay(date68, date74);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addWeeks(date74, 0);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addMinutes(date74, (int) (short) -1);
        java.util.Iterator iterator81 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date74, 4);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.addMinutes(date74, 0);
        java.lang.String[] strArray86 = new java.lang.String[] { "" };
        java.util.Date date87 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray86);
        java.util.Date date89 = org.apache.commons.lang.time.DateUtils.addYears(date87, (int) (short) 10);
        java.util.Date date92 = org.apache.commons.lang.time.DateUtils.add(date87, 0, (int) '#');
        java.util.Date date95 = org.apache.commons.lang.time.DateUtils.add(date87, 0, 3);
        boolean boolean96 = org.apache.commons.lang.time.DateUtils.isSameInstant(date74, date95);
        boolean boolean97 = org.apache.commons.lang.time.DateUtils.isSameDay(date62, date95);
        boolean boolean98 = org.apache.commons.lang.time.DateUtils.isSameInstant(date39, date95);
        boolean boolean99 = org.apache.commons.lang.time.DateUtils.isSameDay(date24, date95);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Sep 26 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 26 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Dec 02 00:00:00 CET 2008");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(iterator64);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator81);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date95);
        org.junit.Assert.assertEquals(date95.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date21);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date15, (int) (byte) 10);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.add(date37, 0, (int) '#');
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addYears(date50, (int) (short) 10);
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date52);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        boolean boolean62 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date61);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date46);
        boolean boolean64 = org.apache.commons.lang.time.DateUtils.isSameInstant(date15, date46);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date46, 2);
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date66);
        java.lang.String[] strArray70 = new java.lang.String[] { "" };
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray70);
        java.lang.String[] strArray74 = new java.lang.String[] { "" };
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray74);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addYears(date75, (int) (short) 10);
        boolean boolean78 = org.apache.commons.lang.time.DateUtils.isSameDay(date71, date77);
        java.lang.String[] strArray83 = new java.lang.String[] { "" };
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray83);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray83);
        java.util.Date date86 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray83);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date71, date86);
        java.util.Date date89 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date71, (int) (byte) 10);
        java.util.Date date91 = org.apache.commons.lang.time.DateUtils.addHours(date71, (int) '#');
        java.util.Date date93 = org.apache.commons.lang.time.DateUtils.addMinutes(date91, (int) (short) 0);
        java.util.Date date95 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date93, (int) (byte) 0);
        boolean boolean96 = org.apache.commons.lang.time.DateUtils.isSameDay(date66, date93);
        java.util.Date date98 = org.apache.commons.lang.time.DateUtils.round(date93, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date93);
        org.junit.Assert.assertEquals(date93.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date95);
        org.junit.Assert.assertEquals(date95.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(date98);
        org.junit.Assert.assertEquals(date98.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate(obj0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addYears(date0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addMinutes(date0, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        java.util.Date date0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.addYears(date4, (int) (short) 10);
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addYears(date10, (int) (short) 10);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date10, 0, (int) '#');
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addMonths(date15, (int) (short) 10);
        boolean boolean18 = org.apache.commons.lang.time.DateUtils.isSameDay(date4, date15);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addMonths(date15, (int) (byte) -1);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.add(date15, 0, 10);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.add(date23, (int) (short) 10, 2);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addMonths(date26, 0);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date32, (int) (short) 10);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addYears(date42, (int) (short) 10);
        boolean boolean45 = org.apache.commons.lang.time.DateUtils.isSameDay(date38, date44);
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray50);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray50);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray50);
        boolean boolean54 = org.apache.commons.lang.time.DateUtils.isSameDay(date38, date53);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date38, (int) (byte) 10);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.add(date60, 0, (int) '#');
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.lang.String[] strArray72 = new java.lang.String[] { "" };
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray72);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addYears(date73, (int) (short) 10);
        boolean boolean76 = org.apache.commons.lang.time.DateUtils.isSameDay(date69, date75);
        java.lang.String[] strArray81 = new java.lang.String[] { "" };
        java.util.Date date82 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray81);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray81);
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray81);
        boolean boolean85 = org.apache.commons.lang.time.DateUtils.isSameDay(date69, date84);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date60, date69);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameInstant(date38, date69);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date34, date38);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.addSeconds(date38, 2);
        java.util.Date date92 = org.apache.commons.lang.time.DateUtils.addHours(date90, (-1));
        java.util.Date date94 = org.apache.commons.lang.time.DateUtils.addMonths(date90, (int) 'a');
        java.util.Date date96 = org.apache.commons.lang.time.DateUtils.addSeconds(date90, 5);
        boolean boolean97 = org.apache.commons.lang.time.DateUtils.isSameDay(date26, date90);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = org.apache.commons.lang.time.DateUtils.isSameInstant(date0, date90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Wed Dec 31 23:00:02 CET 1969");
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Wed Feb 01 00:00:02 CET 1978");
        org.junit.Assert.assertNotNull(date96);
        org.junit.Assert.assertEquals(date96.toString(), "Thu Jan 01 00:00:07 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addHours(date9, (int) ' ');
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator21 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date19, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 52 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Jan 01 00:00:00 CET 2080");
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date19, 0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(obj0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator(date21, 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date21, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Jan 01 00:00:00 CET 2005");
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addSeconds(date14, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, (int) (byte) 0);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 08 00:00:00 CET 1970");
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date28 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) (byte) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 10");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Mar 12 00:00:00 CET 3601970");
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (short) 10, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (short) -1, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 02:00:00 CET 1970");
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date34, 2);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addDays(date34, (int) 'a');
        java.util.Iterator iterator58 = org.apache.commons.lang.time.DateUtils.iterator(date56, 3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date60 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) iterator58, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round org.apache.commons.lang.time.DateUtils$DateIterator@39847ce9");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator58);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMinutes(date5, (int) (short) 100);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate(date19, 1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date48);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date57);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date42);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date74, (int) (short) 10);
        boolean boolean77 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date74);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date74, 3600000);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray82);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addYears(date83, (int) (short) 10);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date79, date85);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date85);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date42);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date42, 1000);
        java.util.Date date92 = org.apache.commons.lang.time.DateUtils.round(date42, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Iterator iterator16 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date9, 4);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, 0);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.add(date22, 0, (int) '#');
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date22, 0, 3);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.truncate(date30, 2);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMinutes(date30, 1);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addHours(date30, 1001);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray40);
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray44);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addYears(date45, (int) (short) 10);
        boolean boolean48 = org.apache.commons.lang.time.DateUtils.isSameDay(date41, date47);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addWeeks(date47, 0);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.add(date47, (int) (byte) 1, 6);
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray56);
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray60);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addYears(date61, (int) (short) 10);
        boolean boolean64 = org.apache.commons.lang.time.DateUtils.isSameDay(date57, date63);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addWeeks(date63, 0);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.add(date63, (int) (byte) 1, 6);
        boolean boolean70 = org.apache.commons.lang.time.DateUtils.isSameDay(date47, date69);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.round(date47, (int) (short) 0);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.addYears(date72, (int) 'a');
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMinutes(date74, (-1));
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.round(date76, 0);
        boolean boolean79 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date78);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Feb 11 17:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Dec 31 23:59:00 CET 97");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date9, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) '#');
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:35:00 CET 1970");
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date9, (int) (short) 10);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray64);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addYears(date65, (int) (short) 10);
        java.lang.String[] strArray70 = new java.lang.String[] { "" };
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray70);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.addYears(date71, (int) (short) 10);
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.add(date71, 0, (int) '#');
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.addMonths(date76, (int) (short) 10);
        boolean boolean79 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date76);
        java.util.Date date81 = org.apache.commons.lang.time.DateUtils.addMonths(date76, (int) (byte) -1);
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.add(date76, 0, 10);
        java.util.Date date86 = org.apache.commons.lang.time.DateUtils.addDays(date84, 60000);
        java.util.Date date88 = org.apache.commons.lang.time.DateUtils.addHours(date84, 3600000);
        boolean boolean89 = org.apache.commons.lang.time.DateUtils.isSameDay(date61, date84);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Mon Sep 08 01:00:00 CEST 2380");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(obj0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) '#');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date23, (int) (short) 0);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date23, 100);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date23, (int) (short) 1, (int) (byte) 1);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, (int) (short) 100);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addWeeks(date32, (int) (byte) -1);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addHours(date34, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Jan 02 11:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Jan 02 11:01:40 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Fri Dec 26 11:01:40 CET 1969");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Fri Dec 26 21:01:40 CET 1969");
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 2);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray64);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addYears(date65, (int) (short) 10);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.add(date65, 0, (int) '#');
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.addHours(date65, (-1));
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date72);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addMonths(date9, 60000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date78 = org.apache.commons.lang.time.DateUtils.add(date9, 86400000, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Mon Jan 01 00:00:00 CET 6970");
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date24, 60000);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date31, 1);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addSeconds(date33, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date37 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) (short) 1, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 08 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 08 00:01:01 CET 1970");
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMinutes(date11, (int) (byte) 100);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.truncate(date11, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator17 = org.apache.commons.lang.time.DateUtils.iterator(date15, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray13);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.add(date14, 0, (int) '#');
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addHours(date14, (-1));
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date14);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMinutes(date14, (int) '4');
        java.util.Iterator iterator26 = org.apache.commons.lang.time.DateUtils.iterator(date24, 4);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:52:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Dec 31 23:52:00 CET 1969");
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMinutes(date29, 2);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMonths(date31, (int) (byte) 1);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.round(date31, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Feb 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addMonths(date24, 3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date29 = org.apache.commons.lang.time.DateUtils.add(date24, (int) '#', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Jul 11 00:00:00 CEST 2134");
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Iterator iterator12 = org.apache.commons.lang.time.DateUtils.iterator(date8, (int) (byte) 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addYears(date20, (int) (short) 10);
        boolean boolean23 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addWeeks(date22, 0);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (byte) 1, 6);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addHours(date22, (int) ' ');
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameInstant(date8, date22);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMinutes(date22, 6);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMonths(date22, 0);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.truncate(date22, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:06:00 CET 1980");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date59, 60000);
        java.lang.Class<?> wildcardClass62 = date61.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 10:01:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) 'a');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.truncate(date3, 1001);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, (int) (byte) 0);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date27, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addWeeks(date0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (byte) 1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (byte) 10, 1000);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) (byte) 0);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addDays(date18, 100);
        java.lang.Class<?> wildcardClass21 = date18.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Feb 11 16:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Apr 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.round(date5, (int) (short) 1);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (short) 1);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.truncate(date7, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:01:00 CET 1980");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date24);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date18, (int) (byte) 10);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, (int) (byte) 10);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addMinutes(date39, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date43 = org.apache.commons.lang.time.DateUtils.truncate(date39, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:10:00 CET 1970");
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addHours(date0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.util.Iterator iterator16 = org.apache.commons.lang.time.DateUtils.iterator(date8, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date18 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) iterator16, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round org.apache.commons.lang.time.DateUtils$DateIterator@20f02d8b");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(iterator16);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date28 = org.apache.commons.lang.time.DateUtils.truncate(date3, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3600000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date19, (int) (byte) 1, 6);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date29, 0, (int) '#');
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addHours(date34, (int) (byte) -1);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date34);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date40 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date34, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date34, 5);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, 5);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addYears(date64, (int) (short) 10);
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date60, date66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addWeeks(date66, 0);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addMinutes(date66, (int) (short) -1);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.addMinutes(date66, 1000);
        boolean boolean74 = org.apache.commons.lang.time.DateUtils.isSameInstant(date34, date73);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date76 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date73, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Tue Jan 01 16:40:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.round(date0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addWeeks(date0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Iterator iterator16 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date9, 4);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, 0);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.add(date22, 0, (int) '#');
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date22, 0, 3);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.truncate(date30, 2);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMinutes(date30, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date35, (int) '4', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:01:00 CET 1970");
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date21, (int) (short) 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.lang.Class<?> wildcardClass26 = date23.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addHours(date3, 1000);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date21, (int) (short) 1);
        java.lang.Class<?> wildcardClass24 = date21.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Feb 11 16:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 11 16:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "hi!" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date4, 3600000);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.addYears(date6, 86400000);
        java.lang.Class<?> wildcardClass9 = date8.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 01:00:00 CET 86401970");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray6);
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unable to parse the date: hi!");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (byte) 1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (byte) 10, 1000);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date20 = org.apache.commons.lang.time.DateUtils.round(date18, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Feb 11 16:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addWeeks(date17, (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator21 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date17, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Sep 20 00:00:00 CEST 1988");
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (short) 10, 2);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray40);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addYears(date41, (int) (short) 10);
        boolean boolean44 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date43);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date37, (int) (byte) 10);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addYears(date59, (int) (short) 10);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.add(date59, 0, (int) '#');
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray67);
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray71);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.addYears(date72, (int) (short) 10);
        boolean boolean75 = org.apache.commons.lang.time.DateUtils.isSameDay(date68, date74);
        java.lang.String[] strArray80 = new java.lang.String[] { "" };
        java.util.Date date81 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray80);
        java.util.Date date82 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray80);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray80);
        boolean boolean84 = org.apache.commons.lang.time.DateUtils.isSameDay(date68, date83);
        boolean boolean85 = org.apache.commons.lang.time.DateUtils.isSameDay(date59, date68);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameInstant(date37, date68);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameInstant(date33, date37);
        java.util.Date date89 = org.apache.commons.lang.time.DateUtils.addSeconds(date37, 2);
        java.util.Date date91 = org.apache.commons.lang.time.DateUtils.addHours(date89, (-1));
        java.util.Date date93 = org.apache.commons.lang.time.DateUtils.addMonths(date89, (int) 'a');
        java.util.Date date95 = org.apache.commons.lang.time.DateUtils.addSeconds(date89, 5);
        boolean boolean96 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date89);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator98 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date89, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 97 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Wed Dec 31 23:00:02 CET 1969");
        org.junit.Assert.assertNotNull(date93);
        org.junit.Assert.assertEquals(date93.toString(), "Wed Feb 01 00:00:02 CET 1978");
        org.junit.Assert.assertNotNull(date95);
        org.junit.Assert.assertEquals(date95.toString(), "Thu Jan 01 00:00:07 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 4, 3600000);
        java.lang.Class<?> wildcardClass23 = date22.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Mon Dec 29 23:59:59 CET 70983");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date3, (int) 'a', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addSeconds(date21, 86400000);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMonths(date23, 60000);
        java.lang.Class<?> wildcardClass26 = date23.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 05 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Dec 05 00:00:00 CET 6972");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date9, 3);
        java.lang.Class<?> wildcardClass12 = date9.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date3, 4);
        java.util.Iterator iterator14 = org.apache.commons.lang.time.DateUtils.iterator(date12, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator14);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.add(date16, 10, (-1));
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, 5);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date33);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        boolean boolean43 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date27, (int) (byte) 10);
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addYears(date54, (int) (short) 10);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date50, date56);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addWeeks(date56, 0);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.add(date56, (int) (byte) 1, 6);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addSeconds(date62, 86400000);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date64, (-1));
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date45, date66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addMinutes(date66, 10);
        java.lang.Class<?> wildcardClass70 = date69.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Dec 31 23:00:00 CET 2069");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 05 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Tue Sep 27 00:09:59 CET 1988");
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addYears(date5, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date63 = org.apache.commons.lang.time.DateUtils.round(date5, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Mon Jan 01 00:00:00 CET 1990");
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) "", 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round ");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addDays(date9, 3600000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date38 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) 3600000, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 3600000");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Jun 19 00:00:00 CEST 11836");
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Iterator iterator59 = org.apache.commons.lang.time.DateUtils.iterator(date12, (int) (byte) 1);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addDays(date12, 3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date63 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date12, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(iterator59);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Jan 04 00:00:00 CET 1970");
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (byte) 1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (byte) 10, 1000);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) (byte) 0);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addDays(date18, 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator22 = org.apache.commons.lang.time.DateUtils.iterator(date18, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 97 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Feb 11 16:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Apr 11 00:00:00 CET 1970");
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.add(date17, 3, (int) '4');
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.truncate(date20, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.truncate(date20, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date26 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date20, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Sep 26 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 26 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Jan 01 00:00:00 CET 1989");
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date20 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date18, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date21, (int) (short) 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) (short) -1, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate -1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 28 23:59:59 CET 1970");
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addSeconds(date21, 86400000);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMonths(date23, 60000);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray29);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray29);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addYears(date35, (int) (short) 10);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.add(date35, 0, (int) '#');
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addMonths(date40, (int) (short) 10);
        boolean boolean43 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addYears(date40, 3600000);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date45, (int) (short) 0);
        boolean boolean48 = org.apache.commons.lang.time.DateUtils.isSameInstant(date23, date47);
        java.lang.Class<?> wildcardClass49 = date23.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 05 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Dec 05 00:00:00 CET 6972");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date19, (int) (byte) 1, 6);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date29, 0, (int) '#');
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addHours(date34, (int) (byte) -1);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date34);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, 4);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addYears(date50, (int) (short) 10);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.add(date50, 0, (int) '#');
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addMonths(date55, (int) (short) 10);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date44, date55);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addMonths(date55, (int) (byte) -1);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.add(date55, 0, 10);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date55, 3);
        boolean boolean66 = org.apache.commons.lang.time.DateUtils.isSameInstant(date40, date65);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator68 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) boolean66, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on false");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate(date0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        boolean boolean24 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date28, 0, (int) '#');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addHours(date28, (-1));
        boolean boolean36 = org.apache.commons.lang.time.DateUtils.isSameInstant(date23, date28);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date11, date23);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addDays(date11, (int) '#');
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addYears(date43, (int) (short) 10);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.add(date43, 0, (int) '#');
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addMonths(date48, (int) (short) 10);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addDays(date48, (int) 'a');
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date39, date52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addHours(date52, 60000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date57 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date55, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Feb 05 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Feb 10 00:00:00 CET 1977");
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate(date3, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3600000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(obj0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date24 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date19, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.lang.Class<?> wildcardClass20 = date14.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date24);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date18, (int) (byte) 10);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addHours(date14, 1);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addHours(date39, 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Fri Nov 05 01:00:00 CET 1976");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Fri Nov 05 02:00:00 CET 1976");
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addSeconds(date14, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator25 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date23, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date26 = org.apache.commons.lang.time.DateUtils.add(date3, (int) ' ', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 01 00:00:00 CET 1971");
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Nov 01 00:00:00 CET 1970");
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date59, 60000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date63 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date59, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 86400000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 10:01:00 CET 1970");
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (short) -1);
        java.util.Iterator iterator33 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date3, 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(iterator33);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date34, 5);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addMinutes(date54, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator58 = org.apache.commons.lang.time.DateUtils.iterator(date54, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:32:00 CET 1970");
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) (byte) 1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date31, (int) (byte) 1);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addSeconds(date31, 60000);
        java.util.Iterator iterator37 = org.apache.commons.lang.time.DateUtils.iterator(date31, 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Mon Dec 01 16:40:00 CET 1969");
        org.junit.Assert.assertNotNull(iterator37);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        java.util.Date date0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray7);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addYears(date8, (int) (short) 10);
        boolean boolean11 = org.apache.commons.lang.time.DateUtils.isSameDay(date4, date10);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addWeeks(date10, 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date10, (int) (byte) 1, 6);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addYears(date24, (int) (short) 10);
        boolean boolean27 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date26);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addWeeks(date26, 0);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.add(date26, (int) (byte) 1, 6);
        boolean boolean33 = org.apache.commons.lang.time.DateUtils.isSameDay(date10, date32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.round(date10, (int) (short) 0);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addMinutes(date35, (int) (short) -1);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addHours(date35, 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = org.apache.commons.lang.time.DateUtils.isSameDay(date0, date39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Fri Dec 31 23:59:00 CET 1");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Jan 01 01:00:00 CET 1");
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date34, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date56 = org.apache.commons.lang.time.DateUtils.truncate(date34, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date16 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date9, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3600000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 2);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addHours(date61, (-1));
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMonths(date63, 86400000);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addDays(date63, 4);
        java.util.Iterator iterator69 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date63, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:00:02 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:00:02 CET 7201969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sun Jan 04 23:00:02 CET 1970");
        org.junit.Assert.assertNotNull(iterator69);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Iterator iterator12 = org.apache.commons.lang.time.DateUtils.iterator(date8, (int) (byte) 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addYears(date20, (int) (short) 10);
        boolean boolean23 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addWeeks(date22, 0);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (byte) 1, 6);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addHours(date22, (int) ' ');
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameInstant(date8, date22);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addHours(date22, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date35 = org.apache.commons.lang.time.DateUtils.truncate(date22, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, (int) (short) -1);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addHours(date34, 1);
        java.lang.Class<?> wildcardClass39 = date38.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Fri Dec 31 23:59:00 CET 1");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 01:00:00 CET 1");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.add(date21, 0, (int) '#');
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.add(date21, 0, 3);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        boolean boolean40 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date39);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date48);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date33, (int) (byte) 10);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addYears(date55, (int) (short) 10);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.add(date55, 0, (int) '#');
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray67);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.addYears(date68, (int) (short) 10);
        boolean boolean71 = org.apache.commons.lang.time.DateUtils.isSameDay(date64, date70);
        java.lang.String[] strArray76 = new java.lang.String[] { "" };
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        boolean boolean80 = org.apache.commons.lang.time.DateUtils.isSameDay(date64, date79);
        boolean boolean81 = org.apache.commons.lang.time.DateUtils.isSameDay(date55, date64);
        boolean boolean82 = org.apache.commons.lang.time.DateUtils.isSameInstant(date33, date64);
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date64, 2);
        boolean boolean85 = org.apache.commons.lang.time.DateUtils.isSameDay(date29, date84);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date84);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date89 = org.apache.commons.lang.time.DateUtils.add(date3, 1001, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        boolean boolean24 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date28, 0, (int) '#');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addHours(date28, (-1));
        boolean boolean36 = org.apache.commons.lang.time.DateUtils.isSameInstant(date23, date28);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date11, date23);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date39 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) boolean37, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate false");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date21, (int) (short) 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date23, (int) '#', 0);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addSeconds(date28, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date32 = org.apache.commons.lang.time.DateUtils.round(date28, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 86400000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 29 00:00:01 CET 1970");
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date23 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) 4, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 4");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addYears(date15, (int) (short) 10);
        boolean boolean18 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date17);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        boolean boolean27 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date26);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date11, (int) (byte) 10);
        boolean boolean30 = org.apache.commons.lang.time.DateUtils.isSameDay(date7, date29);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.add(date34, 0, (int) '#');
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.add(date34, 0, 3);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addMinutes(date42, (int) (byte) 100);
        boolean boolean45 = org.apache.commons.lang.time.DateUtils.isSameDay(date7, date44);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date47 = org.apache.commons.lang.time.DateUtils.round(date44, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        java.util.Date date0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray7);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addYears(date8, (int) (short) 10);
        boolean boolean11 = org.apache.commons.lang.time.DateUtils.isSameDay(date4, date10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date4, (int) (short) 1, (int) (byte) 0);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.add(date14, (int) (short) 1, (int) (byte) 100);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMinutes(date17, 86400000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date17, 10, (-1));
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addWeeks(date17, 5);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date0, date17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Dec 31 23:00:00 CET 2069");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Feb 05 00:00:00 CET 2070");
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date21, (int) (short) 0);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addSeconds(date30, 1001);
        boolean boolean33 = org.apache.commons.lang.time.DateUtils.isSameDay(date21, date30);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date35 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date21, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:16:41 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addWeeks(date17, (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date19, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Sep 20 00:00:00 CEST 1988");
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 2);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addHours(date61, (-1));
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMonths(date63, 86400000);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addDays(date63, 4);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addSeconds(date63, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:00:02 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:00:02 CET 7201969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sun Jan 04 23:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:00:12 CET 1969");
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (short) 10, 2);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date33 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) (short) 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 100");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Dec 02 02:00:00 CET 1971");
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 3);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addHours(date14, 4);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.truncate(date26, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator30 = org.apache.commons.lang.time.DateUtils.iterator(date28, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date12, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date16 = org.apache.commons.lang.time.DateUtils.round(date12, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addWeeks(date8, (int) '4');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, (int) 'a');
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 4);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 5);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Nov 09 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Feb 04 00:00:00 CET 1971");
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addSeconds(date21, 86400000);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMonths(date23, 60000);
        java.util.Iterator iterator27 = org.apache.commons.lang.time.DateUtils.iterator(date25, 4);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 05 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Dec 05 00:00:00 CET 6972");
        org.junit.Assert.assertNotNull(iterator27);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date24, 60000);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date31, 1);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addSeconds(date33, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator37 = org.apache.commons.lang.time.DateUtils.iterator(date35, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 52 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 08 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 08 00:01:01 CET 1970");
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date12, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date63 = org.apache.commons.lang.time.DateUtils.truncate(date12, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (short) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addSeconds(date22, 10);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date32, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.add(date32, 0, (int) '#');
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addHours(date37, (int) (byte) -1);
        boolean boolean40 = org.apache.commons.lang.time.DateUtils.isSameInstant(date28, date37);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date42 = org.apache.commons.lang.time.DateUtils.truncate(date37, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 1000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (short) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addSeconds(date22, 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addDays(date22, (int) 'a');
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date22, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 1000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 01 00:00:00 CET 2022");
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date34, 2);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.add(date34, (int) (byte) 10, (int) (byte) 0);
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray62);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray62);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray62);
        boolean boolean66 = org.apache.commons.lang.time.DateUtils.isSameInstant(date57, date65);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.addMinutes(date57, (int) (short) 10);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.add(date68, 10, (-1));
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Wed Dec 31 23:10:00 CET 1969");
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date16 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date25, 4);
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, (int) (byte) 100);
        java.lang.Class<?> wildcardClass38 = date37.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray55);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date62);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date71);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date56);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addHours(date56, 1);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addDays(date56, 6);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date77, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date81 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) (short) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate -1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Wed Jan 07 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Tue Jan 06 23:59:59 CET 1970");
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date19, (int) (byte) 1, 6);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date29, 0, (int) '#');
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addHours(date34, (int) (byte) -1);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date34);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date7, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date24);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date18, (int) (byte) 10);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, (int) (byte) 10);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addMinutes(date39, (int) (byte) 0);
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray44);
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray48);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addYears(date49, (int) (short) 10);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameDay(date45, date51);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addWeeks(date51, 0);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.add(date51, (int) (byte) 1, 6);
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray60);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addYears(date61, (int) (short) 10);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.add(date61, 0, (int) '#');
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date51, date66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addMinutes(date66, 2);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date66, 5);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameInstant(date41, date71);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addHours(date8, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date12 = org.apache.commons.lang.time.DateUtils.round(date10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:00:00 CET 1969");
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) 'a');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.truncate(date3, 1001);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date3, 1001);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addDays(date3, 3);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.truncate(date29, (int) (byte) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addSeconds(date31, 60000);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addSeconds(date33, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Jan 04 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Jan 04 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Jan 04 16:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Jan 04 16:40:10 CET 1970");
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Iterator iterator12 = org.apache.commons.lang.time.DateUtils.iterator(date8, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date14 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) (byte) 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator12);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(date0, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.add(date9, 5, 10);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addMinutes(date62, (int) (byte) 10);
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray67);
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray71);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.addYears(date72, (int) (short) 10);
        boolean boolean75 = org.apache.commons.lang.time.DateUtils.isSameDay(date68, date74);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addWeeks(date74, 0);
        java.util.Date date80 = org.apache.commons.lang.time.DateUtils.add(date74, (int) (byte) 1, 6);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.add(date74, 4, 1);
        boolean boolean84 = org.apache.commons.lang.time.DateUtils.isSameDay(date64, date74);
        java.util.Iterator iterator86 = org.apache.commons.lang.time.DateUtils.iterator(date64, 2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Jan 11 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Tue Jan 08 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(iterator86);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round(date24, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date31 = org.apache.commons.lang.time.DateUtils.round(date24, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 60000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Iterator iterator12 = org.apache.commons.lang.time.DateUtils.iterator(date8, (int) (byte) 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addYears(date20, (int) (short) 10);
        boolean boolean23 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addWeeks(date22, 0);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (byte) 1, 6);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addHours(date22, (int) ' ');
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameInstant(date8, date22);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMinutes(date22, 6);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMonths(date33, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:06:00 CET 1980");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Fri Feb 01 00:06:00 CET 1980");
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Iterator iterator16 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date9, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date18 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) 4, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 4");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator16);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addDays(date0, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date59, 60000);
        java.util.Iterator iterator63 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date59, 6);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addWeeks(date59, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date67 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) (byte) 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 100");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 10:01:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator63);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Dec 02 10:00:00 CET 1971");
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator21 = org.apache.commons.lang.time.DateUtils.iterator(date14, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addSeconds(date24, 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date31, 0);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, 60000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:10 CET 61970");
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) '#');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date3, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator27 = org.apache.commons.lang.time.DateUtils.iterator(date3, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:01 CET 1970");
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.add(date21, 0, (int) '#');
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.add(date21, 0, 3);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        boolean boolean40 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date39);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date48);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date33, (int) (byte) 10);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addYears(date55, (int) (short) 10);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.add(date55, 0, (int) '#');
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray67);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.addYears(date68, (int) (short) 10);
        boolean boolean71 = org.apache.commons.lang.time.DateUtils.isSameDay(date64, date70);
        java.lang.String[] strArray76 = new java.lang.String[] { "" };
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        boolean boolean80 = org.apache.commons.lang.time.DateUtils.isSameDay(date64, date79);
        boolean boolean81 = org.apache.commons.lang.time.DateUtils.isSameDay(date55, date64);
        boolean boolean82 = org.apache.commons.lang.time.DateUtils.isSameInstant(date33, date64);
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date64, 2);
        boolean boolean85 = org.apache.commons.lang.time.DateUtils.isSameDay(date29, date84);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date84);
        java.util.Date date88 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator90 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date88, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Fri Jan 02 08:00:00 CET 1970");
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        java.util.Date date0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.addYears(date4, (int) (short) 10);
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray9);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray13);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date10, date16);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date10, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date10, (int) (byte) 10);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date32, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.add(date32, 0, (int) '#');
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray40);
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray44);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addYears(date45, (int) (short) 10);
        boolean boolean48 = org.apache.commons.lang.time.DateUtils.isSameDay(date41, date47);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date41, date56);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date32, date41);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date10, date41);
        boolean boolean60 = org.apache.commons.lang.time.DateUtils.isSameInstant(date6, date10);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addSeconds(date10, 2);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addHours(date62, (-1));
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addMonths(date64, 86400000);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.addYears(date66, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean69 = org.apache.commons.lang.time.DateUtils.isSameInstant(date0, date68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:00:02 CET 1969");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:00:02 CET 7201969");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Mon Dec 31 23:00:02 CET 7202001");
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator(date21, 1);
        java.lang.Class<?> wildcardClass24 = iterator23.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator31 = org.apache.commons.lang.time.DateUtils.iterator(date3, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 52 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addYears(date18, (int) (byte) -1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date24, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date30, 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date30, (int) (byte) 1, 6);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addYears(date40, (int) (short) 10);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.add(date40, 0, (int) '#');
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date30, date45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addHours(date45, (int) (byte) -1);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date48);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date48, 3600000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date53 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date48, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addHours(date15, 3600000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addHours(date15, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator21 = org.apache.commons.lang.time.DateUtils.iterator(date15, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Sep 08 01:00:00 CEST 2396");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Dec 31 23:00:00 CET 1985");
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, (int) (byte) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addDays(date24, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator30 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date28, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 60000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Mar 22 00:00:00 CET 3601970");
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 3);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addHours(date14, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date29 = org.apache.commons.lang.time.DateUtils.add(date14, (int) (short) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 04:00:00 CET 1970");
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, (-1));
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.round(date38, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date42 = org.apache.commons.lang.time.DateUtils.round(date40, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 31 23:59:00 CET 97");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (byte) 1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (byte) 10, 1000);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date20 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Feb 11 16:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang.time.DateUtils.round(date23, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 11 00:00:00 CET 1971");
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addYears(date15, (int) (short) 10);
        boolean boolean18 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date17);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        boolean boolean27 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date26);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date11, (int) (byte) 10);
        boolean boolean30 = org.apache.commons.lang.time.DateUtils.isSameDay(date7, date29);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date29, 6, (int) ' ');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, 86400000);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addMinutes(date35, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator39 = org.apache.commons.lang.time.DateUtils.iterator(date35, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 3600000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Mon Feb 02 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Mon Feb 02 00:00:00 CET 86401970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Mon Feb 02 00:04:00 CET 86401970");
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) 'a');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.truncate(date3, 1001);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date3, 1001);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addDays(date3, 3);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.truncate(date29, (int) (byte) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addSeconds(date31, 60000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date35 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) 60000, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 60000");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Jan 04 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Jan 04 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Jan 04 16:40:00 CET 1970");
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addDays(date27, 60000);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.round(date27, 0);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, 86400000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Apr 10 23:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 26 23:00:00 CET 1972");
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.addSeconds(date6, 1001);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addYears(date12, (int) (short) 10);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addYears(date18, (int) (short) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.add(date18, 0, (int) '#');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMonths(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date23);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addMonths(date23, (int) (byte) -1);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date23, 0, 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addDays(date31, 60000);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, 3600000);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date35, 0);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameInstant(date8, date37);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:16:41 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Apr 11 00:00:00 CEST 3602134");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Apr 11 00:00:00 CEST 3602134");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Iterator iterator21 = org.apache.commons.lang.time.DateUtils.iterator(date19, 5);
        java.lang.Class<?> wildcardClass22 = iterator21.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.add(date16, 10, (-1));
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, 5);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) ' ');
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate(date25, 0);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date27, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Dec 31 23:00:00 CET 2069");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 05 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Jan 01 00:00:00 CET 2102");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addMonths(date19, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) (byte) 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 3601970");
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.add(date16, 10, (-1));
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, 5);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date33);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        boolean boolean43 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date27, (int) (byte) 10);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addWeeks(date27, (int) 'a');
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.truncate(date27, 1001);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addWeeks(date49, (int) (byte) 0);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date51, 86400000);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date51, (int) (byte) 1);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameInstant(date16, date55);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Dec 31 23:00:00 CET 2069");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 05 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Fri Jan 02 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Fri Jan 01 00:00:00 CET 1971");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }
}


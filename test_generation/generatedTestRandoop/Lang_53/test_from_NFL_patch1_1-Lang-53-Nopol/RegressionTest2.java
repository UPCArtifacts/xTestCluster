import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round(date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addWeeks(date29, (int) 'a');
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addSeconds(date31, 0);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addSeconds(date31, 6);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Nov 11 00:00:06 CET 1971");
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round(date14, 0);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date14, 3600000);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date14, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addDays(date14, 0);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date27, 3);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Sep 08 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "hi!" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date4, 3600000);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.addHours(date6, (int) (short) -1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addYears(date8, 3600000);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 3601970");
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addDays(date27, 60000);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.round(date27, 0);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addYears(date35, (int) (short) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray40);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addYears(date41, (int) (short) 10);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.add(date41, 0, (int) '#');
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addMonths(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date46);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addMonths(date46, (int) (byte) -1);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addDays(date51, (int) (byte) 100);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addSeconds(date53, 86400000);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addMonths(date55, 60000);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray61);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addYears(date67, (int) (short) 10);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.add(date67, 0, (int) '#');
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.addMonths(date72, (int) (short) 10);
        boolean boolean75 = org.apache.commons.lang.time.DateUtils.isSameDay(date63, date72);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addYears(date72, 3600000);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date77, (int) (short) 0);
        boolean boolean80 = org.apache.commons.lang.time.DateUtils.isSameInstant(date55, date79);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.add(date55, (int) (short) 10, (int) (byte) 1);
        boolean boolean84 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date55);
        java.util.Date date86 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date27, 5);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Apr 10 23:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Dec 05 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Dec 05 00:00:00 CET 6972");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Tue Dec 05 01:00:00 CET 1972");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Wed Dec 31 00:00:00 CET 1969");
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date34, 5);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addWeeks(date54, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator58 = org.apache.commons.lang.time.DateUtils.iterator(date56, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date17, 0);
        java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator(date17, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date17, 2);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date29, 0, (int) '#');
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addYears(date42, (int) (short) 10);
        boolean boolean45 = org.apache.commons.lang.time.DateUtils.isSameDay(date38, date44);
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray50);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray50);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray50);
        boolean boolean54 = org.apache.commons.lang.time.DateUtils.isSameDay(date38, date53);
        boolean boolean55 = org.apache.commons.lang.time.DateUtils.isSameDay(date29, date38);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray64);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addYears(date65, (int) (short) 10);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.add(date65, 0, (int) '#');
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.addMonths(date70, (int) (short) 10);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameDay(date61, date70);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addYears(date70, 3600000);
        java.lang.String[] strArray78 = new java.lang.String[] { "" };
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray78);
        java.util.Date date81 = org.apache.commons.lang.time.DateUtils.addYears(date79, (int) (short) 10);
        boolean boolean82 = org.apache.commons.lang.time.DateUtils.isSameDay(date75, date81);
        boolean boolean83 = org.apache.commons.lang.time.DateUtils.isSameDay(date38, date81);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addHours(date38, (int) (byte) 10);
        java.util.Date date87 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date38, (int) (short) 10);
        java.util.Date date89 = org.apache.commons.lang.time.DateUtils.addMonths(date87, 10);
        java.util.Date date92 = org.apache.commons.lang.time.DateUtils.add(date89, 10, 4);
        boolean boolean93 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date92);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Sep 27 00:00:00 CEST 1990");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Sun Nov 01 04:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date48);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date57);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date42);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date74, (int) (short) 10);
        boolean boolean77 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date74);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date74, 3600000);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray82);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addYears(date83, (int) (short) 10);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date79, date85);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date85);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date42);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date42, 1000);
        java.util.Date date92 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date90, (int) (byte) -1);
        java.lang.Class<?> wildcardClass93 = date90.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addYears(date0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addSeconds(date21, 86400000);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMonths(date23, 60000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) 60000, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 60000");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 05 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Dec 05 00:00:00 CET 6972");
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addSeconds(date0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 3600000);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.truncate(date11, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang.time.DateUtils.truncate(date13, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Apr 04 00:10:00 CEST 70965");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Mon Apr 01 00:00:00 CEST 70965");
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date34, 6);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addSeconds(date34, 60000);
        java.util.Iterator iterator42 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date34, 4);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 00:00:00 CET 7");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 01 16:40:00 CET 1");
        org.junit.Assert.assertNotNull(iterator42);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (byte) 100);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date23, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date27 = org.apache.commons.lang.time.DateUtils.round(date23, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Mar 11 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon Mar 10 23:59:00 CET 2070");
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addHours(date3, 1000);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addDays(date21, 3);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date21, (int) (byte) -1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Feb 11 16:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Feb 14 16:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Feb 11 15:59:59 CET 1970");
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date5, 2, 1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, 4);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray13);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addYears(date18, (int) (short) 10);
        boolean boolean21 = org.apache.commons.lang.time.DateUtils.isSameDay(date14, date20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date20, 0);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.add(date20, (int) (byte) 1, 6);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addSeconds(date26, 86400000);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date28, (-1));
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date28, 0);
        java.util.Iterator iterator34 = org.apache.commons.lang.time.DateUtils.iterator(date28, (int) (byte) 1);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date28, 2);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.add(date36, 3, (int) 'a');
        boolean boolean40 = org.apache.commons.lang.time.DateUtils.isSameInstant(date10, date36);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Jun 01 00:00:00 CEST 1980");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(iterator34);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Sep 27 00:00:00 CEST 1990");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Aug 06 00:00:00 CEST 1992");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date19, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date23 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) (short) 0, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 3601970");
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.add(date17, 3, (int) '4');
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.truncate(date20, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.truncate(date20, 1);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addMonths(date24, 100);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray29);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) (short) 10);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameDay(date30, date36);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.add(date30, (int) (short) 1, (int) (byte) 0);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.add(date40, (int) (short) 1, (int) (byte) 100);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addMinutes(date43, 86400000);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addYears(date45, (int) (byte) -1);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.add(date45, 6, (int) (byte) 0);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addYears(date54, (int) (short) 10);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.add(date60, 0, (int) '#');
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addMonths(date65, (int) (short) 10);
        boolean boolean68 = org.apache.commons.lang.time.DateUtils.isSameDay(date54, date65);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.addMonths(date65, (int) (byte) -1);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.addDays(date70, (int) (byte) 100);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.addSeconds(date72, 86400000);
        boolean boolean75 = org.apache.commons.lang.time.DateUtils.isSameInstant(date45, date72);
        boolean boolean76 = org.apache.commons.lang.time.DateUtils.isSameDay(date26, date72);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Sep 26 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 26 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Jan 01 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu May 01 00:00:00 CEST 1997");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Tue Dec 05 00:00:00 CET 1972");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 3);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addHours(date14, 4);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addYears(date26, 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Fri Jan 01 04:00:00 CET 1971");
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addDays(date24, (int) (short) 10);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.add(date24, (int) (short) 10, (int) (short) 10);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date32, (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date36 = org.apache.commons.lang.time.DateUtils.truncate(date32, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 1000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Jan 01 10:00:00 CET 1969");
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, (int) (byte) 10);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.round(date18, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator22 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date18, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 86400000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Mar 12 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Mar 12 00:00:00 CET 1970");
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, (-1));
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.round(date36, (int) (byte) 1);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addWeeks(date40, 0);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addHours(date42, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 31 23:59:00 CET 97");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Mon Jan 01 10:00:00 CET 98");
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (byte) 1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (byte) 10, 1000);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) (byte) 0);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addMinutes(date18, (int) (short) 1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date18, (int) (short) 0);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addSeconds(date18, (int) '#');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Feb 11 16:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:35 CET 1970");
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        java.lang.String[] strArray8 = new java.lang.String[] { "", "", "hi!", "hi!" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date19, (int) (byte) 1, 6);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date29, 0, (int) '#');
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addHours(date34, (int) (byte) -1);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date34);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, 4);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addYears(date50, (int) (short) 10);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.add(date50, 0, (int) '#');
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addMonths(date55, (int) (short) 10);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date44, date55);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addMonths(date55, (int) (byte) -1);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.add(date55, 0, 10);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date55, 3);
        boolean boolean66 = org.apache.commons.lang.time.DateUtils.isSameInstant(date40, date65);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.truncate(date40, 10);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.addMonths(date40, 1);
        java.lang.Class<?> wildcardClass71 = date40.getClass();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addSeconds(date21, 86400000);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMonths(date23, 60000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate(date25, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 05 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Dec 05 00:00:00 CET 6972");
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date34, 5);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, 5);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addYears(date64, (int) (short) 10);
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date60, date66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addWeeks(date66, 0);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addMinutes(date66, (int) (short) -1);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.addMinutes(date66, 1000);
        boolean boolean74 = org.apache.commons.lang.time.DateUtils.isSameInstant(date34, date73);
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date73, 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Tue Jan 01 16:40:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun May 01 16:40:00 CEST 1988");
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addSeconds(date24, (int) (byte) 1);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, 0);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addSeconds(date31, 1001);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date35, (int) (byte) -1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:16:42 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:16:41 CET 1970");
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, 1);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMonths(date9, (int) (short) 100);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addMonths(date9, (int) '#');
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addMonths(date9, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:01:00 CET 1980");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun May 01 00:00:00 CEST 1988");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Wed Dec 01 00:00:00 CET 1982");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Nov 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:10 CET 1980");
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addSeconds(date7, (int) (short) 100);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date9, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) '4', 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 4");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:01:40 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:01:40 CET 1970");
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date48);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date57);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date42);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date74, (int) (short) 10);
        boolean boolean77 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date74);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date74, 3600000);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray82);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addYears(date83, (int) (short) 10);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date79, date85);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date85);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date42);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.truncate(date27, (int) (byte) 10);
        java.util.Date date92 = org.apache.commons.lang.time.DateUtils.addDays(date27, (int) (short) 10);
        java.util.Date date94 = org.apache.commons.lang.time.DateUtils.addHours(date27, 4);
        java.util.Iterator iterator96 = org.apache.commons.lang.time.DateUtils.iterator(date27, 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Sun Jan 11 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Thu Jan 01 04:02:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator96);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) 10.0f, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 10.0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addSeconds(date24, 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date31, 0);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addHours(date31, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date37 = org.apache.commons.lang.time.DateUtils.round(date35, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 01:00:10 CET 1970");
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.round(date5, (int) (short) 1);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMonths(date7, (int) 'a');
        java.lang.Class<?> wildcardClass10 = date9.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Mon Feb 01 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) (-1), (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate -1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addYears(date18, (int) (byte) -1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date24, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date30, 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date30, (int) (byte) 1, 6);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addYears(date40, (int) (short) 10);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.add(date40, 0, (int) '#');
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date30, date45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addHours(date45, (int) (byte) -1);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date48);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addWeeks(date48, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:00:00 CET 1969");
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date24);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date18, (int) (byte) 10);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.truncate(date36, (int) (short) 10);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addYears(date43, (int) (short) 10);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.add(date43, 0, (int) '#');
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addMonths(date48, (int) (short) 10);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addDays(date48, (int) 'a');
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addWeeks(date48, (int) '4');
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addWeeks(date54, (int) 'a');
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameInstant(date39, date56);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date56, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date61 = org.apache.commons.lang.time.DateUtils.truncate(date59, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Nov 09 00:00:00 CET 1972");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Nov 09 00:00:00 CET 1972");
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, (int) (byte) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, (-1));
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Mar 12 10:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Mar 11 23:59:00 CET 3601970");
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray9);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator15 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) "", (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on ");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMinutes(date11, (int) (byte) 100);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.truncate(date11, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator17 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date15, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addHours(date22, 3600000);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addMinutes(date26, (int) (byte) 1);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addDays(date28, (int) (byte) -1);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addDays(date28, (int) '4');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Mon Sep 08 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Mon Sep 08 01:01:00 CEST 2380");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Sep 07 01:01:00 CEST 2380");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Oct 30 01:01:00 CET 2380");
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMonths(date36, (int) (short) 10);
        boolean boolean39 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date36);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addMonths(date36, (int) (byte) -1);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addDays(date41, (int) (byte) 100);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (short) 10);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.add(date47, 0, (int) '#');
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date43, date47);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addMinutes(date43, 6);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addYears(date59, (int) (short) 10);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.add(date59, 0, (int) '#');
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addHours(date64, (int) (byte) -1);
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date43, date66);
        boolean boolean68 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date43);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.addDays(date19, 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Wed Mar 11 00:06:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Dec 11 00:00:00 CET 1969");
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, (int) (short) -1);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addHours(date34, 1);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addMonths(date34, 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date42 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 100");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Fri Dec 31 23:59:00 CET 1");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 01:00:00 CET 1");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed May 01 00:00:00 CET 9");
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 4);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date25, 60000);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 29 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 61980");
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date12, (int) (short) 0);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date12, (int) ' ');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addHours(date9, (int) ' ');
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 100);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) 0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Jan 01 00:00:00 CET 2080");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Mon Jan 01 00:00:00 CET 2080");
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addHours(date29, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator33 = org.apache.commons.lang.time.DateUtils.iterator(date29, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.round(date5, (int) (short) 1);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addYears(date15, (int) (short) 10);
        boolean boolean18 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date17);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addWeeks(date17, 0);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.add(date17, (int) (byte) 1, 6);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray26);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addYears(date27, (int) (short) 10);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.add(date27, 0, (int) '#');
        boolean boolean33 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMinutes(date32, 2);
        boolean boolean36 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date35);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator38 = org.apache.commons.lang.time.DateUtils.iterator(date35, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 60000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date24, 1001);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMonths(date31, (int) (short) 100);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (byte) 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Mon May 01 00:00:01 CEST 1978");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Jan 01 00:00:01 CET 2070");
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date24);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addDays(date3, 10);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date28, (int) (short) 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date33 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) (short) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Jan 11 00:00:00 CET 1970");
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date17, 0);
        java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator(date17, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date17, 2);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date25, 3, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addWeeks(date28, 5);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Sep 27 00:00:00 CEST 1990");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Aug 06 00:00:00 CEST 1992");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Sep 10 00:00:00 CEST 1992");
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 3);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addHours(date14, 4);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.round(date14, 2);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray35);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date36, (int) (short) 10);
        boolean boolean39 = org.apache.commons.lang.time.DateUtils.isSameDay(date32, date38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addWeeks(date38, 0);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date38, (int) (byte) 1, 6);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addYears(date48, (int) (short) 10);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.add(date48, 0, (int) '#');
        boolean boolean54 = org.apache.commons.lang.time.DateUtils.isSameDay(date38, date53);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addMinutes(date53, 2);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date56, (int) (byte) 10);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date28, date56);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMonths(date28, (int) (byte) 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Mon May 01 00:00:00 CEST 1978");
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 3600000);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addHours(date11, 86400000);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addHours(date13, (int) '4');
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Apr 04 00:10:00 CEST 70965");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Sep 21 00:10:00 CEST 80821");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Sep 23 04:10:00 CEST 80821");
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date12, (int) (byte) 1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 86400000);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addYears(date20, (int) (short) 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date20, 0, (int) '#');
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date25, (int) (short) 10);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addDays(date25, (int) 'a');
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, (int) '4');
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date31, (int) 'a');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date31, 4);
        boolean boolean36 = org.apache.commons.lang.time.DateUtils.isSameDay(date14, date31);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addHours(date31, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Fri Jan 02 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Nov 09 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Dec 31 10:00:00 CET 1970");
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date5, 2, 1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, 1000);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMonths(date12, 1001);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Mon Dec 31 23:59:59 CET 1979");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:16:40 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Jun 01 00:16:40 CEST 2063");
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round(date19, (int) (short) 1);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addWeeks(date31, 0);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.add(date31, (int) (byte) 1, 6);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray40);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addYears(date41, (int) (short) 10);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.add(date41, 0, (int) '#');
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addMonths(date46, (int) (byte) 100);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameInstant(date19, date46);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addDays(date46, (int) (byte) 100);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date52, (int) (byte) 1);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date52, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Mon May 01 00:00:00 CEST 1978");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sat Apr 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Apr 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sat Apr 11 00:00:00 CET 1970");
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 2);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date61, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator65 = org.apache.commons.lang.time.DateUtils.iterator(date61, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!" };
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray7);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray7);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray7);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addMonths(date10, 86400000);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 7201970");
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 2);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addHours(date61, (-1));
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addDays(date63, (int) ' ');
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addMonths(date65, 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:00:02 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sun Feb 01 23:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jun 01 23:00:02 CEST 1978");
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.add(date9, 5, 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date64 = org.apache.commons.lang.time.DateUtils.round(date9, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 86400000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Jan 11 00:00:00 CET 1970");
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date5, 6);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addSeconds(date61, (int) (short) 100);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addDays(date63, 1001);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addHours(date63, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator69 = org.apache.commons.lang.time.DateUtils.iterator(date63, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 3600000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Tue Jan 01 00:01:40 CET 1980");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Tue Sep 28 00:01:40 CET 1982");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Jan 02 08:01:40 CET 1980");
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addWeeks(date15, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Mar 12 00:00:00 CET 1986");
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMinutes(date29, 2);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date29, 4);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMonths(date29, 86400000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 7201970");
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray13);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.add(date14, 0, (int) '#');
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addHours(date14, (-1));
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date14);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addSeconds(date14, (int) (short) 1);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, (int) '4');
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date26, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator30 = org.apache.commons.lang.time.DateUtils.iterator(date26, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 52 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Dec 31 00:00:00 CET 1970");
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 3);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.truncate(date14, 1);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 5);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray35);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date36, (int) (short) 10);
        boolean boolean39 = org.apache.commons.lang.time.DateUtils.isSameDay(date32, date38);
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray44);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray44);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray44);
        boolean boolean48 = org.apache.commons.lang.time.DateUtils.isSameDay(date32, date47);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date32, (int) (byte) 10);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addHours(date32, (int) '#');
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addMinutes(date52, (int) (short) 0);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date54, (int) (byte) 0);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date14, date54);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addYears(date24, (int) (short) 10);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.add(date24, 0, (int) '#');
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMonths(date29, (int) (short) 10);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date29);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date29, 3600000);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.add(date34, 0, (int) ' ');
        java.util.Iterator iterator39 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date37, (int) (byte) 1);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (short) 10);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date43, date49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addWeeks(date49, 0);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addMinutes(date49, (int) (short) -1);
        java.util.Iterator iterator56 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date49, 4);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addMinutes(date49, 0);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray61);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addYears(date62, (int) (short) 10);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.add(date62, 0, (int) '#');
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.add(date62, 0, 3);
        boolean boolean71 = org.apache.commons.lang.time.DateUtils.isSameInstant(date49, date70);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date70);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date70);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addWeeks(date70, (-1));
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addSeconds(date70, 2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator56);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Dec 25 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:02 CET 1970");
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        boolean boolean40 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addWeeks(date39, 0);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.add(date39, (int) (byte) 1, 6);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addSeconds(date45, 86400000);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date47, (-1));
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date47, 0);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (byte) 1);
        boolean boolean54 = org.apache.commons.lang.time.DateUtils.isSameDay(date29, date47);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addYears(date47, (-1));
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Sep 27 00:00:00 CET 1989");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Sep 27 00:00:00 CEST 1987");
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date8, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addDays(date11, 4);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.round(date13, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang.time.DateUtils.truncate(date15, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Mon Jan 05 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.add(date16, 10, (-1));
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, 5);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date16, (int) (byte) 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Dec 31 23:00:00 CET 2069");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 05 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:01:40 CET 2070");
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.add(date9, 5, 10);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, 3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator66 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date64, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 1000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:03:00 CET 1970");
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date12, 6);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addYears(date35, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addSeconds(date35, (int) (byte) 0);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addSeconds(date39, (int) '#');
        boolean boolean42 = org.apache.commons.lang.time.DateUtils.isSameInstant(date31, date39);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:35 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date34, 5);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, 5);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addSeconds(date34, 100);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, (int) ' ');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:01:40 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.round(date12, 1);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.add(date14, 4, (int) (byte) 1);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addWeeks(date17, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 15 00:00:00 CET 1970");
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addDays(date9, 100);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date21);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date15, (int) (short) 1, (int) (byte) 0);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date15, 0, (int) (byte) 100);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.round(date28, 10);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Apr 11 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date24, (int) (byte) 100);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addHours(date27, 86400000);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addDays(date27, 4);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Mon May 01 00:00:00 CEST 1978");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Oct 18 00:00:00 CEST 11834");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Fri May 05 00:00:00 CEST 1978");
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMonths(date36, (int) (short) 10);
        boolean boolean39 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date36);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addMonths(date36, (int) (byte) -1);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date36, 0, 10);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addDays(date44, 60000);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date21, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addHours(date21, 3600000);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addDays(date49, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Mon Oct 06 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Mon Oct 06 01:00:00 CEST 2380");
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addSeconds(date16, 3);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.add(date18, 4, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Jan 01 00:00:03 CET 2070");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Jan 01 00:00:03 CET 2070");
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addMonths(date5, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.add(date7, 5, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date12 = org.apache.commons.lang.time.DateUtils.truncate(date7, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 1000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 01 00:00:00 CET 1982");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Fri Dec 03 00:00:00 CET 1982");
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date21, (int) (short) 0);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addSeconds(date30, 1001);
        boolean boolean33 = org.apache.commons.lang.time.DateUtils.isSameDay(date21, date30);
        java.util.Iterator iterator35 = org.apache.commons.lang.time.DateUtils.iterator(date30, 4);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:16:41 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(iterator35);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date24, (int) (byte) 100);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addHours(date27, 86400000);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, 10);
        java.lang.Class<?> wildcardClass32 = date31.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Mon May 01 00:00:00 CEST 1978");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Oct 18 00:00:00 CEST 11834");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Mon May 01 00:00:10 CEST 1978");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date17, 0);
        java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator(date17, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date17, 2);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date25, 1000);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, 1000);
        java.lang.Class<?> wildcardClass30 = date29.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator32 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) wildcardClass30, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on class java.util.Date");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Sep 27 00:00:00 CEST 1990");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Sep 27 16:40:00 CEST 1990");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Sep 27 16:56:40 CEST 1990");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate(date0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date19, (int) (byte) 1, 6);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date29, 0, (int) '#');
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addHours(date34, (int) (byte) -1);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date34);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date48);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.add(date53, 0, (int) '#');
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addHours(date53, (-1));
        boolean boolean61 = org.apache.commons.lang.time.DateUtils.isSameInstant(date48, date53);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addSeconds(date53, (int) (short) 1);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date63, 3600000);
        boolean boolean66 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date63);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 01:00:01 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addSeconds(date0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date17, 0);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addDays(date17, 3600000);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addDays(date17, (int) (short) 10);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.round(date25, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Mar 16 00:00:00 CET 11845");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Oct 07 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMinutes(date19, (int) (short) 10);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.add(date19, (int) (byte) 100, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date28 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) (byte) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 100");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 01 00:10:00 CET 1969");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Mon Dec 01 00:00:00 CET 1969");
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) '#');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date23, (int) (short) 0);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date25, (int) (byte) 0);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addHours(date25, 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date32 = org.apache.commons.lang.time.DateUtils.add(date29, (-1), (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Fri Jan 02 21:00:00 CET 1970");
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (short) 10, 2);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, (int) (short) 100);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMonths(date31, (int) 'a');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.truncate(date33, 1);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date40, 3600000);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addHours(date42, (int) (short) -1);
        boolean boolean45 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date42);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addSeconds(date42, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date49 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date42, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Dec 02 02:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Jan 02 02:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 01:00:06 CET 1970");
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date59, 60000);
        java.util.Iterator iterator63 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date59, 6);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addWeeks(date59, (int) (byte) 100);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addYears(date65, (int) (byte) 0);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addMinutes(date65, 60000);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addDays(date69, 1000);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.addDays(date71, (int) (byte) -1);
        java.lang.String[] strArray76 = new java.lang.String[] { "" };
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        java.lang.String[] strArray80 = new java.lang.String[] { "" };
        java.util.Date date81 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray80);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.addYears(date81, (int) (short) 10);
        boolean boolean84 = org.apache.commons.lang.time.DateUtils.isSameDay(date77, date83);
        java.util.Date date87 = org.apache.commons.lang.time.DateUtils.add(date77, (int) (short) 1, (int) (byte) 0);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.add(date87, (int) (short) 1, (int) (byte) 100);
        java.util.Date date92 = org.apache.commons.lang.time.DateUtils.addMinutes(date90, 86400000);
        java.util.Date date95 = org.apache.commons.lang.time.DateUtils.add(date90, 10, (-1));
        java.util.Date date97 = org.apache.commons.lang.time.DateUtils.addWeeks(date90, 5);
        boolean boolean98 = org.apache.commons.lang.time.DateUtils.isSameInstant(date71, date90);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 10:01:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator63);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Dec 02 10:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Dec 02 10:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 13 02:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Wed Oct 09 02:00:00 CET 1974");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Tue Oct 08 02:00:00 CET 1974");
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date95);
        org.junit.Assert.assertEquals(date95.toString(), "Tue Dec 31 23:00:00 CET 2069");
        org.junit.Assert.assertNotNull(date97);
        org.junit.Assert.assertEquals(date97.toString(), "Wed Feb 05 00:00:00 CET 2070");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addMinutes(date3, 2);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date21, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator25 = org.apache.commons.lang.time.DateUtils.iterator(date21, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:02:00 CET 1970");
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMinutes(date29, 2);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date29, 4);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addDays(date33, (int) '4');
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addMonths(date35, 3600000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Feb 22 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Feb 22 00:00:00 CET 301970");
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addDays(date9, (int) '#');
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (byte) 10);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.round(date13, 10);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Feb 05 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date3, (int) (byte) -1);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (short) 10);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date3, (int) '#');
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.round(date11, (int) (short) 1);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addSeconds(date11, (int) (short) 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:01:40 CET 1970");
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 2);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addHours(date61, (-1));
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMonths(date63, 86400000);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addYears(date65, (int) ' ');
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addSeconds(date65, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:00:02 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:00:02 CET 7201969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Mon Dec 31 23:00:02 CET 7202001");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 23:00:02 CET 7201969");
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Iterator iterator12 = org.apache.commons.lang.time.DateUtils.iterator(date8, (int) (byte) 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addYears(date20, (int) (short) 10);
        boolean boolean23 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addWeeks(date22, 0);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (byte) 1, 6);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addHours(date22, (int) ' ');
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameInstant(date8, date22);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMinutes(date22, 6);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (short) 100);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        boolean boolean40 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addSeconds(date39, 100);
        java.lang.Class<?> wildcardClass43 = date39.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:06:00 CET 1980");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun May 01 00:00:00 CEST 1988");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:01:40 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        java.util.Date date0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray7);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addYears(date8, (int) (short) 10);
        boolean boolean11 = org.apache.commons.lang.time.DateUtils.isSameDay(date4, date10);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date4, date19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date4, (int) (byte) 10);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addYears(date26, (int) (short) 10);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date26, 0, (int) '#');
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray34);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        boolean boolean42 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date41);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date50);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameDay(date26, date35);
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameInstant(date4, date35);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date35, 2);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addDays(date35, (int) 'a');
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addSeconds(date57, (int) (byte) 100);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addYears(date59, 1000);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray64);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addYears(date65, (int) (short) 10);
        java.lang.String[] strArray70 = new java.lang.String[] { "" };
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray70);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.addYears(date71, (int) (short) 10);
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.add(date71, 0, (int) '#');
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.addMonths(date76, (int) (short) 10);
        boolean boolean79 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date76);
        java.util.Date date81 = org.apache.commons.lang.time.DateUtils.addMonths(date76, (int) (byte) -1);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.addDays(date81, (int) (byte) 100);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addMinutes(date81, (int) (short) 10);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date61, date85);
        java.util.Date date88 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date85, 1000);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean89 = org.apache.commons.lang.time.DateUtils.isSameDay(date0, date85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Wed Apr 08 00:01:40 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Apr 08 00:01:40 CEST 2970");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Mon Dec 01 00:10:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Mon Dec 01 00:10:01 CET 1969");
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMinutes(date29, 2);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date29, 4);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addDays(date33, (int) '4');
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addMinutes(date33, (int) (byte) 10);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addMinutes(date37, 10);
        java.lang.Class<?> wildcardClass40 = date37.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Feb 22 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:20:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date21, (int) (short) 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date23, (int) '#', 0);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addSeconds(date28, (int) (short) 1);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addYears(date30, (int) (byte) 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 29 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Jan 29 00:00:01 CET 2070");
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, (int) (short) 10);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addYears(date11, (int) (short) 10);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date17, 0, (int) '#');
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date22);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (byte) -1);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date22, 0, 10);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addDays(date30, 60000);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addHours(date30, 3600000);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, (int) (byte) 1);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, (int) 'a');
        boolean boolean39 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date34);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addMinutes(date5, (int) (short) 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Tue Jan 01 00:00:10 CET 1980");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Mon Sep 08 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Sep 08 01:01:00 CEST 2380");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Mon Sep 08 02:37:00 CEST 2380");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 01:40:00 CET 1980");
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addSeconds(date0, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.add(date16, 10, (-1));
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, 5);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date33);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        boolean boolean43 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date27, (int) (byte) 10);
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addYears(date54, (int) (short) 10);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date50, date56);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addWeeks(date56, 0);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.add(date56, (int) (byte) 1, 6);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addSeconds(date62, 86400000);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date64, (-1));
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date45, date66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date45, (int) (byte) 10);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.add(date45, (int) (short) 10, (int) (short) 0);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date72, (int) '4');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Dec 31 23:00:00 CET 2069");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 05 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (short) 10, 2);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, (int) (short) 100);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMonths(date31, (int) 'a');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addSeconds(date33, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Dec 02 02:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Jan 02 02:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Jan 02 02:00:01 CET 1980");
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.truncate(date8, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Iterator iterator12 = org.apache.commons.lang.time.DateUtils.iterator(date8, (int) (byte) 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addYears(date20, (int) (short) 10);
        boolean boolean23 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addWeeks(date22, 0);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (byte) 1, 6);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addHours(date22, (int) ' ');
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameInstant(date8, date22);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMinutes(date22, 6);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMonths(date22, 0);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addMinutes(date22, (int) (byte) 0);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray40);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addYears(date41, (int) (short) 10);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.add(date41, 0, (int) '#');
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addMonths(date46, (int) (short) 10);
        java.util.Iterator iterator50 = org.apache.commons.lang.time.DateUtils.iterator(date46, (int) (byte) 1);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray57);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addYears(date58, (int) (short) 10);
        boolean boolean61 = org.apache.commons.lang.time.DateUtils.isSameDay(date54, date60);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addWeeks(date60, 0);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.add(date60, (int) (byte) 1, 6);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.addHours(date60, (int) ' ');
        boolean boolean69 = org.apache.commons.lang.time.DateUtils.isSameInstant(date46, date60);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addMinutes(date60, 6);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.addMonths(date60, 0);
        boolean boolean74 = org.apache.commons.lang.time.DateUtils.isSameInstant(date22, date73);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator76 = org.apache.commons.lang.time.DateUtils.iterator(date22, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 86400000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:06:00 CET 1980");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator50);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:06:00 CET 1980");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date5, 2, 1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, 1000);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addWeeks(date12, (int) '4');
        java.lang.Class<?> wildcardClass15 = date12.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Mon Dec 31 23:59:59 CET 1979");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:16:40 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Dec 30 00:16:40 CET 1980");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 2);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addHours(date61, (-1));
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMonths(date63, 86400000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date68 = org.apache.commons.lang.time.DateUtils.add(date65, (int) (byte) -1, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:00:02 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:00:02 CET 7201969");
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date3, (int) (byte) -1);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (short) 10);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date3, (int) '#');
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.round(date11, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date11, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3600000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMonths(date36, (int) (short) 10);
        boolean boolean39 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date36);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addMonths(date36, (int) (byte) -1);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date36, 0, 10);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addDays(date44, 60000);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date21, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addHours(date44, (int) ' ');
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date44, 10);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addSeconds(date44, (int) (byte) 0);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addMinutes(date53, 10);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addWeeks(date55, (int) (byte) 1);
        java.util.Iterator iterator59 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date57, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Fri Jan 02 08:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 08 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator59);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.add(date16, 10, (-1));
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.round(date16, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Dec 31 23:00:00 CET 2069");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addHours(date0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date24, 60000);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date24, 100);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addDays(date33, 3600000);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addHours(date33, (int) '#');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Mon Jun 21 00:00:00 CEST 11926");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 02 11:00:00 CET 2070");
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date5, 6);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addSeconds(date61, (int) (short) 100);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMinutes(date63, (int) (short) -1);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addMinutes(date63, (int) (byte) 1);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addMonths(date67, (-1));
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Tue Jan 01 00:01:40 CET 1980");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Tue Jan 01 00:00:40 CET 1980");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Tue Jan 01 00:02:40 CET 1980");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sat Dec 01 00:02:40 CET 1979");
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addYears(date24, 3600000);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray29);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) (short) 10);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameDay(date30, date36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addWeeks(date36, 0);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.add(date36, (int) (byte) 1, 6);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.add(date46, 0, (int) '#');
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameDay(date36, date51);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addMinutes(date51, 2);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date54, (int) (byte) 10);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date26, date56);
        java.lang.Class<?> wildcardClass58 = date26.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator60 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) wildcardClass58, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on class java.util.Date");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Apr 11 00:00:00 CEST 3602134");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMinutes(date19, (int) (short) 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, (int) (byte) -1);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 1001);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date25, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 01 00:10:00 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon Dec 01 00:09:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Mon Feb 06 00:09:59 CET 1989");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (byte) 100);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date23, (int) (byte) -1);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date23, 4, 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Mar 11 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon Mar 10 23:59:00 CET 2070");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue May 20 00:00:00 CEST 2070");
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date15, 0);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date15, 60000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Jan 01 00:00:00 CET 61986");
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addMonths(date24, 3);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addDays(date24, 6);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.add(date38, 0, (int) '#');
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addMonths(date43, (int) (short) 10);
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date43);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date43, 3600000);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.add(date48, 0, (int) ' ');
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addWeeks(date48, (int) (byte) 10);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date53, (int) (byte) 10);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addMonths(date55, 6);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addSeconds(date57, (int) (byte) 1);
        boolean boolean60 = org.apache.commons.lang.time.DateUtils.isSameInstant(date28, date57);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date28, (int) '4');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Jul 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Apr 17 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Sep 12 00:00:00 CEST 3601970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sat Sep 12 00:00:01 CEST 3601970");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sat Apr 17 00:00:00 CEST 2134");
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Iterator iterator12 = org.apache.commons.lang.time.DateUtils.iterator(date8, (int) (byte) 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addYears(date20, (int) (short) 10);
        boolean boolean23 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addWeeks(date22, 0);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (byte) 1, 6);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addHours(date22, (int) ' ');
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameInstant(date8, date22);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addHours(date22, (int) (byte) 0);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addHours(date33, 1);
        java.util.Iterator iterator37 = org.apache.commons.lang.time.DateUtils.iterator(date35, 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 01:00:00 CET 1980");
        org.junit.Assert.assertNotNull(iterator37);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.lang.Class<?> wildcardClass12 = date11.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator14 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date11, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date3 = org.apache.commons.lang.time.DateUtils.add(date0, 4, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 2);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addHours(date61, (-1));
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMonths(date63, (int) (short) 0);
        java.lang.Class<?> wildcardClass66 = date65.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:00:02 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:00:02 CET 1969");
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Iterator iterator12 = org.apache.commons.lang.time.DateUtils.iterator(date8, (int) (byte) 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addYears(date20, (int) (short) 10);
        boolean boolean23 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addWeeks(date22, 0);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (byte) 1, 6);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addHours(date22, (int) ' ');
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameInstant(date8, date22);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMinutes(date22, 6);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (short) 100);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addSeconds(date35, 4);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:06:00 CET 1980");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun May 01 00:00:00 CEST 1988");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun May 01 00:00:04 CEST 1988");
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addSeconds(date24, 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date31, 0);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray44);
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray48);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addYears(date49, (int) (short) 10);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameDay(date45, date51);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray57);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray57);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray57);
        boolean boolean61 = org.apache.commons.lang.time.DateUtils.isSameDay(date45, date60);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date45, (int) (byte) 10);
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addYears(date67, (int) (short) 10);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.add(date67, 0, (int) '#');
        java.lang.String[] strArray75 = new java.lang.String[] { "" };
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray75);
        java.lang.String[] strArray79 = new java.lang.String[] { "" };
        java.util.Date date80 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray79);
        java.util.Date date82 = org.apache.commons.lang.time.DateUtils.addYears(date80, (int) (short) 10);
        boolean boolean83 = org.apache.commons.lang.time.DateUtils.isSameDay(date76, date82);
        java.lang.String[] strArray88 = new java.lang.String[] { "" };
        java.util.Date date89 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray88);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray88);
        java.util.Date date91 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray88);
        boolean boolean92 = org.apache.commons.lang.time.DateUtils.isSameDay(date76, date91);
        boolean boolean93 = org.apache.commons.lang.time.DateUtils.isSameDay(date67, date76);
        boolean boolean94 = org.apache.commons.lang.time.DateUtils.isSameInstant(date45, date76);
        java.util.Date date96 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date76, 2);
        boolean boolean97 = org.apache.commons.lang.time.DateUtils.isSameInstant(date41, date96);
        boolean boolean98 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date41);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(date96);
        org.junit.Assert.assertEquals(date96.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.add(date9, 5, 10);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date62, (int) (short) 0);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addHours(date62, (int) ' ');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Mon Jan 12 08:00:00 CET 1970");
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addDays(date27, 60000);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.round(date27, 0);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addDays(date31, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date35 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date31, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 1000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Apr 10 23:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Jan 02 00:00:00 CET 1");
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.add(date9, 5, 10);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addMinutes(date62, (int) (byte) 10);
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray67);
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray71);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.addYears(date72, (int) (short) 10);
        boolean boolean75 = org.apache.commons.lang.time.DateUtils.isSameDay(date68, date74);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addWeeks(date74, 0);
        java.util.Date date80 = org.apache.commons.lang.time.DateUtils.add(date74, (int) (byte) 1, 6);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.add(date74, 4, 1);
        boolean boolean84 = org.apache.commons.lang.time.DateUtils.isSameDay(date64, date74);
        java.util.Date date86 = org.apache.commons.lang.time.DateUtils.addMonths(date64, 4);
        java.util.Date date88 = org.apache.commons.lang.time.DateUtils.addDays(date64, (int) (byte) 0);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.round(date88, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Jan 11 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Tue Jan 08 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Mon May 11 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Sun Jan 11 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Sun Jan 11 00:00:00 CET 1970");
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addWeeks(date59, (int) (short) 10);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addSeconds(date59, (-1));
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Mar 12 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 09:59:59 CET 1970");
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, (int) (short) -1);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addDays(date36, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Fri Dec 31 23:59:00 CET 1");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Fri Dec 31 23:59:00 CET 1");
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Iterator iterator12 = org.apache.commons.lang.time.DateUtils.iterator(date8, (int) (byte) 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addYears(date20, (int) (short) 10);
        boolean boolean23 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addWeeks(date22, 0);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (byte) 1, 6);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addHours(date22, (int) ' ');
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameInstant(date8, date22);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMinutes(date22, 6);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addSeconds(date33, (int) (short) -1);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addYears(date35, (int) 'a');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:06:00 CET 1980");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:05:59 CET 1980");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Fri Jan 01 00:05:59 CET 2077");
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.round(date12, 2);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addHours(date12, 0);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date12, 5);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addMinutes(date18, 100);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addHours(date18, (int) '#');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Jan 01 01:40:00 CET 1980");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Wed Jan 02 11:00:00 CET 1980");
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addDays(date27, 60000);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.round(date27, 0);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date27, (int) (short) 10);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date27, (int) (short) 0);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addYears(date43, (int) (short) 10);
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date39, date45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addYears(date50, (int) (short) 10);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.add(date50, 0, (int) '#');
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addHours(date50, (-1));
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date45, date50);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addSeconds(date50, (int) (short) 1);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addWeeks(date50, (int) '4');
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date62, (int) (byte) 10);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addDays(date62, (int) '#');
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.addMonths(date62, 0);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.addWeeks(date68, 86400000);
        boolean boolean71 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date68);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Apr 10 23:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Feb 04 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Feb 26 00:00:00 CET 1657857");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.add(date13, 0, (int) '#');
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.add(date13, 0, 3);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMinutes(date21, (int) (byte) 100);
        boolean boolean24 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date9, 1);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, (int) (byte) 0);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date32, (int) (short) 10);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addYears(date42, (int) (short) 10);
        boolean boolean45 = org.apache.commons.lang.time.DateUtils.isSameDay(date38, date44);
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray50);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray50);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray50);
        boolean boolean54 = org.apache.commons.lang.time.DateUtils.isSameDay(date38, date53);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date38, (int) (byte) 10);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.add(date60, 0, (int) '#');
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.lang.String[] strArray72 = new java.lang.String[] { "" };
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray72);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addYears(date73, (int) (short) 10);
        boolean boolean76 = org.apache.commons.lang.time.DateUtils.isSameDay(date69, date75);
        java.lang.String[] strArray81 = new java.lang.String[] { "" };
        java.util.Date date82 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray81);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray81);
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray81);
        boolean boolean85 = org.apache.commons.lang.time.DateUtils.isSameDay(date69, date84);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date60, date69);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameInstant(date38, date69);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date34, date38);
        java.util.Date date91 = org.apache.commons.lang.time.DateUtils.add(date38, 5, 10);
        boolean boolean92 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date38);
        java.util.Date date94 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 86400000);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Wed Sep 27 00:00:00 CET 1972");
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date19, (int) (byte) 1, 6);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date29, 0, (int) '#');
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addHours(date34, (int) (byte) -1);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date34);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, 4);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addYears(date50, (int) (short) 10);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.add(date50, 0, (int) '#');
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addMonths(date55, (int) (short) 10);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date44, date55);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addMonths(date55, (int) (byte) -1);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.add(date55, 0, 10);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date55, 3);
        boolean boolean66 = org.apache.commons.lang.time.DateUtils.isSameInstant(date40, date65);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.addHours(date40, 1);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.addSeconds(date40, 2);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:02 CET 1970");
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addWeeks(date0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date24);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date18, (int) (byte) 10);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date14, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date41 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date39, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Fri Nov 05 00:00:00 CET 1976");
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addSeconds(date8, 3600000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date8, 60000, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Feb 11 16:00:00 CET 1970");
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.truncate(date24, 10);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray34);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        boolean boolean42 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date41);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date50);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date35, (int) (byte) 10);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addHours(date35, (int) '#');
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addMinutes(date55, (int) (short) 0);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date31, date55);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addSeconds(date31, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date63 = org.apache.commons.lang.time.DateUtils.add(date31, 1001, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:01:40 CET 1970");
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addMinutes(date17, 3);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Sep 27 00:03:00 CET 1988");
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addMonths(date5, (int) '#');
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addYears(date11, (int) (short) 10);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date11, 0, (int) '#');
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addYears(date24, (int) (short) 10);
        boolean boolean27 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date26);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        boolean boolean36 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date35);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date20);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (short) 10);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.add(date47, 0, (int) '#');
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addMonths(date52, (int) (short) 10);
        boolean boolean55 = org.apache.commons.lang.time.DateUtils.isSameDay(date43, date52);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addYears(date52, 3600000);
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray60);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addYears(date61, (int) (short) 10);
        boolean boolean64 = org.apache.commons.lang.time.DateUtils.isSameDay(date57, date63);
        boolean boolean65 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date63);
        boolean boolean66 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date20);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.addSeconds(date7, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date70 = org.apache.commons.lang.time.DateUtils.round(date68, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 86400000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 01 00:00:00 CET 1982");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 01 00:00:35 CET 1982");
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        java.lang.String[] strArray10 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "" };
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Iterator iterator59 = org.apache.commons.lang.time.DateUtils.iterator(date12, (int) (byte) 1);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMinutes(date12, (int) (short) 100);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray64);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date71);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.addWeeks(date71, 0);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.add(date71, (int) (byte) 1, 6);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date71, 0);
        java.util.Iterator iterator81 = org.apache.commons.lang.time.DateUtils.iterator(date79, 1);
        boolean boolean82 = org.apache.commons.lang.time.DateUtils.isSameInstant(date61, date79);
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date61, (int) '#');
        java.util.Date date86 = org.apache.commons.lang.time.DateUtils.addDays(date84, 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(iterator59);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(iterator81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Sun Jan 11 01:40:00 CET 1970");
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date5, 2, 1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.round(date5, (int) (byte) 0);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.truncate(date5, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addDays(date5, 10);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMonths(date5, 6);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (byte) 1);
        java.util.Iterator iterator13 = org.apache.commons.lang.time.DateUtils.iterator(date11, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Jan 11 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jul 01 00:00:00 CEST 1980");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Jul 01 00:00:00 CEST 1981");
        org.junit.Assert.assertNotNull(iterator13);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date12, (int) (byte) 1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 86400000);
        java.lang.Class<?> wildcardClass17 = date14.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Fri Jan 02 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round(date14, 0);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date14, 3600000);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date14, 5);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.round(date25, (int) (short) 10);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addYears(date27, 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date32 = org.apache.commons.lang.time.DateUtils.add(date29, (int) (byte) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Sep 08 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:05:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 01 00:00:00 CET 2070");
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) '#');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date23, (int) (short) 0);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date23, 100);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date23, (int) (short) 1, (int) (byte) 1);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.truncate(date23, 5);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (byte) -1);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addDays(date34, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Jan 02 11:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Jan 02 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 02 11:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 02 11:00:00 CET 1969");
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (short) 10, 2);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addDays(date25, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date25, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date35 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date25, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 1000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Fri Jan 02 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 02:00:00 CET 1974");
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.round(date35, (int) (short) 1);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addMonths(date37, (int) 'a');
        boolean boolean40 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date39);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date42 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) boolean40, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round false");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Mon Feb 01 00:00:00 CET 1988");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.add(date17, 3, (int) '4');
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.truncate(date20, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addWeeks(date20, 1001);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date32, (int) (short) 10);
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date28, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addWeeks(date34, 0);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.add(date34, (int) (byte) 1, 6);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addSeconds(date40, 86400000);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date42, (-1));
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date42, 0);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameInstant(date20, date46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addSeconds(date46, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator51 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) (short) 100, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 100");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Sep 26 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 26 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Dec 02 00:00:00 CET 2008");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sat Jan 01 00:01:40 CET 1");
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) '#');
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addMonths(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date29, date38);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date38, (int) (short) 1);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.round(date38, 0);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addHours(date38, 3600000);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addMinutes(date38, 5);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.round(date49, (int) (short) 10);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameDay(date23, date51);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.truncate(date51, 2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Mon Sep 08 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:05:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, 1);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMonths(date9, (int) (short) 100);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, (int) '4');
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, (int) (byte) 1);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMinutes(date22, (int) ' ');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:01:00 CET 1980");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun May 01 00:00:00 CEST 1988");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Jan 01 00:00:52 CET 1980");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 08 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 08 00:32:00 CET 1980");
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, (int) (short) -1);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addHours(date34, 1);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addMonths(date34, 100);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addMonths(date40, 1);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addDays(date42, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Fri Dec 31 23:59:00 CET 1");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 01:00:00 CET 1");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed May 01 00:00:00 CET 9");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Jun 01 00:00:00 CET 9");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Jun 01 00:00:00 CET 9");
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date48);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date57);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date42);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date74, (int) (short) 10);
        boolean boolean77 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date74);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date74, 3600000);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray82);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addYears(date83, (int) (short) 10);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date79, date85);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date85);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date42);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.truncate(date27, (int) (byte) 10);
        java.util.Date date92 = org.apache.commons.lang.time.DateUtils.addDays(date27, (int) (short) 10);
        java.util.Date date94 = org.apache.commons.lang.time.DateUtils.addYears(date27, 86400000);
        java.util.Date date96 = org.apache.commons.lang.time.DateUtils.addDays(date94, (int) '4');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Sun Jan 11 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Thu Jan 01 00:02:00 CET 86401970");
        org.junit.Assert.assertNotNull(date96);
        org.junit.Assert.assertEquals(date96.toString(), "Sun Feb 22 00:02:00 CET 86401970");
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date11, (int) (byte) 0);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.add(date11, 0, 10);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addMinutes(date11, 3);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:03:00 CET 1970");
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMonths(date12, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addWeeks(date24, 0);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date24, (int) (byte) 1, 6);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addWeeks(date40, 0);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.add(date40, (int) (byte) 1, 6);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date24, date46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.round(date24, (int) (short) 0);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addYears(date49, (int) 'a');
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addYears(date49, 6);
        boolean boolean54 = org.apache.commons.lang.time.DateUtils.isSameInstant(date12, date49);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addSeconds(date12, (int) '#');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Jan 01 00:00:00 CET 7");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Tue Jan 01 00:00:35 CET 1980");
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        java.util.Date date0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray7);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addYears(date8, (int) (short) 10);
        boolean boolean11 = org.apache.commons.lang.time.DateUtils.isSameDay(date4, date10);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addWeeks(date10, 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date10, (int) (byte) 1, 6);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addYears(date20, (int) (short) 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date20, 0, (int) '#');
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date10, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addMinutes(date25, 2);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addSeconds(date28, (-1));
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.add(date34, 0, (int) '#');
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (short) 10);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date43, date49);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray55);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray55);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray55);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date43, date58);
        boolean boolean60 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date43);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray64);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray64);
        java.lang.String[] strArray69 = new java.lang.String[] { "" };
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray69);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.addYears(date70, (int) (short) 10);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.add(date70, 0, (int) '#');
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addMonths(date75, (int) (short) 10);
        boolean boolean78 = org.apache.commons.lang.time.DateUtils.isSameDay(date66, date75);
        java.util.Date date80 = org.apache.commons.lang.time.DateUtils.addYears(date75, 3600000);
        java.lang.String[] strArray83 = new java.lang.String[] { "" };
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray83);
        java.util.Date date86 = org.apache.commons.lang.time.DateUtils.addYears(date84, (int) (short) 10);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date80, date86);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameDay(date43, date86);
        boolean boolean89 = org.apache.commons.lang.time.DateUtils.isSameInstant(date28, date43);
        java.util.Date date91 = org.apache.commons.lang.time.DateUtils.truncate(date28, (int) (byte) 10);
        java.util.Date date93 = org.apache.commons.lang.time.DateUtils.addDays(date28, (int) (short) 10);
        java.util.Date date95 = org.apache.commons.lang.time.DateUtils.addYears(date28, 86400000);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = org.apache.commons.lang.time.DateUtils.isSameInstant(date0, date95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date93);
        org.junit.Assert.assertEquals(date93.toString(), "Sun Jan 11 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date95);
        org.junit.Assert.assertEquals(date95.toString(), "Thu Jan 01 00:02:00 CET 86401970");
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, 1);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMonths(date9, (int) (short) 100);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:01:00 CET 1980");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun May 01 00:00:00 CEST 1988");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Jan 01 00:00:10 CET 1980");
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, 60000);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date36, (int) (byte) 10);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date38, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Fri Feb 11 16:00:00 CET 1");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Fri Feb 11 16:00:00 CET 1");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addDays(date9, 100);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addDays(date11, 3);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addWeeks(date13, (int) '4');
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Apr 11 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Apr 14 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Apr 13 00:10:00 CET 1971");
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addSeconds(date21, (-1));
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMonths(date23, (int) 'a');
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addDays(date23, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator29 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) 4, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 4");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 31 23:59:59 CET 2069");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon Jan 31 23:59:59 CET 2078");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Jan 04 23:59:59 CET 2070");
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (short) 10, 2);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addDays(date25, (int) (short) 1);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date25, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date35 = org.apache.commons.lang.time.DateUtils.truncate(date33, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 86400000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Fri Jan 02 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 02:00:00 CET 1974");
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addYears(date24, 3600000);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date26, 0);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addHours(date26, 1000);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date26, 6, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Apr 11 00:00:00 CEST 3602134");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Apr 11 00:00:00 CEST 3602134");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat May 22 16:00:00 CEST 3602134");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Apr 11 00:00:00 CEST 3602134");
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, (int) (short) -1);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addHours(date34, 1);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addSeconds(date34, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date42 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date40, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 86400000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Fri Dec 31 23:59:00 CET 1");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 01:00:00 CET 1");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Fri Dec 31 23:59:59 CET 1");
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 100);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date21, 4, 1001);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addDays(date21, (int) (byte) -1);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addYears(date26, (int) (short) -1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Mar 09 00:00:00 CET 2089");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Tue Dec 31 00:00:00 CET 2069");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Mon Dec 31 00:00:00 CET 2068");
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!" };
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray7);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date10 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addYears(date24, (int) (short) 10);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.add(date24, 0, (int) '#');
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMonths(date29, (int) (short) 10);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date29);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date29, 3600000);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.add(date34, 0, (int) ' ');
        java.util.Iterator iterator39 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date37, (int) (byte) 1);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (short) 10);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date43, date49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addWeeks(date49, 0);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addMinutes(date49, (int) (short) -1);
        java.util.Iterator iterator56 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date49, 4);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addMinutes(date49, 0);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray61);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addYears(date62, (int) (short) 10);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.add(date62, 0, (int) '#');
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.add(date62, 0, 3);
        boolean boolean71 = org.apache.commons.lang.time.DateUtils.isSameInstant(date49, date70);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date70);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date70);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (byte) 1);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date75, (int) '4');
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date75, (int) (short) 1);
        java.util.Date date81 = org.apache.commons.lang.time.DateUtils.addMinutes(date79, 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator56);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sat Nov 05 00:00:00 CET 1977");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sat Nov 05 00:00:00 CET 1977");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sat Nov 05 00:00:00 CET 1977");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Sat Nov 05 01:40:00 CET 1977");
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) 60000L, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 60000");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 3);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addHours(date14, 4);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.truncate(date26, 0);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addWeeks(date28, (int) ' ');
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addSeconds(date28, 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Aug 13 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 01 00:00:10 CET 1");
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 3600000);
        java.lang.Class<?> wildcardClass12 = date9.getClass();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Apr 04 00:10:00 CEST 70965");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addHours(date15, 3600000);
        java.lang.Class<?> wildcardClass18 = date17.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Sep 08 01:00:00 CEST 2396");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, (int) (byte) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addSeconds(date24, (int) '4');
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Mar 12 00:00:52 CET 3601970");
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date24, 60000);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date31, 1);
        java.lang.Class<?> wildcardClass34 = date31.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 08 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date24);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date18, (int) (byte) 10);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date14, (int) (short) 10);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date14, 0);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addSeconds(date41, 86400000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date45 = org.apache.commons.lang.time.DateUtils.round(date43, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 60000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Aug 02 01:00:00 CEST 1979");
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date11, (int) (byte) 0);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.add(date11, 0, 10);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addSeconds(date18, (int) ' ');
        java.lang.Class<?> wildcardClass21 = date18.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:32 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "" };
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray7);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addWeeks(date8, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addHours(date9, (int) ' ');
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 100);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date23 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Jan 01 00:00:00 CET 2080");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Mon Jan 01 00:00:00 CET 2080");
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round(date14, 0);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date14, 3600000);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addDays(date23, (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date27 = org.apache.commons.lang.time.DateUtils.round(date23, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 86400000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Sep 08 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Sep 07 01:00:00 CEST 2380");
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addYears(date5, (int) (short) 10);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addYears(date5, (-1));
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMinutes(date5, 0);
        java.lang.Class<?> wildcardClass66 = date65.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Mon Jan 01 00:00:00 CET 1990");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Mon Jan 01 00:00:00 CET 1979");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date24);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date18, (int) (byte) 10);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addHours(date14, 1);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (-1));
        java.util.Iterator iterator43 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date41, 3);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Fri Nov 05 01:00:00 CET 1976");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Oct 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(iterator43);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 2);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addSeconds(date61, (int) ' ');
        java.lang.Class<?> wildcardClass64 = date63.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:34 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date17, 0);
        java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator(date17, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date17, 2);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date25, 3, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addDays(date25, (int) ' ');
        java.lang.Class<?> wildcardClass31 = date25.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Sep 27 00:00:00 CEST 1990");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Aug 06 00:00:00 CEST 1992");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Mon Oct 29 00:00:00 CET 1990");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date12, (int) (short) 10);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addMonths(date61, 10);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.add(date63, 10, 4);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.addHours(date63, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sun Nov 01 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sun Nov 01 00:00:00 CET 1970");
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date11, (int) (byte) 0);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.add(date11, 0, 10);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addSeconds(date18, (int) ' ');
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addHours(date20, 1000);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date22, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:32 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Wed Feb 11 16:00:32 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, 1);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMonths(date9, 10);
        java.util.Date date19 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameInstant(date18, date19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:01:00 CET 1980");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 01 00:00:00 CET 1980");
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addSeconds(date14, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addHours(date23, 2);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date25, (int) (short) -1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 01:59:00 CET 1970");
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addHours(date15, 3600000);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.add(date21, 0, (int) '#');
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addMonths(date26, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addDays(date26, (int) 'a');
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addMinutes(date26, 3600000);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray35);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addYears(date40, (int) (short) 10);
        boolean boolean43 = org.apache.commons.lang.time.DateUtils.isSameDay(date36, date42);
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray48);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray48);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray48);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameDay(date36, date51);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date36, (int) (byte) 10);
        boolean boolean55 = org.apache.commons.lang.time.DateUtils.isSameInstant(date32, date54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.truncate(date54, (int) (short) 10);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date54);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addHours(date17, 4);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Sep 08 01:00:00 CEST 2396");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Sep 08 05:00:00 CEST 2396");
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addMinutes(date0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray13);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.add(date14, 0, (int) '#');
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addHours(date14, (-1));
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date14);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMinutes(date14, (int) '4');
        java.util.Iterator iterator26 = org.apache.commons.lang.time.DateUtils.iterator(date24, 4);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addYears(date24, 4);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:52:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:52:00 CET 1974");
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMonths(date12, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addWeeks(date24, 0);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date24, (int) (byte) 1, 6);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addWeeks(date40, 0);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.add(date40, (int) (byte) 1, 6);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date24, date46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.round(date24, (int) (short) 0);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addYears(date49, (int) 'a');
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addYears(date49, 6);
        boolean boolean54 = org.apache.commons.lang.time.DateUtils.isSameInstant(date12, date49);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addSeconds(date12, 3600000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator58 = org.apache.commons.lang.time.DateUtils.iterator(date56, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 97 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Jan 01 00:00:00 CET 7");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Mon Feb 11 16:00:00 CET 1980");
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 3);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addHours(date14, 4);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.round(date14, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang.time.DateUtils.round(date14, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, (int) (byte) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addMinutes(date26, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang.time.DateUtils.truncate(date26, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3600000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Mar 12 00:10:00 CET 3601970");
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) '#');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date23, (int) (short) 0);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date25, (int) (byte) 0);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date27, (int) (short) 1);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addHours(date27, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date5, 2, 1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, 1000);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addWeeks(date12, (int) '4');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 3600000);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addDays(date16, (int) (short) -1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Mon Dec 31 23:59:59 CET 1979");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:16:40 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Dec 30 00:16:40 CET 1980");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Apr 02 00:16:40 CEST 70976");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Mon Apr 01 00:16:40 CEST 70976");
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 2);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addHours(date61, (-1));
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMonths(date61, (int) 'a');
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addSeconds(date61, 5);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addMonths(date61, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:00:02 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Feb 01 00:00:02 CET 1978");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:07 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sun Nov 01 00:00:02 CET 1970");
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round(date24, 5);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.add(date33, 0, 3);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date41, 0);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addYears(date41, (int) (byte) 0);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.add(date41, 0, 10);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addSeconds(date48, (int) ' ');
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date29, date50);
        java.lang.Class<?> wildcardClass52 = date50.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:32 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.truncate(date24, 10);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray34);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        boolean boolean42 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date41);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date50);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date35, (int) (byte) 10);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addHours(date35, (int) '#');
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addMinutes(date55, (int) (short) 0);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date31, date55);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addDays(date55, (int) (byte) 0);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addDays(date60, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sat Jan 03 11:00:00 CET 1970");
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addYears(date18, (int) (byte) -1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date24, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date30, 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date30, (int) (byte) 1, 6);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addYears(date40, (int) (short) 10);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.add(date40, 0, (int) '#');
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date30, date45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addHours(date45, (int) (byte) -1);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date48);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addMonths(date48, 10);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addSeconds(date51, 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Oct 31 23:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Oct 31 23:01:40 CET 1970");
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (short) 10, 2);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.round(date25, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator29 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) (byte) 1, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, 6);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addMonths(date42, 1000);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date44, (-1));
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date44, 0);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameInstant(date36, date44);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Mon Jan 01 00:06:00 CET 98");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu May 01 00:00:00 CEST 2053");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Apr 30 23:59:59 CEST 2053");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu May 01 00:00:00 CEST 2053");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 2);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addHours(date61, (-1));
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMonths(date61, (int) 'a');
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addSeconds(date61, 5);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addHours(date67, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator71 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date67, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 60000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:00:02 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Feb 01 00:00:02 CET 1978");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:07 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:07 CET 1970");
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Iterator iterator21 = org.apache.commons.lang.time.DateUtils.iterator(date19, 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(iterator21);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, (int) (short) 10);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMonths(date24, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date33 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 60000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Mon Jun 01 00:00:00 CET 1970");
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addDays(date9, 100);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date21);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date15, (int) (short) 1, (int) (byte) 0);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date15, 0, (int) (byte) 100);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMonths(date28, (int) (short) 1);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addYears(date35, (int) (short) 10);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.add(date35, 0, (int) '#');
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.add(date35, 0, 3);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addMonths(date35, (int) (byte) 1);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.add(date35, (int) (byte) 10, 1000);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addWeeks(date35, (int) (byte) 0);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addMinutes(date50, (int) (short) 1);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addWeeks(date50, (int) (short) 0);
        boolean boolean55 = org.apache.commons.lang.time.DateUtils.isSameDay(date28, date50);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addHours(date28, (int) '#');
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Apr 11 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Feb 11 16:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Fri Jan 02 11:00:00 CET 1970");
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.round(obj0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round(date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date24, 3600000);
        java.lang.Class<?> wildcardClass32 = date24.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) 86400000L, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 86400000");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "", "hi!", "hi!" };
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.addSeconds(date6, (int) (short) 10);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date8, 2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:10 CET 1970");
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) '#');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date23, (int) (short) 0);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date23, 100);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date27, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Fri Jan 02 11:00:00 CET 1970");
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray13);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.add(date14, 0, (int) '#');
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addHours(date14, (-1));
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date14);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addSeconds(date14, (int) (short) 1);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, (int) '4');
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date26, (int) (byte) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addDays(date26, (int) '#');
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addYears(date26, (int) (byte) -1);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addSeconds(date26, 3600000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Feb 04 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Feb 10 16:00:00 CET 1971");
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.add(date3, 5, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator34 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) 5, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 5");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Sep 28 00:00:00 CET 1972");
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round(date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date24, 3600000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date33 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date31, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 1000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 01:00:00 CET 1970");
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date24);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addSeconds(date24, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date28, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:01:37 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round(date14, 0);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date14, 3600000);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addDays(date23, (-1));
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date23, (int) (short) 1, 1001);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addDays(date28, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Sep 08 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Sep 07 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Sep 08 01:00:00 CEST 3381");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Sep 18 01:00:00 CEST 3381");
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, (int) (byte) 10);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date30, 2, 1);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addSeconds(date30, (int) (short) -1);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addSeconds(date30, 1000);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addHours(date19, 0);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addSeconds(date40, 3600000);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Mon Dec 31 23:59:59 CET 1979");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:16:40 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Feb 11 16:00:00 CET 3601970");
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(date0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMinutes(date19, (int) (short) 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, (int) (byte) -1);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 1001);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMonths(date27, (-1));
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 01 00:10:00 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon Dec 01 00:09:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Mon Feb 06 00:09:59 CET 1989");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Fri Jan 06 00:09:59 CET 1989");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Fri Jan 06 00:09:59 CET 1989");
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date34, 6);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addSeconds(date34, 60000);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date40, (int) (short) 10);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray51);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addYears(date52, (int) (short) 10);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.add(date52, 0, (int) '#');
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addMonths(date57, (int) (short) 10);
        boolean boolean60 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date57);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addMonths(date57, (int) (byte) -1);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.add(date57, 0, 10);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addDays(date65, 60000);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addMonths(date65, (int) (short) 10);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addSeconds(date65, 10);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.addDays(date65, (int) 'a');
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addYears(date65, (int) '4');
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date65, (-1));
        boolean boolean78 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date77);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 00:00:00 CET 7");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 01 16:40:00 CET 1");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Jan 01 16:40:00 CET 1");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sat Jan 01 00:00:00 CET 2022");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addSeconds(date0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray13);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.add(date14, 0, (int) '#');
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addHours(date14, (-1));
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date14);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addSeconds(date14, (int) (short) 1);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, (int) '4');
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date26, (int) (byte) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addWeeks(date28, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Dec 31 00:00:00 CET 1970");
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        java.util.Date date0 = null;
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date5, 3600000);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = org.apache.commons.lang.time.DateUtils.isSameDay(date0, date7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.util.Iterator iterator16 = org.apache.commons.lang.time.DateUtils.iterator(date8, 6);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addHours(date8, 100);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date18, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Mon Jan 05 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date5, 2, 1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, 1000);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addWeeks(date12, (int) '4');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addHours(date12, 3600000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Mon Dec 31 23:59:59 CET 1979");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:16:40 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Dec 30 00:16:40 CET 1980");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Sep 08 01:16:40 CEST 2390");
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Iterator iterator16 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date9, 4);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMonths(date9, 3);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Apr 01 00:00:00 CET 1980");
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (short) 10, 2);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, (int) (short) 100);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 100);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addHours(date25, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date37 = org.apache.commons.lang.time.DateUtils.round(date35, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 60000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Dec 02 02:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Dec 02 02:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 04:00:00 CET 1970");
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date34, 2);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addDays(date34, (int) 'a');
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addSeconds(date56, (int) (byte) 100);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addYears(date58, 1000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date62 = org.apache.commons.lang.time.DateUtils.round(date58, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Apr 08 00:01:40 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Apr 08 00:01:40 CEST 2970");
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date3, (int) (byte) -1);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (short) 10);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator13 = org.apache.commons.lang.time.DateUtils.iterator(date11, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addYears(date18, (int) (byte) -1);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.add(date18, 6, (int) (byte) 0);
        java.util.Iterator iterator25 = org.apache.commons.lang.time.DateUtils.iterator(date23, 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(iterator25);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.add(date16, 10, (-1));
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, 5);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date33);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        boolean boolean43 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date27, (int) (byte) 10);
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addYears(date54, (int) (short) 10);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date50, date56);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addWeeks(date56, 0);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.add(date56, (int) (byte) 1, 6);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addSeconds(date62, 86400000);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date64, (-1));
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date45, date66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date45, (int) (byte) 10);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.add(date45, (int) (short) 10, (int) (short) 0);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.addSeconds(date45, 86400000);
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date74, (-1));
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date74, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Dec 31 23:00:00 CET 2069");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 05 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Wed Sep 27 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Aug 27 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Sep 27 00:00:00 CET 1972");
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMinutes(date11, (int) (byte) 100);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date23, 0, (int) '#');
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addMonths(date28, (int) (short) 10);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date28);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date28, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.round(date33, (int) (short) 1);
        boolean boolean36 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date33);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator38 = org.apache.commons.lang.time.DateUtils.iterator(date33, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMinutes(date5, (int) (short) 100);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addMinutes(date5, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date23 = org.apache.commons.lang.time.DateUtils.round(date5, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:06:00 CET 1970");
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date34, 2);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addDays(date34, (int) 'a');
        java.util.Iterator iterator58 = org.apache.commons.lang.time.DateUtils.iterator(date56, 3);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addDays(date56, 1001);
        java.lang.Class<?> wildcardClass61 = date60.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator58);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Jan 03 00:00:00 CET 1973");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) '#');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, 0);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate(date23, (int) (byte) 10);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMinutes(date23, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Fri Jan 02 11:01:00 CET 1970");
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Iterator iterator12 = org.apache.commons.lang.time.DateUtils.iterator(date8, (int) (byte) 1);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addDays(date8, 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Jan 11 00:00:00 CET 1970");
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 4, 3600000);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date22, 10, (int) '4');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Mon Dec 29 23:59:59 CET 70983");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 03:59:59 CET 70984");
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.addSeconds(date6, 1001);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addYears(date8, 10);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:16:41 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Tue Jan 01 00:16:41 CET 1980");
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.add(date16, 10, (-1));
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, 5);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date33);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        boolean boolean43 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date27, (int) (byte) 10);
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addYears(date54, (int) (short) 10);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date50, date56);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addWeeks(date56, 0);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.add(date56, (int) (byte) 1, 6);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addSeconds(date62, 86400000);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date64, (-1));
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date45, date66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addWeeks(date45, (int) (byte) 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Dec 31 23:00:00 CET 2069");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 05 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Dec 02 00:00:00 CET 1971");
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date5, 2, 1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, 1000);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date12, 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Mon Dec 31 23:59:59 CET 1979");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:16:40 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Jan 01 00:16:40 CET 1980");
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date34, 2);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.add(date34, (int) (byte) 10, (int) (byte) 0);
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray62);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray62);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray62);
        boolean boolean66 = org.apache.commons.lang.time.DateUtils.isSameInstant(date57, date65);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.addMinutes(date57, (int) (short) 10);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.add(date57, 5, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sun Jan 11 00:00:00 CET 1970");
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addSeconds(date24, (int) (byte) 1);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, 0);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addSeconds(date31, 1001);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addYears(date43, (int) (short) 10);
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date39, date45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addWeeks(date45, 0);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.add(date45, (int) (byte) 1, 6);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addYears(date55, (int) (short) 10);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.add(date55, 0, (int) '#');
        boolean boolean61 = org.apache.commons.lang.time.DateUtils.isSameDay(date45, date60);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addHours(date60, (int) (byte) -1);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addDays(date63, 60000);
        boolean boolean66 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date63);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date63, 0);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.addHours(date63, (int) '4');
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date70, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:16:42 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sat Apr 10 23:00:00 CEST 2134");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sat Jan 03 03:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addDays(date14, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 10 23:59:00 CET 1980");
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, (-1));
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.round(date36, (int) (byte) 1);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addDays(date36, (int) (short) -1);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addHours(date42, (int) (short) 100);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addDays(date44, (int) (byte) 10);
        java.lang.Class<?> wildcardClass47 = date46.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 31 23:59:00 CET 97");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 31 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 04 04:00:00 CET 98");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Jan 14 04:00:00 CET 98");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date38 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) (short) -1, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate -1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Fri Dec 31 23:59:00 CET 1");
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round(date24, 5);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.add(date33, 0, 3);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date41, 0);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addYears(date41, (int) (byte) 0);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.add(date41, 0, 10);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addSeconds(date48, (int) ' ');
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date29, date50);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addWeeks(date50, 0);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addMonths(date53, 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:32 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:32 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Nov 01 00:00:32 CET 1970");
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date21);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date15, (int) (byte) 10);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.add(date37, 0, (int) '#');
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addYears(date50, (int) (short) 10);
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date52);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        boolean boolean62 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date61);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date46);
        boolean boolean64 = org.apache.commons.lang.time.DateUtils.isSameInstant(date15, date46);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date46, 2);
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date66);
        java.lang.String[] strArray70 = new java.lang.String[] { "" };
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray70);
        java.lang.String[] strArray74 = new java.lang.String[] { "" };
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray74);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addYears(date75, (int) (short) 10);
        boolean boolean78 = org.apache.commons.lang.time.DateUtils.isSameDay(date71, date77);
        java.util.Date date80 = org.apache.commons.lang.time.DateUtils.addWeeks(date77, 0);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.add(date77, (int) (byte) 1, 6);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addSeconds(date83, 86400000);
        java.util.Date date88 = org.apache.commons.lang.time.DateUtils.add(date85, 3, (int) '4');
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.truncate(date88, (int) (short) 10);
        boolean boolean91 = org.apache.commons.lang.time.DateUtils.isSameDay(date66, date90);
        java.util.Date date93 = org.apache.commons.lang.time.DateUtils.addMonths(date66, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date95 = org.apache.commons.lang.time.DateUtils.round(date93, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Tue Sep 26 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Tue Sep 26 00:00:00 CET 1989");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(date93);
        org.junit.Assert.assertEquals(date93.toString(), "Mon Dec 01 00:00:00 CET 1969");
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) 'a');
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date33);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        boolean boolean43 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date27, (int) (byte) 10);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addWeeks(date27, (int) 'a');
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.truncate(date27, 1001);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date27, 1001);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addDays(date27, 3);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.truncate(date53, (int) (byte) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date23, date53);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addMonths(date23, (int) (short) 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Jan 04 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Jan 04 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Tue Mar 11 00:00:00 CET 1980");
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date3 = org.apache.commons.lang.time.DateUtils.add(date0, 0, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round(date24, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator31 = org.apache.commons.lang.time.DateUtils.iterator(date24, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 1000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) 'a');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.truncate(date3, 1001);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date3, 1001);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addDays(date3, 3);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.truncate(date29, (int) (byte) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.truncate(date31, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMonths(date33, 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Jan 04 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Jan 04 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Feb 01 00:00:00 CET 1970");
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date48);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date57);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date42);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date74, (int) (short) 10);
        boolean boolean77 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date74);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date74, 3600000);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray82);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addYears(date83, (int) (short) 10);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date79, date85);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date85);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date42);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date42, 1000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date92 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) 1000, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 1000");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Thu Jan 01 00:00:01 CET 1970");
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addMinutes(date3, 1000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator56 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) 1000, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 1000");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 16:40:00 CET 1970");
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date32, (int) (short) 10);
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date28, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addWeeks(date34, 0);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.add(date34, (int) (byte) 1, 6);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date22, date34);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addWeeks(date22, 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Mar 12 00:00:00 CET 1970");
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addYears(date24, 3600000);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date26, 0);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.round(date26, (int) (byte) 0);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addSeconds(date30, 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Apr 11 00:00:00 CEST 3602134");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Apr 11 00:00:00 CEST 3602134");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 01 00:01:40 CET 1");
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addDays(date24, (int) (short) 10);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addDays(date29, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date33 = org.apache.commons.lang.time.DateUtils.truncate(date31, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 86400000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 15 00:00:00 CET 1970");
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) 'a');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.truncate(date3, 1001);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date3, 1001);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addDays(date3, 3);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.truncate(date29, (int) (byte) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addSeconds(date31, 60000);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addWeeks(date31, (int) 'a');
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date31, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Jan 04 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Jan 04 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Jan 04 16:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Nov 14 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (short) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addSeconds(date22, 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addDays(date28, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:10 CET 1970");
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Iterator iterator12 = org.apache.commons.lang.time.DateUtils.iterator(date8, (int) (byte) 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addYears(date20, (int) (short) 10);
        boolean boolean23 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addWeeks(date22, 0);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (byte) 1, 6);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addHours(date22, (int) ' ');
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameInstant(date8, date22);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addHours(date22, (int) (byte) 0);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addHours(date33, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date41, 2, 1);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addSeconds(date41, (int) (short) -1);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addSeconds(date46, 2);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.truncate(date48, (int) (byte) 0);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameInstant(date33, date48);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addDays(date48, (int) 'a');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 01:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Mon Dec 31 23:59:59 CET 1979");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:01 CET 1980");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Mon Apr 07 00:00:01 CEST 1980");
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date59, 60000);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addHours(date61, 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date65 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 10");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 10:01:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 20:01:00 CET 1970");
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addSeconds(date21, (-1));
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.truncate(date21, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addDays(date25, 0);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMinutes(date27, 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 31 23:59:59 CET 2069");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 01 00:10:00 CET 2070");
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (byte) 100);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addWeeks(date21, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate(date21, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Mar 11 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Mar 11 00:00:00 CET 1970");
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date19, (int) (byte) 1, 6);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date29, 0, (int) '#');
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addHours(date34, (int) (byte) -1);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date34);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, 4);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addYears(date50, (int) (short) 10);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.add(date50, 0, (int) '#');
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addMonths(date55, (int) (short) 10);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date44, date55);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addMonths(date55, (int) (byte) -1);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.add(date55, 0, 10);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date55, 3);
        boolean boolean66 = org.apache.commons.lang.time.DateUtils.isSameInstant(date40, date65);
        java.lang.Class<?> wildcardClass67 = date65.getClass();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Iterator iterator12 = org.apache.commons.lang.time.DateUtils.iterator(date8, (int) (byte) 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addYears(date20, (int) (short) 10);
        boolean boolean23 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addWeeks(date22, 0);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (byte) 1, 6);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addHours(date22, (int) ' ');
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameInstant(date8, date22);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date33 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) boolean31, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate false");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.round(date12, 2);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addHours(date12, 0);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date12, 5);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addMinutes(date12, 6);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Jan 01 00:06:00 CET 1980");
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addHours(date0, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date34, 2);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addDays(date34, (int) 'a');
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addSeconds(date56, (int) (byte) 100);
        java.lang.Class<?> wildcardClass59 = date56.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Apr 08 00:01:40 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 2);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addWeeks(date61, 100);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addWeeks(date63, 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Dec 02 00:00:02 CET 1971");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Dec 09 00:00:02 CET 1971");
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date24);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date18, (int) (byte) 10);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addHours(date36, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) 'a');
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Jan 01 00:00:00 CET 2067");
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addMonths(date5, (int) '#');
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addWeeks(date7, 3600000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 01 00:00:00 CET 1982");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 01 00:10:00 CET 1982");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Mar 04 00:00:00 CET 70978");
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addHours(date29, 0);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date31, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator35 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date33, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date12, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date63 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date61, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray55);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date62);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date71);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date56);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addSeconds(date56, (int) (byte) 1);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date56, 5);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date77, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator81 = org.apache.commons.lang.time.DateUtils.iterator(date79, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Fri Jan 01 00:00:00 CET 1971");
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addWeeks(date59, (int) (short) 10);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addSeconds(date59, (int) (short) -1);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date59, 100);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.add(date59, 0, 60000);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.round(date59, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Mar 12 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 09:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) 'a');
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date33);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        boolean boolean43 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date27, (int) (byte) 10);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addWeeks(date27, (int) 'a');
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.truncate(date27, 1001);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date27, 1001);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addDays(date27, 3);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.truncate(date53, (int) (byte) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date23, date53);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addMonths(date53, (int) '4');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Jan 04 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Jan 04 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sat May 04 00:00:00 CET 1974");
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date24);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addDays(date3, 10);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray35);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date36, (int) (short) 10);
        boolean boolean39 = org.apache.commons.lang.time.DateUtils.isSameDay(date32, date38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addWeeks(date38, 0);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date38, (int) (byte) 1, 6);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray51);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addYears(date52, (int) (short) 10);
        boolean boolean55 = org.apache.commons.lang.time.DateUtils.isSameDay(date48, date54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addWeeks(date54, 0);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.add(date54, (int) (byte) 1, 6);
        boolean boolean61 = org.apache.commons.lang.time.DateUtils.isSameDay(date38, date60);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.round(date38, (int) (short) 0);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addYears(date63, (int) 'a');
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addMinutes(date65, (-1));
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.round(date67, 0);
        boolean boolean70 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date67);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sun Dec 31 23:59:00 CET 97");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date19, (int) (byte) 1, 6);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date29, 0, (int) '#');
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addHours(date34, (int) (byte) -1);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date34);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addSeconds(date7, (int) (byte) 1);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addSeconds(date7, 5);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:05 CET 1970");
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addHours(date15, 3600000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMinutes(date17, 0);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate(date19, 2);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addYears(date35, (int) (short) 10);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date37);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date31, (int) (byte) 10);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.add(date53, 0, (int) '#');
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray61);
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray65);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.addYears(date66, (int) (short) 10);
        boolean boolean69 = org.apache.commons.lang.time.DateUtils.isSameDay(date62, date68);
        java.lang.String[] strArray74 = new java.lang.String[] { "" };
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray74);
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray74);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray74);
        boolean boolean78 = org.apache.commons.lang.time.DateUtils.isSameDay(date62, date77);
        boolean boolean79 = org.apache.commons.lang.time.DateUtils.isSameDay(date53, date62);
        boolean boolean80 = org.apache.commons.lang.time.DateUtils.isSameInstant(date31, date62);
        boolean boolean81 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date31);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date27, 6);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date27, 1000);
        java.util.Date date87 = org.apache.commons.lang.time.DateUtils.addHours(date27, (int) (byte) 10);
        java.util.Date date89 = org.apache.commons.lang.time.DateUtils.addMinutes(date87, 1000);
        boolean boolean90 = org.apache.commons.lang.time.DateUtils.isSameInstant(date19, date87);
        java.util.Date date92 = org.apache.commons.lang.time.DateUtils.addDays(date19, 4);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Sep 08 01:00:00 CEST 2396");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Sep 08 01:00:00 CEST 2396");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Sep 01 00:00:00 CEST 2396");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Jan 01 00:00:01 CET 1980");
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Tue Jan 01 10:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Wed Jan 02 02:40:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Thu Sep 12 01:00:00 CEST 2396");
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMinutes(date19, (int) (short) 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, (int) (byte) -1);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 1001);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.add(date37, 0, (int) '#');
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addMonths(date42, (int) (short) 10);
        boolean boolean45 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date42);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addMonths(date42, (int) (byte) -1);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.add(date42, 0, 10);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.add(date50, (int) (short) 10, 2);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addMonths(date53, 0);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addMonths(date53, 0);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addWeeks(date53, (int) (short) 100);
        boolean boolean60 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date53);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator62 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date53, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 3600000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 01 00:10:00 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon Dec 01 00:09:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Mon Feb 06 00:09:59 CET 1989");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Dec 02 02:00:00 CET 1971");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMinutes(date5, (int) (short) 100);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 1001);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 2, (int) 'a');
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Mar 09 01:40:00 CET 1989");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Feb 01 01:40:00 CET 1978");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Feb 01 01:00:00 CET 1978");
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date34, 2);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addDays(date34, (int) 'a');
        java.util.Iterator iterator58 = org.apache.commons.lang.time.DateUtils.iterator(date56, 3);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addSeconds(date56, 100);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addMonths(date60, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date64 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) (short) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 10");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator58);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Apr 08 00:01:40 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Mon Feb 08 00:01:40 CET 1971");
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.add(date16, 10, (-1));
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, 5);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date33);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        boolean boolean43 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date27, (int) (byte) 10);
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addYears(date54, (int) (short) 10);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date50, date56);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addWeeks(date56, 0);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.add(date56, (int) (byte) 1, 6);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addSeconds(date62, 86400000);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date64, (-1));
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date45, date66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date45, (int) (byte) 10);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (-1));
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Dec 31 23:00:00 CET 2069");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 05 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Wed Jan 01 00:00:00 CET 1969");
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addHours(date9, (int) ' ');
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 60000, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Jan 01 00:00:00 CET 2080");
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date3, (int) (byte) -1);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (short) 10);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date3, (int) '#');
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.round(date11, (int) (short) 1);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addDays(date13, (int) '#');
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date13, 3600000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Feb 05 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Feb 11 16:00:00 CET 1970");
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round(date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addWeeks(date29, (int) 'a');
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addSeconds(date31, 0);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMinutes(date31, 10);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addMonths(date31, 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Nov 11 00:10:00 CET 1971");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Mar 11 00:00:00 CET 1980");
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addSeconds(date21, (-1));
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date21, (int) (byte) 0);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addDays(date21, (int) (byte) 100);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addWeeks(date21, (int) (short) 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMinutes(date29, 1000);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 31 23:59:59 CET 2069");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Fri Apr 11 00:00:00 CEST 2070");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 16:40:00 CET 2070");
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date17, 0);
        java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator(date17, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date17, 2);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date25, 3, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator32 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date25, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 32 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Sep 27 00:00:00 CEST 1990");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Aug 06 00:00:00 CEST 1992");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Oct 04 00:00:00 CET 1990");
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date17, 0);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date17, (int) 'a');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Sep 27 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Sep 27 01:37:00 CET 1988");
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addMinutes(date17, 3600000);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addSeconds(date17, (int) '#');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Aug 02 01:00:00 CEST 1995");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Sep 27 00:00:35 CET 1988");
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addDays(date27, 60000);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        boolean boolean40 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date39);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.add(date33, (int) (short) 1, (int) (byte) 0);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) (byte) 100);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addMonths(date46, 0);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date46);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Apr 10 23:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date12, (int) (byte) 10);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) '#');
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addMinutes(date32, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date32, 100);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date36);
        java.util.Iterator iterator39 = org.apache.commons.lang.time.DateUtils.iterator(date3, 3);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addMinutes(date3, 86400000);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addWeeks(date41, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Apr 11 01:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Apr 11 01:00:00 CEST 2134");
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMinutes(date29, 2);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date29, 4);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date29, 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 2);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addHours(date61, (-1));
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMonths(date63, (int) (short) 0);
        java.lang.Class<?> wildcardClass66 = date63.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:00:02 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:00:02 CET 1969");
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date5, 2, 1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, 1000);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addWeeks(date12, (int) '4');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addHours(date14, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Mon Dec 31 23:59:59 CET 1979");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:16:40 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Dec 30 00:16:40 CET 1980");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Dec 30 10:16:40 CET 1980");
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray13);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addYears(date18, (int) (short) 10);
        boolean boolean21 = org.apache.commons.lang.time.DateUtils.isSameDay(date14, date20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date20, 0);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.add(date20, (int) (byte) 1, 6);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addSeconds(date26, 86400000);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date28, 3, (int) '4');
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.truncate(date31, (int) (short) 10);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addWeeks(date31, 1001);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addYears(date43, (int) (short) 10);
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date39, date45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addWeeks(date45, 0);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.add(date45, (int) (byte) 1, 6);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addSeconds(date51, 86400000);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date53, (-1));
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date53, 0);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date31, date57);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addSeconds(date57, (int) (short) 100);
        boolean boolean61 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date57);
        java.lang.Class<?> wildcardClass62 = date3.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Sep 26 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 26 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Dec 02 00:00:00 CET 2008");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sat Jan 01 00:01:40 CET 1");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round(date14, 0);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date14, 3600000);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray26);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addYears(date27, (int) (short) 10);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        boolean boolean40 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date39);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date48);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date33, (int) (byte) 10);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addYears(date55, (int) (short) 10);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.add(date55, 0, (int) '#');
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray67);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.addYears(date68, (int) (short) 10);
        boolean boolean71 = org.apache.commons.lang.time.DateUtils.isSameDay(date64, date70);
        java.lang.String[] strArray76 = new java.lang.String[] { "" };
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        boolean boolean80 = org.apache.commons.lang.time.DateUtils.isSameDay(date64, date79);
        boolean boolean81 = org.apache.commons.lang.time.DateUtils.isSameDay(date55, date64);
        boolean boolean82 = org.apache.commons.lang.time.DateUtils.isSameInstant(date33, date64);
        boolean boolean83 = org.apache.commons.lang.time.DateUtils.isSameInstant(date29, date33);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addSeconds(date33, 2);
        java.util.Date date87 = org.apache.commons.lang.time.DateUtils.addHours(date85, (-1));
        java.util.Date date89 = org.apache.commons.lang.time.DateUtils.addMonths(date85, (int) 'a');
        java.util.Date date91 = org.apache.commons.lang.time.DateUtils.addSeconds(date85, 5);
        boolean boolean92 = org.apache.commons.lang.time.DateUtils.isSameDay(date14, date91);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Sep 08 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Wed Dec 31 23:00:02 CET 1969");
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Wed Feb 01 00:00:02 CET 1978");
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Thu Jan 01 00:00:07 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, 6);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, 86400000);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addMinutes(date38, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date44 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date42, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Mon Jan 01 00:06:00 CET 98");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Jan 01 00:06:00 CET 86400098");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Mon Jan 01 01:46:00 CET 98");
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addMinutes(date3, 5);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addMonths(date5, (int) (byte) 1);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addYears(date11, (int) (short) 10);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date11, 0, (int) '#');
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMonths(date16, (int) (short) 10);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addDays(date16, (int) 'a');
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 3600000);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray25);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray29);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addYears(date30, (int) (short) 10);
        boolean boolean33 = org.apache.commons.lang.time.DateUtils.isSameDay(date26, date32);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        boolean boolean42 = org.apache.commons.lang.time.DateUtils.isSameDay(date26, date41);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date26, (int) (byte) 10);
        boolean boolean45 = org.apache.commons.lang.time.DateUtils.isSameInstant(date22, date44);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date22, (int) (short) 10);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date22, 0);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.truncate(date22, 0);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date51);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.add(date5, (int) (short) 10, 6);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addYears(date5, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:05:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Feb 01 00:05:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 06:05:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:05:00 CET 1970");
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, (int) (byte) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addDays(date24, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) (short) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 10");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Mar 22 00:00:00 CET 3601970");
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addSeconds(date36, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Mon Jan 01 00:00:10 CET 98");
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date17, (int) (byte) 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Aug 28 00:00:00 CEST 1990");
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date19, (int) (byte) 1, 6);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date29, 0, (int) '#');
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addHours(date34, (int) (byte) -1);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date34);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, 4);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addYears(date50, (int) (short) 10);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.add(date50, 0, (int) '#');
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addMonths(date55, (int) (short) 10);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date44, date55);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addMonths(date55, (int) (byte) -1);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.add(date55, 0, 10);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date55, 3);
        boolean boolean66 = org.apache.commons.lang.time.DateUtils.isSameInstant(date40, date65);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.truncate(date40, 10);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.addMonths(date40, 1);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.addHours(date70, 60000);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.addHours(date72, (int) 'a');
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date72, 100);
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date72, 2);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Mon Dec 06 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Fri Dec 10 01:00:00 CET 1976");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sat Apr 06 00:00:00 CEST 1985");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 01 00:00:00 CET 1976");
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, (int) (byte) 10);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addSeconds(date18, 0);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date24, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date30, 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date30, (int) (byte) 1, 6);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addWeeks(date46, 0);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.add(date46, (int) (byte) 1, 6);
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date30, date52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.round(date30, (int) (short) 0);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addYears(date55, (int) 'a');
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addMinutes(date57, (-1));
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray62);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addYears(date63, (int) (short) 10);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.add(date63, 0, (int) '#');
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.add(date63, 0, 3);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.addMinutes(date71, (int) (byte) 100);
        boolean boolean74 = org.apache.commons.lang.time.DateUtils.isSameInstant(date59, date71);
        boolean boolean75 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date71);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addSeconds(date71, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Mar 12 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Mar 12 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Dec 31 23:59:00 CET 97");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addWeeks(date21, 0);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.add(date21, (int) (byte) 1, 6);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, 86400000);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date29, (-1));
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameInstant(date11, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addSeconds(date31, (-1));
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.add(date44, 0, (int) '#');
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addMonths(date49, (int) (short) 10);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameDay(date38, date49);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addMonths(date49, (int) (byte) -1);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.add(date49, 0, 10);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addDays(date57, 60000);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMonths(date59, 3);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addDays(date59, 6);
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray67);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray67);
        java.lang.String[] strArray72 = new java.lang.String[] { "" };
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray72);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addYears(date73, (int) (short) 10);
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.add(date73, 0, (int) '#');
        java.util.Date date80 = org.apache.commons.lang.time.DateUtils.addMonths(date78, (int) (short) 10);
        boolean boolean81 = org.apache.commons.lang.time.DateUtils.isSameDay(date69, date78);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.addYears(date78, 3600000);
        java.util.Date date86 = org.apache.commons.lang.time.DateUtils.add(date83, 0, (int) ' ');
        java.util.Date date88 = org.apache.commons.lang.time.DateUtils.addWeeks(date83, (int) (byte) 10);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date88, (int) (byte) 10);
        java.util.Date date92 = org.apache.commons.lang.time.DateUtils.addMonths(date90, 6);
        java.util.Date date94 = org.apache.commons.lang.time.DateUtils.addSeconds(date92, (int) (byte) 1);
        boolean boolean95 = org.apache.commons.lang.time.DateUtils.isSameInstant(date63, date92);
        boolean boolean96 = org.apache.commons.lang.time.DateUtils.isSameInstant(date34, date63);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Mon Sep 26 23:59:58 CET 1988");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Jul 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sat Apr 17 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Sat Sep 12 00:00:00 CEST 3601970");
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Sat Sep 12 00:00:01 CEST 3601970");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Iterator iterator59 = org.apache.commons.lang.time.DateUtils.iterator(date12, (int) (byte) 1);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMinutes(date12, (int) (short) 100);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.add(date61, (int) (short) 1, 0);
        java.lang.Class<?> wildcardClass65 = date61.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(iterator59);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (short) 10, 2);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMinutes(date25, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addSeconds(date25, 1000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 02:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 02:16:40 CET 1970");
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date17, 0);
        java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator(date17, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date17, 2);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date25, 3, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addDays(date25, (int) ' ');
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addDays(date30, (int) ' ');
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addMonths(date30, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Sep 27 00:00:00 CEST 1990");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Aug 06 00:00:00 CEST 1992");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Mon Oct 29 00:00:00 CET 1990");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Nov 30 00:00:00 CET 1990");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Mon Oct 29 00:00:00 CET 1990");
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date24, 1001);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addHours(date24, 60000);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addHours(date33, (int) (short) -1);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.truncate(date33, 1);
        java.util.Iterator iterator39 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date37, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Nov 04 23:00:00 CET 1976");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(iterator39);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addSeconds(date21, 86400000);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, 6);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round(date27, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 05 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Dec 05 00:00:00 CET 1978");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Dec 05 00:00:00 CET 1972");
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate(date0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addYears(date8, 60000);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addMonths(date10, 0);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addYears(date20, (int) (short) 10);
        boolean boolean23 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date22);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.add(date16, (int) (short) 1, (int) (byte) 0);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.add(date26, (int) (short) 1, (int) (byte) 100);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMinutes(date29, 86400000);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (byte) -1);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 6, (int) (byte) 0);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameDay(date10, date36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addMonths(date36, (int) '4');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 61970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 61970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Aug 12 01:00:00 CEST 2238");
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameInstant(date12, date44);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray57);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addYears(date58, (int) (short) 10);
        boolean boolean61 = org.apache.commons.lang.time.DateUtils.isSameDay(date54, date60);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addWeeks(date60, 0);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.add(date60, (int) (byte) 1, 6);
        java.lang.String[] strArray69 = new java.lang.String[] { "" };
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray69);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.addYears(date70, (int) (short) 10);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.add(date70, 0, (int) '#');
        boolean boolean76 = org.apache.commons.lang.time.DateUtils.isSameDay(date60, date75);
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.addMinutes(date75, 2);
        java.util.Date date80 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date75, 5);
        boolean boolean81 = org.apache.commons.lang.time.DateUtils.isSameInstant(date44, date80);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.addYears(date80, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 3);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.truncate(date14, 1);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 5);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addHours(date14, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date12, (int) (byte) 1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 86400000);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addYears(date20, (int) (short) 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date20, 0, (int) '#');
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date25, (int) (short) 10);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addDays(date25, (int) 'a');
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, (int) '4');
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date31, (int) 'a');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date31, 4);
        boolean boolean36 = org.apache.commons.lang.time.DateUtils.isSameDay(date14, date31);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.add(date14, 2, 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Fri Jan 02 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Nov 09 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Feb 01 00:00:00 CET 1970");
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMinutes(date29, 2);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date29, 4);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addDays(date33, (int) '4');
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addMonths(date35, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Feb 22 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Feb 22 00:00:00 CET 1970");
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.add(date31, 0, 3);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addMinutes(date39, (int) (byte) 100);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.truncate(date39, 2);
        boolean boolean44 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date43);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator46 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date43, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 97 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addWeeks(date8, (int) '4');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, (int) 'a');
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addHours(date14, (int) (short) 1);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.add(date22, 0, (int) '#');
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMonths(date27, (int) (short) 10);
        java.util.Iterator iterator31 = org.apache.commons.lang.time.DateUtils.iterator(date27, (int) (byte) 1);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray34);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        boolean boolean42 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date41);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addWeeks(date41, 0);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.add(date41, (int) (byte) 1, 6);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addHours(date41, (int) ' ');
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date41);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addMinutes(date41, 6);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addMonths(date41, (int) (short) 100);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray57);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date54, date58);
        boolean boolean60 = org.apache.commons.lang.time.DateUtils.isSameInstant(date18, date58);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addDays(date58, 3600000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Nov 09 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Dec 31 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:06:00 CET 1980");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun May 01 00:00:00 CEST 1988");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jun 20 00:00:00 CEST 11826");
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, 1);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMonths(date9, (int) (short) 100);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date28, 0, (int) '#');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMonths(date33, (int) (short) 10);
        boolean boolean36 = org.apache.commons.lang.time.DateUtils.isSameDay(date24, date33);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, (int) (short) 100);
        boolean boolean39 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addWeeks(date24, 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:01:00 CET 1980");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun May 01 00:00:00 CEST 1988");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Dec 02 00:00:00 CET 1971");
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(obj0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addMinutes(date3, 2);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMinutes(date21, 1000);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addDays(date23, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 16:42:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Jan 02 16:42:00 CET 1970");
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMinutes(date5, (int) (short) 100);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 1001);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 2, (int) 'a');
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date32, (int) (short) 10);
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date28, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addWeeks(date34, 0);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.add(date34, (int) (byte) 1, 6);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addYears(date48, (int) (short) 10);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date44, date50);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addWeeks(date50, 0);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.add(date50, (int) (byte) 1, 6);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date56);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.round(date34, (int) (short) 0);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addYears(date59, (int) 'a');
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addYears(date59, 6);
        boolean boolean64 = org.apache.commons.lang.time.DateUtils.isSameDay(date24, date63);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.add(date63, (int) (short) 1, 5);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Mar 09 01:40:00 CET 1989");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Feb 01 01:40:00 CET 1978");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sat Jan 01 00:00:00 CET 7");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Fri Jan 01 00:00:00 CET 12");
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date19, (int) (byte) 1, 6);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date29, 0, (int) '#');
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addHours(date34, (int) (byte) -1);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date34);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, 4);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addYears(date50, (int) (short) 10);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.add(date50, 0, (int) '#');
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addMonths(date55, (int) (short) 10);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date44, date55);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addMonths(date55, (int) (byte) -1);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.add(date55, 0, 10);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date55, 3);
        boolean boolean66 = org.apache.commons.lang.time.DateUtils.isSameInstant(date40, date65);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.truncate(date40, 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date70 = org.apache.commons.lang.time.DateUtils.truncate(date40, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date5, 2, 1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, 1000);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.truncate(date5, (int) (byte) 10);
        java.lang.Class<?> wildcardClass15 = date5.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Mon Dec 31 23:59:59 CET 1979");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:16:40 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addMonths(date5, (int) '#');
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date5, (int) (short) 1);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date19, (int) (byte) 1, 6);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addSeconds(date25, 86400000);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date27, (-1));
        boolean boolean30 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date29);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 01 00:00:00 CET 1982");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) '#');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date23, (int) (short) 0);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date23, 100);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date23, (int) (short) 1, (int) (byte) 1);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addWeeks(date30, 3600000);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addMinutes(date32, (int) (short) 1);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addDays(date34, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date38 = org.apache.commons.lang.time.DateUtils.round(date34, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Jan 02 11:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Apr 05 11:00:00 CEST 70966");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Apr 05 11:01:00 CEST 70966");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Dec 31 11:01:00 CET 70968");
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addDays(date12, (-1));
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Wed Dec 31 00:00:00 CET 1969");
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, 0);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addHours(date17, (int) (short) -1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Fri Dec 31 23:00:00 CET 1");
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, 1000);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date16, 6);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addDays(date18, (int) (byte) 10);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addHours(date20, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 16:40:00 CET 1980");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 16:40:00 CET 1980");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Jan 11 16:40:00 CET 1980");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Fri Jan 11 17:40:00 CET 1980");
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date21, (int) (short) 0);
        java.util.Date date24 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date21, date24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Dec 02 00:00:00 CET 1971");
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date34, 5);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, 5);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.round(date62, (int) (short) 1);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addMonths(date64, (int) 'a');
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameInstant(date56, date66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addSeconds(date56, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Mon Feb 01 00:00:00 CET 1988");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:01 CET 1970");
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.add(date16, 10, (-1));
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, 5);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date33);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        boolean boolean43 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date27, (int) (byte) 10);
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addYears(date54, (int) (short) 10);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date50, date56);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addWeeks(date56, 0);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.add(date56, (int) (byte) 1, 6);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addSeconds(date62, 86400000);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date64, (-1));
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date45, date66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date45, (int) (byte) 10);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.add(date45, (int) (short) 10, (int) (short) 0);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.addSeconds(date45, 86400000);
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date74, (-1));
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.addYears(date74, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Dec 31 23:00:00 CET 2069");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 05 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Wed Sep 27 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Aug 27 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Sep 27 00:00:00 CET 1972");
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date34, 5);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, 5);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.round(date62, (int) (short) 1);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addMonths(date64, (int) 'a');
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameInstant(date56, date66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addWeeks(date66, (int) 'a');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Mon Feb 01 00:00:00 CET 1988");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Mon Dec 11 00:00:00 CET 1989");
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addHours(date9, (int) ' ');
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 100);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addMonths(date9, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date23 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Jan 01 00:00:00 CET 2080");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Nov 01 00:00:00 CET 1980");
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addDays(date27, 60000);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.round(date27, 0);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addDays(date31, 1);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, (int) (short) 0, 10);
        java.lang.Class<?> wildcardClass37 = date31.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Apr 10 23:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Jan 02 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.add(date16, 10, (-1));
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, 5);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date33);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        boolean boolean43 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date27, (int) (byte) 10);
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addYears(date54, (int) (short) 10);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date50, date56);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addWeeks(date56, 0);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.add(date56, (int) (byte) 1, 6);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addSeconds(date62, 86400000);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date64, (-1));
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date45, date66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addHours(date45, 5);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Dec 31 23:00:00 CET 2069");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 05 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 05:00:00 CET 1970");
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round(date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date24, 3600000);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date24, (int) (short) 0);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addWeeks(date24, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator37 = org.apache.commons.lang.time.DateUtils.iterator(date24, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Dec 31 00:00:00 CET 1970");
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addMonths(date3, 60000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Mon Jan 01 00:00:00 CET 6970");
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date59, 60000);
        java.util.Iterator iterator63 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date59, 6);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addWeeks(date59, (int) (byte) 100);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addYears(date65, (int) (byte) 0);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addMinutes(date65, 60000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date71 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date69, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 10:01:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator63);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Dec 02 10:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Dec 02 10:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 13 02:00:00 CET 1972");
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (byte) 1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (byte) 10, 1000);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) (byte) 0);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addMinutes(date18, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date22 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) (short) 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Feb 11 16:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:01:00 CET 1970");
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addYears(date24, (int) (short) 10);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.add(date24, 0, (int) '#');
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMonths(date29, (int) (short) 10);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date29);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date29, 3600000);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.add(date34, 0, (int) ' ');
        java.util.Iterator iterator39 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date37, (int) (byte) 1);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (short) 10);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date43, date49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addWeeks(date49, 0);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addMinutes(date49, (int) (short) -1);
        java.util.Iterator iterator56 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date49, 4);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addMinutes(date49, 0);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray61);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addYears(date62, (int) (short) 10);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.add(date62, 0, (int) '#');
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.add(date62, 0, 3);
        boolean boolean71 = org.apache.commons.lang.time.DateUtils.isSameInstant(date49, date70);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date70);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date70);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (byte) 1);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date75, (int) '4');
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date75, (int) (short) 1);
        java.util.Date date81 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date79, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator56);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sat Nov 05 00:00:00 CET 1977");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sat Nov 05 00:00:00 CET 1977");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sat Nov 05 00:00:00 CET 1977");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Sat Jan 01 00:00:00 CET 1977");
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addYears(date0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.add(date16, 10, (-1));
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, 5);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) ' ');
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date29, (int) (byte) -1);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMonths(date29, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date29, (int) '#');
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date29);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Dec 31 23:00:00 CET 2069");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 05 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Jan 01 00:00:00 CET 2102");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addHours(date14, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 10:00:00 CET 1970");
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) (byte) 100);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addYears(date20, (int) (short) 10);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addYears(date26, (int) (short) 10);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date26, 0, (int) '#');
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMonths(date31, (int) (short) 10);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date31);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addMonths(date31, (int) (byte) -1);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addWeeks(date31, 4);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date38, (int) (short) 0);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addYears(date48, (int) (short) 10);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date44, date50);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addWeeks(date50, 0);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.add(date50, (int) (byte) 1, 6);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.add(date60, 0, (int) '#');
        boolean boolean66 = org.apache.commons.lang.time.DateUtils.isSameDay(date50, date65);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.addHours(date65, (int) (byte) -1);
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray71);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.addYears(date72, (int) (short) 10);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.add(date72, 0, (int) '#');
        java.util.Date date80 = org.apache.commons.lang.time.DateUtils.add(date72, 0, 3);
        java.util.Date date82 = org.apache.commons.lang.time.DateUtils.addMinutes(date80, (int) (byte) 100);
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.truncate(date80, 2);
        boolean boolean85 = org.apache.commons.lang.time.DateUtils.isSameInstant(date68, date84);
        java.util.Date date87 = org.apache.commons.lang.time.DateUtils.addSeconds(date68, 6);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date38, date68);
        boolean boolean89 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date38);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Wed Dec 31 23:00:06 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, (int) (short) -1);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addHours(date34, 1);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addMonths(date34, 100);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addWeeks(date40, (int) ' ');
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.add(date46, 0, (int) '#');
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addHours(date46, (-1));
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.add(date46, 0, (int) (byte) -1);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date46);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Fri Dec 31 23:59:00 CET 1");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 01:00:00 CET 1");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed May 01 00:00:00 CET 9");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Dec 11 00:00:00 CET 9");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.lang.Class<?> wildcardClass60 = date9.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date62 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date9, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addMinutes(date3, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator7 = org.apache.commons.lang.time.DateUtils.iterator(date3, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 60000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:05:00 CET 1970");
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray55);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date62);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date71);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date56);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addHours(date56, 1);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addDays(date56, 6);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addMinutes(date56, 86400000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Wed Jan 07 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sun Apr 11 01:00:00 CEST 2134");
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date48);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date57);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date42);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date74, (int) (short) 10);
        boolean boolean77 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date74);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date74, 3600000);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray82);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addYears(date83, (int) (short) 10);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date79, date85);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date85);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date42);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date42, 1000);
        java.util.Date date92 = org.apache.commons.lang.time.DateUtils.addMonths(date90, (-1));
        java.util.Date date94 = org.apache.commons.lang.time.DateUtils.addSeconds(date90, (int) 'a');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Mon Dec 01 00:00:01 CET 1969");
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Thu Jan 01 00:01:38 CET 1970");
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMonths(date36, (int) (short) 10);
        boolean boolean39 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date36);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addMonths(date36, (int) (byte) -1);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date36, 0, 10);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addDays(date44, 60000);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date21, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addHours(date44, (int) ' ');
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date44, 10);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addSeconds(date44, (int) (byte) 0);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addSeconds(date44, 6);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addMinutes(date55, (-1));
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Fri Jan 02 08:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:06 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Wed Dec 31 23:59:06 CET 1969");
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addDays(date5, 10);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMonths(date5, 6);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addDays(date5, (int) (byte) 10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addWeeks(date21, 0);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.add(date21, (int) (byte) 1, 6);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addYears(date35, (int) (short) 10);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addWeeks(date37, 0);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.add(date37, (int) (byte) 1, 6);
        boolean boolean44 = org.apache.commons.lang.time.DateUtils.isSameDay(date21, date43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.round(date21, (int) (short) 0);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) 'a');
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addYears(date46, 6);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addSeconds(date46, 60000);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date52, (int) (short) 10);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addMinutes(date54, (int) (byte) 0);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date56, (int) (short) 1);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date58);
        java.lang.Class<?> wildcardClass60 = date11.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Jan 11 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jul 01 00:00:00 CEST 1980");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Jan 11 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sat Jan 01 00:00:00 CET 7");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sat Jan 01 16:40:00 CET 1");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Jan 01 16:40:00 CET 1");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sat Jan 01 16:40:00 CET 1");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Iterator iterator21 = org.apache.commons.lang.time.DateUtils.iterator(date19, 5);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMinutes(date19, 4);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 01 00:04:00 CET 1969");
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, 6);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addMonths(date36, (int) '#');
        java.util.Iterator iterator42 = org.apache.commons.lang.time.DateUtils.iterator(date36, 3);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Mon Jan 01 00:06:00 CET 98");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(iterator42);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 100);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date21, 4, 1001);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addDays(date21, (int) (byte) -1);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addYears(date21, 1000);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Mar 09 00:00:00 CET 2089");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Tue Dec 31 00:00:00 CET 2069");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Jan 01 00:00:00 CET 3070");
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.add(date17, 3, (int) '4');
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.truncate(date20, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.truncate(date20, 1);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addYears(date24, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Sep 26 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 26 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Jan 01 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Mon Jan 01 00:00:00 CET 1990");
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addYears(date24, (int) (short) 10);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.add(date24, 0, (int) '#');
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMonths(date29, (int) (short) 10);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date29);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date29, 3600000);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.add(date34, 0, (int) ' ');
        java.util.Iterator iterator39 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date37, (int) (byte) 1);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (short) 10);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date43, date49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addWeeks(date49, 0);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addMinutes(date49, (int) (short) -1);
        java.util.Iterator iterator56 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date49, 4);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addMinutes(date49, 0);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray61);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addYears(date62, (int) (short) 10);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.add(date62, 0, (int) '#');
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.add(date62, 0, 3);
        boolean boolean71 = org.apache.commons.lang.time.DateUtils.isSameInstant(date49, date70);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date70);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date70);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addWeeks(date70, (-1));
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.add(date75, 2, 6);
        java.util.Date date80 = org.apache.commons.lang.time.DateUtils.addMinutes(date78, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator56);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Dec 25 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jun 25 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jun 25 00:10:00 CET 1970");
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addDays(date24, (int) (short) 10);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.truncate(date24, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date33 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date31, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3600000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addMonths(date5, (int) '#');
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date5, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date11 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date5, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 1000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 01 00:00:00 CET 1982");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameInstant(date12, date44);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray57);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addYears(date58, (int) (short) 10);
        boolean boolean61 = org.apache.commons.lang.time.DateUtils.isSameDay(date54, date60);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addWeeks(date60, 0);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.add(date60, (int) (byte) 1, 6);
        java.lang.String[] strArray69 = new java.lang.String[] { "" };
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray69);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.addYears(date70, (int) (short) 10);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.add(date70, 0, (int) '#');
        boolean boolean76 = org.apache.commons.lang.time.DateUtils.isSameDay(date60, date75);
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.addMinutes(date75, 2);
        java.util.Date date80 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date75, 5);
        boolean boolean81 = org.apache.commons.lang.time.DateUtils.isSameInstant(date44, date80);
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.add(date80, 4, 0);
        java.util.Date date86 = org.apache.commons.lang.time.DateUtils.addYears(date84, (int) (byte) 0);
        java.util.Date date88 = org.apache.commons.lang.time.DateUtils.addMinutes(date84, 3600000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Fri Nov 05 00:00:00 CET 1976");
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, 1000);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMonths(date16, (int) (short) 0);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addMonths(date18, 5);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 16:40:00 CET 1980");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 16:40:00 CET 1980");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Jun 01 16:40:00 CEST 1980");
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addYears(date18, (int) (short) 10);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date24, date30);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        boolean boolean40 = org.apache.commons.lang.time.DateUtils.isSameDay(date24, date39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date24, (int) (byte) 10);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.add(date46, 0, (int) '#');
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addYears(date59, (int) (short) 10);
        boolean boolean62 = org.apache.commons.lang.time.DateUtils.isSameDay(date55, date61);
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray67);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray67);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray67);
        boolean boolean71 = org.apache.commons.lang.time.DateUtils.isSameDay(date55, date70);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date55);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date24, date55);
        boolean boolean74 = org.apache.commons.lang.time.DateUtils.isSameInstant(date20, date24);
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addSeconds(date24, 2);
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.addHours(date76, (-1));
        boolean boolean79 = org.apache.commons.lang.time.DateUtils.isSameInstant(date8, date78);
        java.util.Date date81 = org.apache.commons.lang.time.DateUtils.addYears(date78, (int) (short) 1);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date81, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:00:02 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Thu Dec 31 23:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMinutes(date19, (int) ' ');
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray26);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addYears(date27, (int) (short) 10);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addMonths(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date38);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addMonths(date38, (int) (byte) -1);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.add(date38, 0, 10);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addDays(date46, 60000);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addMonths(date46, (int) (short) 10);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addSeconds(date46, 10);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addDays(date46, (int) 'a');
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addDays(date54, 10);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameInstant(date19, date56);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 60000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 01 00:32:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sat Apr 18 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Mon Nov 03 00:00:00 CET 3119");
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date5, 6);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date5, 1000);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.add(date63, 10, (int) 'a');
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date66, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Tue Jan 01 00:00:01 CET 1980");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sat Jan 05 01:00:01 CET 1980");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sat Jan 05 01:00:01 CET 1980");
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date3, (int) (byte) -1);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (short) 10);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator13 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date11, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date24);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addSeconds(date24, (int) 'a');
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray35);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date36, (int) (short) 10);
        boolean boolean39 = org.apache.commons.lang.time.DateUtils.isSameDay(date32, date38);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.add(date32, (int) (short) 1, (int) (byte) 0);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.add(date42, (int) (short) 1, (int) (byte) 100);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addMinutes(date45, 86400000);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (byte) -1);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray56);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addYears(date57, (int) (short) 10);
        boolean boolean60 = org.apache.commons.lang.time.DateUtils.isSameDay(date53, date59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addWeeks(date59, 0);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.add(date59, (int) (byte) 1, 6);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        boolean boolean75 = org.apache.commons.lang.time.DateUtils.isSameDay(date59, date74);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addHours(date74, (int) (byte) -1);
        boolean boolean78 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date77);
        java.util.Date date80 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date77, 3600000);
        boolean boolean81 = org.apache.commons.lang.time.DateUtils.isSameInstant(date28, date80);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.addYears(date80, 1);
        java.util.Iterator iterator85 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date80, 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:01:37 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Fri Jan 01 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(iterator85);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addMinutes(date3, 5);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (-1));
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:05:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Dec 25 00:00:00 CET 1969");
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date5, 2, 1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addWeeks(date8, 86400000);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addSeconds(date8, 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date14 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date12, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Fri Mar 30 00:00:00 CEST 1657866");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Fri Feb 01 00:01:40 CET 1980");
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray13);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.add(date14, 0, (int) '#');
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addHours(date14, (-1));
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date14);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addSeconds(date14, (int) (short) 1);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date32, (int) (short) 10);
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date28, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addWeeks(date34, 0);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.add(date34, (int) (byte) 1, 6);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addSeconds(date40, 86400000);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date42, (-1));
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date42, 0);
        java.util.Iterator iterator48 = org.apache.commons.lang.time.DateUtils.iterator(date42, (int) (byte) 1);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addYears(date42, 2);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.add(date50, 3, (int) 'a');
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date50, 4);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date14, date50);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(iterator48);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Sep 27 00:00:00 CEST 1990");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Aug 06 00:00:00 CEST 1992");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Sep 27 00:00:00 CET 1994");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date5, 2, 1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, 1000);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addSeconds(date12, 60000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Mon Dec 31 23:59:59 CET 1979");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:16:40 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Jan 01 16:56:40 CET 1980");
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        boolean boolean24 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date28, 0, (int) '#');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addHours(date28, (-1));
        boolean boolean36 = org.apache.commons.lang.time.DateUtils.isSameInstant(date23, date28);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date11, date23);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addDays(date11, (int) '#');
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addMinutes(date11, 60000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date43 = org.apache.commons.lang.time.DateUtils.truncate(date11, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Feb 05 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Feb 11 16:00:00 CET 1970");
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.round(date12, 2);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addHours(date12, 0);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date12, 5);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addMinutes(date18, 100);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addYears(date20, (int) '#');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Jan 01 01:40:00 CET 1980");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 01:40:00 CET 2015");
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addWeeks(date8, (int) '4');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, (int) 'a');
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addHours(date14, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date20 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date18, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Nov 09 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Dec 31 01:00:00 CET 1970");
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date3, (int) (byte) -1);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addWeeks(date7, 1);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) 'a');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Jan 07 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Jan 07 23:59:59 CET 2067");
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addSeconds(date14, 1000);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addHours(date14, 6);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:15:40 CET 1980");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 05:59:00 CET 1980");
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round(date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addWeeks(date29, (int) 'a');
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addSeconds(date31, 0);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMinutes(date31, 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date37 = org.apache.commons.lang.time.DateUtils.truncate(date35, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 60000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Nov 11 00:10:00 CET 1971");
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addDays(date24, (int) (short) 10);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.add(date24, (int) (short) 10, (int) (short) 10);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date32, (-1));
        java.lang.Class<?> wildcardClass35 = date34.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Jan 01 10:00:00 CET 1969");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.round(date5, (int) (short) 1);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date5, 1);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date19);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray25);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray25);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date13, (int) (byte) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date13, (int) 'a');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.truncate(date13, 1001);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date13, 1001);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addSeconds(date13, 0);
        boolean boolean40 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date13);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date8, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator(date21, 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) '#');
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        java.lang.String[] strArray10 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, (int) (short) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMonths(date23, (int) '#');
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date23, (int) (short) 1);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameInstant(date17, date27);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator30 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) boolean28, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on false");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 01 00:00:00 CET 1982");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date24, 1001);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMonths(date31, (int) (short) 100);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addDays(date33, (int) (short) 100);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addMonths(date35, (-1));
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (short) 10);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.add(date47, 0, (int) '#');
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addMonths(date52, (int) (short) 10);
        boolean boolean55 = org.apache.commons.lang.time.DateUtils.isSameDay(date43, date52);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date52, (int) (short) 1);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addYears(date52, (int) (short) 100);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addSeconds(date59, (-1));
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.truncate(date59, (int) (short) 1);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addYears(date59, 86400000);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date59, (int) (byte) 0);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addMonths(date59, 0);
        boolean boolean70 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date59);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Mon May 01 00:00:01 CEST 1978");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Aug 09 00:00:01 CEST 1978");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Jul 09 00:00:01 CEST 1978");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Tue Dec 31 23:59:59 CET 2069");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Jan 01 00:00:00 CET 86402070");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date21, (int) (short) 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date23, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 29 00:00:00 CET 1970");
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, (-1));
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addYears(date42, (int) (short) 10);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.add(date42, 0, (int) '#');
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.add(date42, 0, 3);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addMinutes(date50, (int) (byte) 100);
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameInstant(date38, date50);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addWeeks(date38, (int) (byte) -1);
        java.lang.Class<?> wildcardClass56 = date55.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 31 23:59:00 CET 97");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Dec 24 23:59:00 CET 97");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addSeconds(date24, (int) (byte) 1);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, 0);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.truncate(date31, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMonths(date3, 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator27 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date25, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 52 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 01:00:00 CET 1970");
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date11, (int) (byte) 0);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.add(date11, 0, 10);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addSeconds(date18, (int) ' ');
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addYears(date24, (int) (short) 10);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.add(date24, 0, (int) '#');
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.add(date24, 0, 3);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addMonths(date24, (int) (byte) 1);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, (int) (short) -1);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.add(date34, (int) (short) 1, 100);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date49, 3);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameDay(date39, date51);
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameInstant(date18, date51);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date18, 60000);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addWeeks(date55, 5);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:32 CET 1970");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Jan 31 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Feb 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 61970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Feb 05 00:00:00 CET 61970");
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.round(obj0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addSeconds(date18, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addSeconds(date12, 0);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addYears(date35, (int) (short) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray40);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addYears(date41, (int) (short) 10);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.add(date41, 0, (int) '#');
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addMonths(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date46);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addMonths(date46, (int) (byte) -1);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addDays(date51, (int) (byte) 100);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addSeconds(date53, 86400000);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addMonths(date55, 60000);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray61);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addYears(date67, (int) (short) 10);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.add(date67, 0, (int) '#');
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.addMonths(date72, (int) (short) 10);
        boolean boolean75 = org.apache.commons.lang.time.DateUtils.isSameDay(date63, date72);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addYears(date72, 3600000);
        java.lang.String[] strArray80 = new java.lang.String[] { "" };
        java.util.Date date81 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray80);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.addYears(date81, (int) (short) 10);
        boolean boolean84 = org.apache.commons.lang.time.DateUtils.isSameDay(date77, date83);
        boolean boolean85 = org.apache.commons.lang.time.DateUtils.isSameInstant(date55, date83);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date83);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Dec 05 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Dec 05 00:00:00 CET 6972");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addHours(date29, 0);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) ' ');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 33");
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addHours(date29, 0);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date31, (int) (byte) 10);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray40);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addYears(date41, (int) (short) 10);
        boolean boolean44 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addWeeks(date43, 0);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.round(date46, 2);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addMinutes(date46, 3600000);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameInstant(date33, date50);
        java.util.Iterator iterator53 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date33, 2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Nov 05 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(iterator53);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (short) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.truncate(date26, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) 'a');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.truncate(date3, 1001);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        boolean boolean36 = org.apache.commons.lang.time.DateUtils.isSameDay(date29, date35);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        boolean boolean45 = org.apache.commons.lang.time.DateUtils.isSameDay(date29, date44);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addYears(date29, 4);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.add(date29, (int) (short) 1, 3);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray57);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addYears(date58, (int) (short) 10);
        boolean boolean61 = org.apache.commons.lang.time.DateUtils.isSameDay(date54, date60);
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray66);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray66);
        boolean boolean70 = org.apache.commons.lang.time.DateUtils.isSameDay(date54, date69);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date54, (int) (byte) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.addWeeks(date54, (int) 'a');
        boolean boolean75 = org.apache.commons.lang.time.DateUtils.isSameInstant(date50, date54);
        boolean boolean76 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date54);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Tue Jan 01 00:00:00 CET 1974");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Mon Jan 01 00:00:00 CET 1973");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addWeeks(date59, (int) (short) 10);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addSeconds(date59, (int) (short) -1);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date59, 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date68 = org.apache.commons.lang.time.DateUtils.add(date65, (-1), (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Mar 12 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 09:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 10:00:00 CET 1970");
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, (int) (short) -1);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addHours(date34, 1);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addSeconds(date34, (int) (byte) -1);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addMonths(date40, 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Fri Dec 31 23:59:00 CET 1");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 01:00:00 CET 1");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Fri Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Mon Jan 31 23:59:59 CET 1");
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray62);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addYears(date63, (int) (short) 10);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.add(date63, 0, (int) '#');
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.add(date63, 0, 3);
        java.lang.String[] strArray74 = new java.lang.String[] { "" };
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray74);
        java.lang.String[] strArray78 = new java.lang.String[] { "" };
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray78);
        java.util.Date date81 = org.apache.commons.lang.time.DateUtils.addYears(date79, (int) (short) 10);
        boolean boolean82 = org.apache.commons.lang.time.DateUtils.isSameDay(date75, date81);
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.addWeeks(date81, 0);
        java.util.Date date87 = org.apache.commons.lang.time.DateUtils.add(date81, (int) (byte) 1, 6);
        java.util.Date date89 = org.apache.commons.lang.time.DateUtils.addSeconds(date87, 86400000);
        java.util.Date date91 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date89, (-1));
        boolean boolean92 = org.apache.commons.lang.time.DateUtils.isSameInstant(date71, date91);
        boolean boolean93 = org.apache.commons.lang.time.DateUtils.isSameDay(date59, date91);
        java.util.Date date95 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date91, 3600000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(date95);
        org.junit.Assert.assertEquals(date95.toString(), "Tue Sep 27 00:59:59 CET 1988");
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addHours(date22, 3600000);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addMinutes(date26, (int) (byte) 1);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addMinutes(date26, (int) 'a');
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addMonths(date30, 100);
        java.util.Iterator iterator34 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date32, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Mon Sep 08 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Mon Sep 08 01:01:00 CEST 2380");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Mon Sep 08 02:37:00 CEST 2380");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Jan 08 02:37:00 CET 2389");
        org.junit.Assert.assertNotNull(iterator34);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, (int) (short) -1);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addHours(date34, 1);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addMonths(date34, 100);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addMonths(date40, 1);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray51);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addYears(date52, (int) (short) 10);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.add(date52, 0, (int) '#');
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addMonths(date57, (int) (short) 10);
        boolean boolean60 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date57);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addMonths(date57, (int) (byte) -1);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addWeeks(date57, 4);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date64, (int) (short) 0);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.addSeconds(date66, (int) (short) -1);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.add(date66, (int) '#', 0);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.addSeconds(date71, (int) (short) 1);
        boolean boolean74 = org.apache.commons.lang.time.DateUtils.isSameInstant(date40, date71);
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addYears(date40, 3600000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Fri Dec 31 23:59:00 CET 1");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 01:00:00 CET 1");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed May 01 00:00:00 CET 9");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Jun 01 00:00:00 CET 9");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 29 00:00:01 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Fri May 01 00:00:00 CEST 3600009");
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date24);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addSeconds(date24, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addWeeks(date28, 100);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addWeeks(date28, (-1));
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:01:37 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Dec 02 00:01:37 CET 1971");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Dec 25 00:01:37 CET 1969");
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addSeconds(date3, (int) (byte) 0);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addHours(date3, 1001);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.truncate(date9, 0);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addHours(date11, (int) '#');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Feb 11 17:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 02 11:00:00 CET 1");
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addHours(date22, 3600000);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addDays(date22, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addSeconds(date28, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Mon Sep 08 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Apr 08 00:00:00 CET 1970");
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMonths(date13, (int) '4');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed May 01 00:00:00 CET 1974");
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date17, 0);
        java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator(date17, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date17, 2);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date25, 1000);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round(date25, 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Sep 27 00:00:00 CEST 1990");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Sep 27 16:40:00 CEST 1990");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Sep 27 00:00:00 CEST 1990");
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date3, 4);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMonths(date12, 86400000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 7201970");
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addHours(date14, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate(date14, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 04:00:00 CET 1970");
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) '#');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date23, (int) (short) 0);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date23, 100);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date23, (int) (short) 1, (int) (byte) 1);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.truncate(date23, 5);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (byte) -1);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.truncate(date34, 0);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addWeeks(date46, 0);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.add(date46, (int) (byte) 1, 6);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray55);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addYears(date56, (int) (short) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.add(date56, 0, (int) '#');
        boolean boolean62 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date61);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addMinutes(date61, 2);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date61, 5);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.truncate(date61, 10);
        boolean boolean69 = org.apache.commons.lang.time.DateUtils.isSameInstant(date34, date68);
        java.lang.Class<?> wildcardClass70 = date68.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Jan 02 11:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Jan 02 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 02 11:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) '#');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date23, (int) (short) 0);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date25, (int) (byte) 0);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date27, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date31 = org.apache.commons.lang.time.DateUtils.truncate(date27, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 86400000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        java.lang.String[] strArray8 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addWeeks(date11, 100);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Dec 02 00:00:00 CET 1971");
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addMinutes(date3, 2);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date3, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date23, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date21);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date15, (int) (byte) 10);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.add(date37, 0, (int) '#');
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addYears(date50, (int) (short) 10);
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date52);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        boolean boolean62 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date61);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date46);
        boolean boolean64 = org.apache.commons.lang.time.DateUtils.isSameInstant(date15, date46);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date46, 2);
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date66);
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray71);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray71);
        java.lang.String[] strArray76 = new java.lang.String[] { "" };
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date77, (int) (short) 10);
        java.util.Date date82 = org.apache.commons.lang.time.DateUtils.add(date77, 0, (int) '#');
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.addMonths(date82, (int) (short) 10);
        boolean boolean85 = org.apache.commons.lang.time.DateUtils.isSameDay(date73, date82);
        java.util.Date date87 = org.apache.commons.lang.time.DateUtils.addYears(date82, 3600000);
        java.lang.String[] strArray90 = new java.lang.String[] { "" };
        java.util.Date date91 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray90);
        java.util.Date date93 = org.apache.commons.lang.time.DateUtils.addYears(date91, (int) (short) 10);
        boolean boolean94 = org.apache.commons.lang.time.DateUtils.isSameDay(date87, date93);
        boolean boolean95 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date93);
        java.util.Date date97 = org.apache.commons.lang.time.DateUtils.truncate(date11, (int) (short) 10);
        java.util.Date date99 = org.apache.commons.lang.time.DateUtils.addDays(date97, 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date93);
        org.junit.Assert.assertEquals(date93.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(date97);
        org.junit.Assert.assertEquals(date97.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date99);
        org.junit.Assert.assertEquals(date99.toString(), "Sun Jan 11 00:00:00 CET 1970");
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addYears(date24, (int) (short) 10);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.add(date24, 0, (int) '#');
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMonths(date29, (int) (short) 10);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date29);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date29, 3600000);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.add(date34, 0, (int) ' ');
        java.util.Iterator iterator39 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date37, (int) (byte) 1);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (short) 10);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date43, date49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addWeeks(date49, 0);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addMinutes(date49, (int) (short) -1);
        java.util.Iterator iterator56 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date49, 4);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addMinutes(date49, 0);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray61);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addYears(date62, (int) (short) 10);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.add(date62, 0, (int) '#');
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.add(date62, 0, 3);
        boolean boolean71 = org.apache.commons.lang.time.DateUtils.isSameInstant(date49, date70);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date70);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date70);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addWeeks(date70, (-1));
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.truncate(date70, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date79 = org.apache.commons.lang.time.DateUtils.truncate(date70, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator56);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Dec 25 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date34, 6);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addSeconds(date34, 60000);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date40, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addMonths(date40, (-1));
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 00:00:00 CET 7");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 01 16:40:00 CET 1");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Jan 01 16:40:00 CET 1");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 01 16:40:00 CET 1");
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date17, 0);
        java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator(date17, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date17, 2);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date25, 1000);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addYears(date35, (int) (short) 10);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addWeeks(date37, 0);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.add(date37, (int) (byte) 1, 6);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (short) 10);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.add(date47, 0, (int) '#');
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addHours(date52, (int) (byte) -1);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.truncate(date52, (int) (short) 0);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addSeconds(date52, (int) (byte) 1);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addYears(date59, 0);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addSeconds(date59, 1001);
        boolean boolean64 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date63);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addYears(date25, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator68 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date25, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Sep 27 00:00:00 CEST 1990");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Sep 27 16:40:00 CEST 1990");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:16:42 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Sep 27 00:00:00 CEST 1990");
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addDays(date9, 3600000);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addHours(date9, 0);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addMonths(date38, (int) (short) 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Jun 19 00:00:00 CEST 11836");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun May 01 00:00:00 CEST 1988");
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMinutes(date11, (int) (byte) 100);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.truncate(date11, 2);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addWeeks(date11, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date19 = org.apache.commons.lang.time.DateUtils.truncate(date11, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 29 00:00:00 CET 1970");
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date12, (int) (short) 0);
        java.lang.Class<?> wildcardClass32 = date31.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, (-1));
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.round(date36, (int) (byte) 1);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addDays(date36, (int) (short) -1);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addDays(date42, (int) ' ');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addHours(date44, (int) (short) 0);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addMonths(date46, 4);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 31 23:59:00 CET 97");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 31 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Feb 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Feb 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Fri Jun 01 00:00:00 CET 98");
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Iterator iterator59 = org.apache.commons.lang.time.DateUtils.iterator(date12, (int) (byte) 1);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMinutes(date12, (int) (short) 100);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray64);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date71);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.addWeeks(date71, 0);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.add(date71, (int) (byte) 1, 6);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date71, 0);
        java.util.Iterator iterator81 = org.apache.commons.lang.time.DateUtils.iterator(date79, 1);
        boolean boolean82 = org.apache.commons.lang.time.DateUtils.isSameInstant(date61, date79);
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.addSeconds(date79, 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(iterator59);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(iterator81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Sat Jan 01 00:01:40 CET 1");
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.round(date12, 2);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date24);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date18, (int) (byte) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addHours(date18, (int) '#');
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.truncate(date18, (int) (byte) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator14 = org.apache.commons.lang.time.DateUtils.iterator(date12, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray55);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date62);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date71);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date56);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.round(date3, (int) (byte) 0);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.truncate(date3, 1);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addWeeks(date77, (int) (short) 100);
        java.util.Date date81 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date79, 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Thu Dec 02 00:00:00 CET 1971");
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addWeeks(date8, (int) '4');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, (int) 'a');
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 4);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.round(date14, (int) (byte) 10);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addMinutes(date20, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addHours(date20, (int) (byte) 100);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date20, 60000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Nov 09 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Dec 31 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Mon Jan 04 04:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Dec 31 00:01:00 CET 1970");
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date24);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date18, (int) (byte) 10);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addHours(date14, 1);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addYears(date43, (int) (short) 10);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addSeconds(date43, (int) (byte) 0);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addHours(date43, 1001);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date14, date43);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Fri Nov 05 01:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Wed Feb 11 17:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date11, (int) (byte) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date23, (int) (byte) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameInstant(date11, date23);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 4);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray35);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date36, (int) (short) 10);
        boolean boolean39 = org.apache.commons.lang.time.DateUtils.isSameDay(date32, date38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addWeeks(date38, 0);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date38, (int) (byte) 1, 6);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray51);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addYears(date52, (int) (short) 10);
        boolean boolean55 = org.apache.commons.lang.time.DateUtils.isSameDay(date48, date54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addWeeks(date54, 0);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.add(date54, (int) (byte) 1, 6);
        boolean boolean61 = org.apache.commons.lang.time.DateUtils.isSameDay(date38, date60);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.round(date38, (int) (short) 0);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMinutes(date63, 60000);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.lang.String[] strArray72 = new java.lang.String[] { "" };
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray72);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addYears(date73, (int) (short) 10);
        boolean boolean76 = org.apache.commons.lang.time.DateUtils.isSameDay(date69, date75);
        java.lang.String[] strArray81 = new java.lang.String[] { "" };
        java.util.Date date82 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray81);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray81);
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray81);
        boolean boolean85 = org.apache.commons.lang.time.DateUtils.isSameDay(date69, date84);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date84);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameInstant(date28, date84);
        java.util.Date date89 = org.apache.commons.lang.time.DateUtils.addYears(date84, (int) 'a');
        java.util.Date date91 = org.apache.commons.lang.time.DateUtils.addDays(date84, 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 29 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Fri Feb 11 16:00:00 CET 1");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Sat Jan 01 00:00:00 CET 2067");
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Sun Jan 11 00:00:00 CET 1970");
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date3, (int) (byte) -1);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addWeeks(date7, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date11 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Jan 07 23:59:59 CET 1970");
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date3, 4);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, 3);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date3, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date26, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1974");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Mon Jan 01 00:00:00 CET 1973");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addHours(date15, 3600000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMinutes(date17, 0);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate(date19, 2);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date21, (int) (short) 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Sep 08 01:00:00 CEST 2396");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Sep 08 01:00:00 CEST 2396");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Sep 01 00:00:00 CEST 2396");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Sep 01 00:00:00 CEST 2396");
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addWeeks(date8, (int) '4');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, (int) 'a');
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 4);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.round(date14, (int) (byte) 10);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addMinutes(date20, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMonths(date22, 4);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Nov 09 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Dec 31 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Fri Apr 30 00:10:00 CET 1971");
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date48);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date57);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date42);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date74, (int) (short) 10);
        boolean boolean77 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date74);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date74, 3600000);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray82);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addYears(date83, (int) (short) 10);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date79, date85);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date85);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date42);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date42, 1000);
        java.util.Date date92 = org.apache.commons.lang.time.DateUtils.addMonths(date90, (-1));
        java.util.Date date94 = org.apache.commons.lang.time.DateUtils.addWeeks(date92, 86400000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date96 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date92, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Mon Dec 01 00:00:01 CET 1969");
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Mon Jan 28 00:00:01 CET 1657856");
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Iterator iterator16 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date9, 4);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, 0);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.add(date22, 0, (int) '#');
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date22, 0, 3);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date9, 3);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addSeconds(date33, 4);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Jan 01 00:00:00 CET 1983");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Jan 01 00:00:04 CET 1983");
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round(date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addWeeks(date29, (int) 'a');
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addSeconds(date31, 0);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMinutes(date31, 10);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addMonths(date31, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator39 = org.apache.commons.lang.time.DateUtils.iterator(date37, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 97 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Nov 11 00:10:00 CET 1971");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Nov 11 00:00:00 CET 1971");
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date27, (int) (byte) 10);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        boolean boolean40 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addWeeks(date39, 0);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.add(date39, (int) (byte) 1, 6);
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray48);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addWeeks(date55, 0);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.add(date55, (int) (byte) 1, 6);
        boolean boolean62 = org.apache.commons.lang.time.DateUtils.isSameDay(date39, date61);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.round(date39, (int) (short) 0);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addYears(date64, (int) 'a');
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.addMinutes(date66, 6);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.addYears(date68, 86400000);
        boolean boolean71 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date68);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date27, 5);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addMinutes(date73, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Mon Jan 01 00:06:00 CET 98");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Wed Jan 01 00:06:00 CET 86400098");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date17, 0, (int) '#');
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray25);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray29);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addYears(date30, (int) (short) 10);
        boolean boolean33 = org.apache.commons.lang.time.DateUtils.isSameDay(date26, date32);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        boolean boolean42 = org.apache.commons.lang.time.DateUtils.isSameDay(date26, date41);
        boolean boolean43 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date26);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.add(date53, 0, (int) '#');
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addMonths(date58, (int) (short) 10);
        boolean boolean61 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date58);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addYears(date58, 3600000);
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addYears(date67, (int) (short) 10);
        boolean boolean70 = org.apache.commons.lang.time.DateUtils.isSameDay(date63, date69);
        boolean boolean71 = org.apache.commons.lang.time.DateUtils.isSameDay(date26, date69);
        java.util.Iterator iterator73 = org.apache.commons.lang.time.DateUtils.iterator(date26, (int) (byte) 1);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addMinutes(date26, (int) (short) 100);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addDays(date26, 1000);
        boolean boolean78 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date77);
        java.util.Date date80 = org.apache.commons.lang.time.DateUtils.addWeeks(date13, 100);
        java.lang.Class<?> wildcardClass81 = date80.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(iterator73);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Wed Sep 27 00:00:00 CET 1972");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Tue Dec 01 00:00:00 CET 1981");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMonths(date36, (int) (short) 10);
        boolean boolean39 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date36);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addMonths(date36, (int) (byte) -1);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date36, 0, 10);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addDays(date44, 60000);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date21, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addHours(date21, 3600000);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date21, (int) (byte) 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Mon Oct 06 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 29 00:00:00 CET 1970");
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator19 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date9, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 3600000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date34, 2);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addDays(date34, (int) 'a');
        java.util.Iterator iterator58 = org.apache.commons.lang.time.DateUtils.iterator(date56, 3);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addSeconds(date56, 100);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addMonths(date60, (int) (short) 10);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addSeconds(date60, 86400000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator58);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Apr 08 00:01:40 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Mon Feb 08 00:01:40 CET 1971");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Tue Jan 02 00:01:40 CET 1973");
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.round(date12, 2);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMinutes(date12, 3600000);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date16, (int) '#');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Nov 05 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Nov 05 00:00:00 CET 1986");
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, 1);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMonths(date9, (int) (short) 100);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addDays(date18, (int) (byte) 10);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date18, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date24 = org.apache.commons.lang.time.DateUtils.round(date18, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:01:00 CET 1980");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun May 01 00:00:00 CEST 1988");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Wed May 11 00:00:00 CEST 1988");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun May 01 00:00:00 CEST 1988");
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "hi!" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date4, 3600000);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.addHours(date6, 3600000);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date8, 0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Mon Sep 08 02:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMinutes(date5, (int) (short) 100);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 1001);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 2, (int) 'a');
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.round(date19, 1);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date26, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Mar 09 01:40:00 CET 1989");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Feb 01 01:40:00 CET 1978");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Mar 12 00:00:00 CET 1970");
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addHours(date3, (-1));
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date10, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addHours(date10, (int) (byte) -1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 22:00:00 CET 1969");
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, (int) (short) 10);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMonths(date24, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator33 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date24, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 32 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Mon Jun 01 00:00:00 CET 1970");
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        boolean boolean24 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date28, 0, (int) '#');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addHours(date28, (-1));
        boolean boolean36 = org.apache.commons.lang.time.DateUtils.isSameInstant(date23, date28);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date11, date23);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addDays(date11, (int) '#');
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.add(date39, (int) (short) 0, (int) (byte) 1);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addMinutes(date42, 1000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Feb 05 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Feb 05 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Feb 05 16:40:00 CET 1970");
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.round(date34, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) '#');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date23, (int) (short) 0);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date23, 100);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date23, (int) (short) 1, (int) (byte) 1);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.truncate(date23, 5);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator36 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) 6, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 6");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Jan 02 11:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Jan 02 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Fri Jan 02 11:00:06 CET 1970");
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addHours(date22, 3600000);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addMinutes(date26, (int) (byte) 1);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date26, 2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Mon Sep 08 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Mon Sep 08 01:01:00 CEST 2380");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Sep 08 01:00:00 CEST 2382");
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.add(date9, 5, 10);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addMinutes(date62, (int) (byte) 10);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addMinutes(date62, (int) (byte) 0);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.add(date62, 2, 0);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addMinutes(date62, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator73 = org.apache.commons.lang.time.DateUtils.iterator(date71, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 97 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Jan 11 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sun Jan 11 00:10:00 CET 1970");
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date59, 60000);
        java.util.Iterator iterator63 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date59, 6);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addWeeks(date59, (int) (byte) 100);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addYears(date65, (int) (byte) 0);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addMinutes(date65, 60000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator71 = org.apache.commons.lang.time.DateUtils.iterator(date65, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 52 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 10:01:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator63);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Dec 02 10:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Dec 02 10:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 13 02:00:00 CET 1972");
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date21);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date15, (int) (byte) 10);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.add(date37, 0, (int) '#');
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addYears(date50, (int) (short) 10);
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date52);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        boolean boolean62 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date61);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date46);
        boolean boolean64 = org.apache.commons.lang.time.DateUtils.isSameInstant(date15, date46);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date46, 2);
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date66);
        java.lang.String[] strArray70 = new java.lang.String[] { "" };
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray70);
        java.lang.String[] strArray74 = new java.lang.String[] { "" };
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray74);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addYears(date75, (int) (short) 10);
        boolean boolean78 = org.apache.commons.lang.time.DateUtils.isSameDay(date71, date77);
        java.lang.String[] strArray83 = new java.lang.String[] { "" };
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray83);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray83);
        java.util.Date date86 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray83);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date71, date86);
        java.util.Date date89 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date71, (int) (byte) 10);
        java.util.Date date91 = org.apache.commons.lang.time.DateUtils.addHours(date71, (int) '#');
        java.util.Date date93 = org.apache.commons.lang.time.DateUtils.addMinutes(date91, (int) (short) 0);
        java.util.Date date95 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date93, (int) (byte) 0);
        boolean boolean96 = org.apache.commons.lang.time.DateUtils.isSameDay(date66, date93);
        java.util.Date date98 = org.apache.commons.lang.time.DateUtils.addDays(date93, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date93);
        org.junit.Assert.assertEquals(date93.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date95);
        org.junit.Assert.assertEquals(date95.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(date98);
        org.junit.Assert.assertEquals(date98.toString(), "Mon Jan 12 11:00:00 CET 1970");
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) '#');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date3, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date25, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date25, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addWeeks(date59, (int) (short) 10);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addMonths(date61, 60000);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.add(date63, (int) (short) 10, (int) (byte) -1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Mar 12 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Mon Mar 12 10:00:00 CET 6970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Mon Mar 12 09:00:00 CET 6970");
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addHours(date14, 4);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) (short) 0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 04:00:00 CET 1970");
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date24);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date18, (int) (byte) 10);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.truncate(date36, (int) (short) 10);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addYears(date43, (int) (short) 10);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.add(date43, 0, (int) '#');
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addMonths(date48, (int) (short) 10);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addDays(date48, (int) 'a');
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addWeeks(date48, (int) '4');
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addWeeks(date54, (int) 'a');
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameInstant(date39, date56);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date56, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date61 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date56, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Nov 09 00:00:00 CET 1972");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Nov 09 00:00:00 CET 1972");
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date5, 6);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date5, 1000);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addHours(date5, (int) (byte) 10);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addMonths(date65, 3);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Tue Jan 01 00:00:01 CET 1980");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Tue Jan 01 10:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Tue Apr 01 10:00:00 CET 1980");
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 2);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addHours(date61, 3600000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator65 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date63, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Mon Sep 08 01:00:02 CEST 2380");
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.add(date9, 5, 10);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addMinutes(date62, (int) (byte) 10);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addMinutes(date62, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator68 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) (byte) 0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Jan 11 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sun Jan 11 00:00:00 CET 1970");
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addHours(date3, (-1));
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date10, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMonths(date12, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Jan 31 23:00:00 CET 1970");
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray55);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date62);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date71);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date56);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addSeconds(date56, (int) (byte) 1);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date56, 5);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addMinutes(date56, (int) '#');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:35:00 CET 1970");
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (byte) 1);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date13, (int) (short) -1);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date28, 3);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.round(date30, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 31 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Feb 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addSeconds(date21, 86400000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date23, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 05 00:00:00 CET 1972");
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date21, (int) (short) 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date27 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) (short) -1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round -1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 28 23:59:59 CET 1970");
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addWeeks(date0, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        boolean boolean24 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date28, 0, (int) '#');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addHours(date28, (-1));
        boolean boolean36 = org.apache.commons.lang.time.DateUtils.isSameInstant(date23, date28);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date11, date23);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addDays(date11, (int) '#');
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addYears(date43, (int) (short) 10);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.add(date43, 0, (int) '#');
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addMonths(date48, (int) (short) 10);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addDays(date48, (int) 'a');
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date39, date52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addMonths(date52, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Feb 05 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Mon Feb 08 00:00:00 CET 1971");
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date24);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addDays(date3, 10);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date28, (int) (short) 0, 1);
        java.lang.Class<?> wildcardClass32 = date31.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addYears(date18, (int) (byte) -1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date24, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date30, 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date30, (int) (byte) 1, 6);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addYears(date40, (int) (short) 10);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.add(date40, 0, (int) '#');
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date30, date45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addHours(date45, (int) (byte) -1);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date48);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date48, 3600000);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addDays(date51, (int) (short) 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Apr 11 00:00:00 CET 1970");
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date24);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addDays(date3, 10);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date28, (int) (short) 0, 1);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date28, (int) (short) 1, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Fri Jan 11 00:00:00 CET 1980");
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date24);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date18, (int) (byte) 10);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addHours(date14, 1);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (-1));
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addSeconds(date14, (int) (byte) 1);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addDays(date14, (-1));
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addDays(date45, 5);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Fri Nov 05 01:00:00 CET 1976");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Oct 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Fri Nov 05 00:00:01 CET 1976");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Nov 04 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Tue Nov 09 00:00:00 CET 1976");
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMinutes(date19, (int) ' ');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.round(date19, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator27 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date25, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 97 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 01 00:32:00 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addHours(date29, 0);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMonths(date29, 3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator35 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) 3, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 3");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Fri Apr 01 00:00:00 CET 1");
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date9, 60000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Jan 01 00:00:00 CET 6980");
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addHours(date22, 3600000);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addMinutes(date26, (int) (byte) 1);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addDays(date28, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date32 = org.apache.commons.lang.time.DateUtils.truncate(date30, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Mon Sep 08 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Mon Sep 08 01:01:00 CEST 2380");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Sep 07 01:01:00 CEST 2380");
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.truncate(date29, 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addHours(date31, 3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator35 = org.apache.commons.lang.time.DateUtils.iterator(date31, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Jan 01 03:00:00 CET 1");
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date11, (int) (byte) 0);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.add(date11, 0, 10);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addSeconds(date18, (int) ' ');
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addYears(date24, (int) (short) 10);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.add(date24, 0, (int) '#');
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.add(date24, 0, 3);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addMonths(date24, (int) (byte) 1);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, (int) (short) -1);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.add(date34, (int) (short) 1, 100);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date49, 3);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameDay(date39, date51);
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameInstant(date18, date51);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date51, (-1));
        java.util.Date date56 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date51, date56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:32 CET 1970");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Jan 31 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Feb 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Wed Jan 01 00:00:00 CET 1969");
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        java.util.Date date0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.addYears(date4, (int) (short) 10);
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray9);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray13);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date10, date16);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date10, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date10, (int) (byte) 10);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date32, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.add(date32, 0, (int) '#');
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray40);
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray44);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addYears(date45, (int) (short) 10);
        boolean boolean48 = org.apache.commons.lang.time.DateUtils.isSameDay(date41, date47);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date41, date56);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date32, date41);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date10, date41);
        boolean boolean60 = org.apache.commons.lang.time.DateUtils.isSameInstant(date6, date10);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.add(date10, 5, 10);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMinutes(date63, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = org.apache.commons.lang.time.DateUtils.isSameDay(date0, date65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sun Jan 11 00:10:00 CET 1970");
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) 'a');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addDays(date23, (int) (byte) 0);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (byte) -1);
        java.lang.Class<?> wildcardClass28 = date27.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Nov 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.round(date12, 2);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addHours(date12, 0);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date12, 5);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date12, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, (int) (short) 10);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, (int) (short) 1);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date24, (int) (short) 1, 4);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addDays(date24, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1974");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMonths(date3, 1);
        java.util.Iterator iterator25 = org.apache.commons.lang.time.DateUtils.iterator(date23, 1);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.round(date23, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMinutes(date5, (int) (short) 100);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 1001);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.round(date19, 2);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.add(date19, 86400000, (int) (byte) 0);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.add(date19, (int) (byte) 0, 86400000);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Mar 09 01:40:00 CET 1989");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 01:40:00 CET 1970");
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date3, (int) (byte) -1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.add(date3, (int) ' ', (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addYears(date15, (int) (short) 10);
        boolean boolean18 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date17);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        boolean boolean27 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date26);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date11, (int) (byte) 10);
        boolean boolean30 = org.apache.commons.lang.time.DateUtils.isSameDay(date7, date29);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.truncate(date7, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray55);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date62);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date71);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date56);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.round(date3, (int) (byte) 0);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.truncate(date3, 1);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addWeeks(date77, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator81 = org.apache.commons.lang.time.DateUtils.iterator(date79, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Dec 02 00:00:00 CET 1971");
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round(date14, 0);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date14, 3600000);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date23, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate(date23, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 86400000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Sep 08 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon Sep 08 01:00:00 CEST 2380");
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round(date14, 0);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date14, 3600000);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addDays(date23, (-1));
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date23, (int) (short) 1, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date28, (int) ' ', 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Sep 08 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Sep 07 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Sep 08 01:00:00 CEST 3381");
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (short) 10, 2);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addDays(date25, (int) (short) 1);
        java.lang.Class<?> wildcardClass32 = date25.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator34 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) wildcardClass32, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on class java.util.Date");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Fri Jan 02 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, (int) (short) -1);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addHours(date34, 1);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addSeconds(date34, (int) (byte) -1);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.add(date40, 5, (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date45 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date43, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Fri Dec 31 23:59:00 CET 1");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 01:00:00 CET 1");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Fri Dec 31 23:59:59 CET 1");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Dec 30 23:59:59 CET 1");
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round(date14, 0);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date14, 3600000);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date14, 5);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.round(date25, (int) (short) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addYears(date35, (int) (short) 10);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addWeeks(date37, 0);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.add(date37, (int) (byte) 1, 6);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addSeconds(date43, 86400000);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.add(date45, 3, (int) '4');
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.truncate(date48, (int) (short) 10);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addWeeks(date48, 1001);
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date52);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Sep 08 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:05:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Sep 26 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Tue Sep 26 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Dec 02 00:00:00 CET 2008");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) 'a');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.truncate(date3, 1001);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, (int) (byte) 0);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date27, 86400000);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date27, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator33 = org.apache.commons.lang.time.DateUtils.iterator(date31, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Fri Jan 02 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Fri Jan 01 00:00:00 CET 1971");
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addSeconds(date7, 2);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addMonths(date7, 2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Mar 01 00:00:00 CET 1970");
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date17, 0);
        java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator(date17, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date17, 2);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date25, 1000);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addYears(date35, (int) (short) 10);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addWeeks(date37, 0);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.add(date37, (int) (byte) 1, 6);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (short) 10);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.add(date47, 0, (int) '#');
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addHours(date52, (int) (byte) -1);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.truncate(date52, (int) (short) 0);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addSeconds(date52, (int) (byte) 1);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addYears(date59, 0);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addSeconds(date59, 1001);
        boolean boolean64 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date63);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date63, (int) (byte) 10);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.addHours(date63, 86400000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Sep 27 00:00:00 CEST 1990");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Sep 27 16:40:00 CEST 1990");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:16:42 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Tue Jun 20 01:16:42 CEST 11826");
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMonths(date27, 3);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Apr 01 00:02:00 CET 1970");
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        java.util.Date date0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray7);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addYears(date8, (int) (short) 10);
        boolean boolean11 = org.apache.commons.lang.time.DateUtils.isSameDay(date4, date10);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addWeeks(date10, 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date10, (int) (byte) 1, 6);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addYears(date24, (int) (short) 10);
        boolean boolean27 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date26);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addWeeks(date26, 0);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.add(date26, (int) (byte) 1, 6);
        boolean boolean33 = org.apache.commons.lang.time.DateUtils.isSameDay(date10, date32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.round(date10, (int) (short) 0);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addMinutes(date35, 60000);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date35, 4);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addWeeks(date39, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = org.apache.commons.lang.time.DateUtils.isSameInstant(date0, date39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Fri Feb 11 16:00:00 CET 1");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 5");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 5");
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date17, 0);
        java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator(date17, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date17, 2);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date25, 3, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date25, 4);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addDays(date25, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Sep 27 00:00:00 CEST 1990");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Aug 06 00:00:00 CEST 1992");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Sep 27 00:00:00 CET 1994");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Sep 27 00:00:00 CEST 1990");
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addYears(date18, (int) (byte) -1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date24, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date30, 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date30, (int) (byte) 1, 6);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addYears(date40, (int) (short) 10);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.add(date40, 0, (int) '#');
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date30, date45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addHours(date45, (int) (byte) -1);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date48);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date20, (int) (short) 10);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date51, (int) (byte) 10);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addMinutes(date53, 86400000);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray62);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addYears(date63, (int) (short) 10);
        boolean boolean66 = org.apache.commons.lang.time.DateUtils.isSameDay(date59, date65);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.addWeeks(date65, 0);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.add(date65, (int) (byte) 1, 6);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.addHours(date65, (int) ' ');
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addYears(date65, (int) (short) 100);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addMonths(date65, (int) (byte) 10);
        boolean boolean78 = org.apache.commons.lang.time.DateUtils.isSameInstant(date53, date65);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Mon Jul 21 01:00:00 CEST 2397");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Mon Jan 01 00:00:00 CET 2080");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sat Nov 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addWeeks(date21, 0);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.add(date21, (int) (byte) 1, 6);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, 86400000);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date29, (-1));
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameInstant(date11, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.truncate(date11, (int) (byte) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 1000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:01 CET 1970");
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date34, 5);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addWeeks(date54, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator58 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date56, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 52 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) 'a');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.truncate(date3, 1001);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, (int) (byte) 0);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date27, 86400000);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addDays(date29, (-1));
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMinutes(date29, 2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Fri Jan 02 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Fri Jan 02 00:02:00 CET 1970");
    }
}


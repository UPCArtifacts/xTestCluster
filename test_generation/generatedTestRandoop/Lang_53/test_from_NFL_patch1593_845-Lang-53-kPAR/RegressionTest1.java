import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray7);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray7);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray7);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray7);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray7);
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unable to parse the date: hi!");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.add(date31, 0, 3);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addMinutes(date39, (int) (byte) 100);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.truncate(date39, 2);
        boolean boolean44 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date43, (int) '#');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Fri Dec 01 00:00:00 CET 1972");
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date24);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date18, (int) (byte) 10);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date14, (int) (short) 10);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.truncate(date14, 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator43 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 10");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Fri Nov 05 00:00:00 CET 1976");
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) (byte) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on -1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, (int) (byte) 10);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addSeconds(date18, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator22 = org.apache.commons.lang.time.DateUtils.iterator(date18, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 52 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Mar 12 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Mar 12 00:00:00 CET 1970");
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, (int) (byte) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addHours(date24, 0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Mar 12 10:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Mar 12 00:00:00 CET 3601970");
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date18 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date13, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date34, 6);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addSeconds(date34, 60000);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addWeeks(date40, (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator44 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) (-1), 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on -1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 00:00:00 CET 7");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 01 16:40:00 CET 1");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Dec 25 16:40:00 CET 1");
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addSeconds(date21, (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator25 = org.apache.commons.lang.time.DateUtils.iterator(date23, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 3600000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 31 23:59:59 CET 2069");
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(date0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate(obj0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date21, (int) (short) 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMonths(date21, (int) 'a');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 02 00:00:00 CET 1980");
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date12 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) strArray8, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate [Ljava.lang.String;@6ac92d6b");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        boolean boolean24 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date28, 0, (int) '#');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addHours(date28, (-1));
        boolean boolean36 = org.apache.commons.lang.time.DateUtils.isSameInstant(date23, date28);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date11, date23);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray40);
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray44);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addYears(date45, (int) (short) 10);
        boolean boolean48 = org.apache.commons.lang.time.DateUtils.isSameDay(date41, date47);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.add(date41, (int) (short) 1, (int) (byte) 0);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.add(date51, (int) (short) 1, (int) (byte) 100);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addMinutes(date54, 86400000);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addYears(date56, (int) (byte) -1);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date23, date56);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addYears(date8, 60000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date8, (int) (byte) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 61970");
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date61 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) (byte) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 10");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addSeconds(date21, 86400000);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMonths(date23, 60000);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date25, 0);
        java.lang.Class<?> wildcardClass28 = date25.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 05 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Dec 05 00:00:00 CET 6972");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addDays(date5, 10);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addYears(date11, (int) (short) 10);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date17, 0, (int) '#');
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date22);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addWeeks(date22, 4);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date29, (int) (short) 0);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addSeconds(date31, (int) (short) -1);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, (int) '#', 0);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date31);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Jan 11 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.lang.Class<?> wildcardClass20 = date14.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addYears(date0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        java.lang.Object obj0 = new java.lang.Object();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(obj0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on java.lang.Object@782d3612");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator10 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date8, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (byte) 1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (byte) 10, 1000);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) (byte) 0);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addMinutes(date18, (int) (short) 1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date18, 1);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMonths(date22, 3600000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Feb 11 16:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 301970");
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.add(date13, 0, (int) '#');
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.add(date13, 0, 3);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMinutes(date21, (int) (byte) 100);
        boolean boolean24 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date9, 1);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, (int) '4');
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Dec 31 00:00:00 CET 1970");
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray9);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) strArray9, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate [Ljava.lang.String;@8efd1c7");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date34, 6);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date48);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addWeeks(date48, 0);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.add(date48, (int) (byte) 1, 6);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray61);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addYears(date62, (int) (short) 10);
        boolean boolean65 = org.apache.commons.lang.time.DateUtils.isSameDay(date58, date64);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addWeeks(date64, 0);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.add(date64, (int) (byte) 1, 6);
        boolean boolean71 = org.apache.commons.lang.time.DateUtils.isSameDay(date48, date70);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.round(date48, (int) (short) 0);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addMinutes(date73, 60000);
        java.lang.String[] strArray78 = new java.lang.String[] { "" };
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray78);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray82);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addYears(date83, (int) (short) 10);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date79, date85);
        java.lang.String[] strArray91 = new java.lang.String[] { "" };
        java.util.Date date92 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray91);
        java.util.Date date93 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray91);
        java.util.Date date94 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray91);
        boolean boolean95 = org.apache.commons.lang.time.DateUtils.isSameDay(date79, date94);
        boolean boolean96 = org.apache.commons.lang.time.DateUtils.isSameDay(date75, date94);
        boolean boolean97 = org.apache.commons.lang.time.DateUtils.isSameInstant(date34, date94);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator99 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date34, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 00:00:00 CET 7");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Fri Feb 11 16:00:00 CET 1");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date93);
        org.junit.Assert.assertEquals(date93.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date40 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date38, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Mon Jan 01 00:06:00 CET 98");
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) strArray6, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round [Ljava.lang.String;@24eb7ec6");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMinutes(date11, (int) (byte) 100);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.truncate(date11, 2);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date15, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addWeeks(date36, 86400000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Mon Feb 27 00:00:00 CET 1655984");
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addSeconds(date24, 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date31, 0);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addYears(date43, (int) (short) 10);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.add(date43, 0, (int) '#');
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addMonths(date48, (int) (short) 10);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date39, date48);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date48, (int) (short) 1);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date48, (int) (short) 100);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date48);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addYears(date48, 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Jan 01 00:00:00 CET 2070");
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) '#');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date23, (int) (short) 0);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date23, 100);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date23, (int) (short) 1, (int) (byte) 1);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, (int) (short) 100);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addWeeks(date32, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date37 = org.apache.commons.lang.time.DateUtils.add(date34, (int) (byte) -1, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Jan 02 11:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Jan 02 11:01:40 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Fri Dec 26 11:01:40 CET 1969");
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date5, 2, 1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addSeconds(date10, 2);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addWeeks(date12, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Mon Dec 31 23:59:59 CET 1979");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:01 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Jan 08 00:00:01 CET 1980");
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date34, 5);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator58 = org.apache.commons.lang.time.DateUtils.iterator(date34, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 32 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.add(date21, 0, (int) '#');
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.add(date21, 0, 3);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        boolean boolean40 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date39);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date48);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date33, (int) (byte) 10);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addYears(date55, (int) (short) 10);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.add(date55, 0, (int) '#');
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray67);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.addYears(date68, (int) (short) 10);
        boolean boolean71 = org.apache.commons.lang.time.DateUtils.isSameDay(date64, date70);
        java.lang.String[] strArray76 = new java.lang.String[] { "" };
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        boolean boolean80 = org.apache.commons.lang.time.DateUtils.isSameDay(date64, date79);
        boolean boolean81 = org.apache.commons.lang.time.DateUtils.isSameDay(date55, date64);
        boolean boolean82 = org.apache.commons.lang.time.DateUtils.isSameInstant(date33, date64);
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date64, 2);
        boolean boolean85 = org.apache.commons.lang.time.DateUtils.isSameDay(date29, date84);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date84);
        java.lang.Class<?> wildcardClass87 = date3.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date34, 6);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addSeconds(date38, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator42 = org.apache.commons.lang.time.DateUtils.iterator(date40, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 00:00:00 CET 7");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 01 00:00:00 CET 7");
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date21, date25);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMinutes(date21, 6);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.add(date37, 0, (int) '#');
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addHours(date42, (int) (byte) -1);
        boolean boolean45 = org.apache.commons.lang.time.DateUtils.isSameDay(date21, date44);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date47 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date44, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 1000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Mar 11 00:06:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addDays(date27, 60000);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.round(date27, 0);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addDays(date31, 1);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date33, (int) 'a');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Apr 10 23:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Jan 02 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Jan 02 00:00:00 CET 1");
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, (int) (byte) 10);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addSeconds(date16, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Mar 12 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date9, (int) (short) 10);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addWeeks(date61, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date65 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date61, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Aug 13 00:00:00 CET 1970");
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date59, 60000);
        java.util.Iterator iterator63 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date59, 6);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addWeeks(date59, (int) (byte) 100);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addYears(date65, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator69 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date67, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 10:01:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator63);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Dec 02 10:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Dec 02 10:00:00 CET 1971");
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date24);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date18, (int) (byte) 10);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date41 = org.apache.commons.lang.time.DateUtils.truncate(date36, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3600000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:10:00 CET 1970");
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date48);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date57);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date42);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date74, (int) (short) 10);
        boolean boolean77 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date74);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date74, 3600000);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray82);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addYears(date83, (int) (short) 10);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date79, date85);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date85);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date42);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.addDays(date42, (int) (byte) 100);
        java.util.Date date92 = org.apache.commons.lang.time.DateUtils.addYears(date90, (-1));
        java.util.Date date94 = org.apache.commons.lang.time.DateUtils.addDays(date92, 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Sat Apr 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Fri Apr 11 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Mon Apr 21 00:00:00 CET 1969");
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.add(date9, 5, 10);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addMinutes(date62, (int) (byte) 10);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addMinutes(date62, (int) (byte) 0);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.add(date62, 2, 0);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.round(date69, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Jan 11 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addSeconds(date21, (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator25 = org.apache.commons.lang.time.DateUtils.iterator(date21, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 97 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 31 23:59:59 CET 2069");
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (short) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addSeconds(date22, 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addDays(date22, (int) 'a');
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addDays(date30, 10);
        java.util.Iterator iterator34 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date32, 2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Apr 18 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator34);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date34, 6);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.round(date38, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator42 = org.apache.commons.lang.time.DateUtils.iterator(date40, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 60000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 00:00:00 CET 7");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 01 00:00:00 CET 7");
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date34, 6);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.round(date38, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date42 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date38, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 60000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 00:00:00 CET 7");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 01 00:00:00 CET 7");
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        boolean boolean24 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date28, 0, (int) '#');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addHours(date28, (-1));
        boolean boolean36 = org.apache.commons.lang.time.DateUtils.isSameInstant(date23, date28);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date11, date23);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addDays(date11, (int) '#');
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.add(date39, (int) (short) 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date44 = org.apache.commons.lang.time.DateUtils.round(date39, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Feb 05 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Feb 05 00:00:00 CET 1970");
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMinutes(date29, 2);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMonths(date31, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date35 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) (byte) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Feb 01 00:02:00 CET 1970");
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date12, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date64 = org.apache.commons.lang.time.DateUtils.add(date61, 60000, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray55);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date62);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date71);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date56);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.round(date3, (int) (byte) 0);
        java.lang.Class<?> wildcardClass76 = date3.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date24);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date18, (int) (byte) 10);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date41 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date36, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:10:00 CET 1970");
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.round(date0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (byte) 100);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addDays(date23, 1000);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date25, 3600000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Mar 11 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon Dec 05 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Fri Aug 13 01:00:00 CEST 2483");
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date24);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date18, (int) (byte) 10);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date36);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator39 = org.apache.commons.lang.time.DateUtils.iterator(date36, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date34, 6);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.round(date38, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date42 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) 1001, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 1001");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 00:00:00 CET 7");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 01 00:00:00 CET 7");
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addYears(date24, 3600000);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray29);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) (short) 10);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameDay(date30, date36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addWeeks(date36, 0);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.add(date36, (int) (byte) 1, 6);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.add(date46, 0, (int) '#');
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameDay(date36, date51);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addMinutes(date51, 2);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date54, (int) (byte) 10);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date26, date56);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date26, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Apr 11 00:00:00 CEST 3602134");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Apr 11 00:00:00 CEST 3602134");
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Iterator iterator29 = org.apache.commons.lang.time.DateUtils.iterator(date27, 5);
        java.lang.Class<?> wildcardClass30 = date27.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(iterator29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) 2, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 2");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addWeeks(date0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMonths(date12, 1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Feb 01 00:00:00 CET 1990");
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date17, 0);
        java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator(date17, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date17, 2);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date25, 1000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) 1000, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 1000");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Sep 27 00:00:00 CEST 1990");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Sep 27 16:40:00 CEST 1990");
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray55);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date62);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date71);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date56);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addHours(date56, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date77 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date56, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 01:00:00 CET 1970");
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addSeconds(date24, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date33 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date31, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:01 CET 1970");
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        boolean boolean24 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date28, 0, (int) '#');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addHours(date28, (-1));
        boolean boolean36 = org.apache.commons.lang.time.DateUtils.isSameInstant(date23, date28);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date11, date23);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addDays(date11, (int) '#');
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addYears(date43, (int) (short) 10);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.add(date43, 0, (int) '#');
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addMonths(date48, (int) (short) 10);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addDays(date48, (int) 'a');
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date39, date52);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator55 = org.apache.commons.lang.time.DateUtils.iterator(date39, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 52 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Feb 05 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.addSeconds(date6, 1001);
        java.util.Date date9 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date8, date9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:16:41 CET 1970");
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, (-1));
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addYears(date42, (int) (short) 10);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.add(date42, 0, (int) '#');
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addMonths(date47, (int) (short) 10);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addDays(date47, (int) 'a');
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date51, (int) (byte) 1);
        boolean boolean54 = org.apache.commons.lang.time.DateUtils.isSameInstant(date38, date53);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator56 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date53, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 31 23:59:00 CET 97");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (short) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addSeconds(date26, (int) 'a');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Nov 01 00:01:37 CET 1970");
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addYears(date18, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addYears(date20, 3);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Apr 12 01:00:00 CEST 2236");
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date12, (int) (short) 10);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addMonths(date61, 10);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addSeconds(date61, 3);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:03 CET 1970");
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray13);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.add(date14, 0, (int) '#');
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addHours(date14, (-1));
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date14);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addSeconds(date14, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator26 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) (short) 1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:01 CET 1970");
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date24, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date33 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date24, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:01 CET 1970");
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date34, 5);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addMinutes(date54, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator58 = org.apache.commons.lang.time.DateUtils.iterator(date54, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:32:00 CET 1970");
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addMonths(date0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Iterator iterator12 = org.apache.commons.lang.time.DateUtils.iterator(date8, (int) (byte) 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addYears(date20, (int) (short) 10);
        boolean boolean23 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addWeeks(date22, 0);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (byte) 1, 6);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addHours(date22, (int) ' ');
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameInstant(date8, date22);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMinutes(date22, 6);
        java.lang.Class<?> wildcardClass34 = date33.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:06:00 CET 1980");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, (int) (byte) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Mar 12 10:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Mar 12 00:10:00 CET 3601970");
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addSeconds(date21, 86400000);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, 6);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addWeeks(date23, (int) (short) 0);
        java.lang.Class<?> wildcardClass28 = date23.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 05 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Dec 05 00:00:00 CET 1978");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Dec 05 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date28 = org.apache.commons.lang.time.DateUtils.round(date26, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 86400000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Mar 12 00:35:00 CET 3601970");
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (short) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addSeconds(date22, 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addDays(date22, (int) 'a');
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) '4');
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date22, (-1));
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date38 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date36, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 01 00:00:00 CET 2022");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Tue Jan 01 00:00:00 CET 1980");
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addSeconds(date21, 86400000);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMonths(date23, 60000);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray29);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray29);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addYears(date35, (int) (short) 10);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.add(date35, 0, (int) '#');
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addMonths(date40, (int) (short) 10);
        boolean boolean43 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addYears(date40, 3600000);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date45, (int) (short) 0);
        boolean boolean48 = org.apache.commons.lang.time.DateUtils.isSameInstant(date23, date47);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addDays(date47, 86400000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 05 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Dec 05 00:00:00 CET 6972");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Fri Mar 02 00:00:00 CET 3838525");
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date48);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date57);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date42);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date74, (int) (short) 10);
        boolean boolean77 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date74);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date74, 3600000);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray82);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addYears(date83, (int) (short) 10);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date79, date85);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date85);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date42);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date42, 1000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date93 = org.apache.commons.lang.time.DateUtils.add(date42, (-1), 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Thu Jan 01 00:00:01 CET 1970");
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMinutes(date29, 1000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 16:41:59 CET 1970");
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMonths(date3, 2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Mar 01 00:00:00 CET 1970");
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addHours(date15, 3600000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMinutes(date17, 0);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, 86400000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Sep 08 01:00:00 CEST 2396");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Sep 08 01:00:00 CEST 2396");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Sep 08 01:00:00 CEST 2396");
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 3);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addHours(date14, 4);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.truncate(date26, 0);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addWeeks(date28, (int) ' ');
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date28, 0, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Aug 13 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray7);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date11 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) "", (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round ");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 3600000);
        java.lang.Class<?> wildcardClass12 = date11.getClass();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Apr 04 00:10:00 CEST 70965");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addWeeks(date8, (int) '4');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, (int) 'a');
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 4);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addYears(date26, (int) (short) 10);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date22, date28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addWeeks(date28, 0);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date28, (int) (byte) 1, 6);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addYears(date42, (int) (short) 10);
        boolean boolean45 = org.apache.commons.lang.time.DateUtils.isSameDay(date38, date44);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addWeeks(date44, 0);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.add(date44, (int) (byte) 1, 6);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date28, date50);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.round(date28, (int) (short) 0);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) 'a');
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addMinutes(date55, 6);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date18, date55);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Nov 09 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Mon Jan 01 00:06:00 CET 98");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, (int) (byte) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addDays(date24, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang.time.DateUtils.round(date24, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Mar 22 00:00:00 CET 3601970");
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) 0.0d, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 0.0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date34, 6);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addYears(date42, (int) (short) 10);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.round(date44, (int) (short) 1);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addMinutes(date46, (int) (short) 1);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameInstant(date38, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray56);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addYears(date57, (int) (short) 10);
        boolean boolean60 = org.apache.commons.lang.time.DateUtils.isSameDay(date53, date59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addWeeks(date59, 0);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.add(date59, (int) (byte) 1, 6);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        boolean boolean75 = org.apache.commons.lang.time.DateUtils.isSameDay(date59, date74);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addHours(date74, (int) (byte) -1);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addDays(date74, (int) (short) 10);
        java.util.Date date82 = org.apache.commons.lang.time.DateUtils.add(date74, (int) (short) 10, (int) (short) 10);
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.addMonths(date74, (int) (byte) 1);
        java.util.Date date86 = org.apache.commons.lang.time.DateUtils.addDays(date84, 100);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date38, date86);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 00:00:00 CET 7");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:01:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Tue May 12 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addDays(date12, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Jan 01 00:00:00 CET 1980");
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(obj0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addYears(date18, (int) (byte) -1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date24, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date30, 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date30, (int) (byte) 1, 6);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addYears(date40, (int) (short) 10);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.add(date40, 0, (int) '#');
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date30, date45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addHours(date45, (int) (byte) -1);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date48);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator51 = org.apache.commons.lang.time.DateUtils.iterator(date48, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 52 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addWeeks(date27, (-1));
        java.lang.Class<?> wildcardClass30 = date27.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Dec 25 00:02:00 CET 1969");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round(date14, 0);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date14, 3600000);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addDays(date23, (-1));
        java.lang.Class<?> wildcardClass26 = date25.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Sep 08 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Sep 07 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Iterator iterator59 = org.apache.commons.lang.time.DateUtils.iterator(date12, (int) (byte) 1);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMinutes(date12, (int) (short) 100);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addDays(date12, 1000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator65 = org.apache.commons.lang.time.DateUtils.iterator(date12, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(iterator59);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Sep 27 00:00:00 CET 1972");
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate(obj0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addDays(date24, (int) (short) 10);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addDays(date29, (int) '#');
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addSeconds(date29, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date35 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date29, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 15 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Jan 11 00:00:10 CET 1970");
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Iterator iterator12 = org.apache.commons.lang.time.DateUtils.iterator(date8, (int) (byte) 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addYears(date20, (int) (short) 10);
        boolean boolean23 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addWeeks(date22, 0);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (byte) 1, 6);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addHours(date22, (int) ' ');
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameInstant(date8, date22);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMinutes(date22, 6);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date37 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date22, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:06:00 CET 1980");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun May 01 00:00:00 CEST 1988");
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date5, 2, 1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, 1000);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addWeeks(date12, (int) '4');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addHours(date12, 3);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Mon Dec 31 23:59:59 CET 1979");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:16:40 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Dec 30 00:16:40 CET 1980");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 03:16:40 CET 1980");
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, (int) (short) 10);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMonths(date24, 5);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addYears(date35, (int) (short) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray40);
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray44);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addYears(date45, (int) (short) 10);
        boolean boolean48 = org.apache.commons.lang.time.DateUtils.isSameDay(date41, date47);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date41, date56);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date41, (int) (byte) 10);
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray62);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addYears(date63, (int) (short) 10);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.add(date63, 0, (int) '#');
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray71);
        java.lang.String[] strArray75 = new java.lang.String[] { "" };
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray75);
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.addYears(date76, (int) (short) 10);
        boolean boolean79 = org.apache.commons.lang.time.DateUtils.isSameDay(date72, date78);
        java.lang.String[] strArray84 = new java.lang.String[] { "" };
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray84);
        java.util.Date date86 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray84);
        java.util.Date date87 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray84);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameDay(date72, date87);
        boolean boolean89 = org.apache.commons.lang.time.DateUtils.isSameDay(date63, date72);
        boolean boolean90 = org.apache.commons.lang.time.DateUtils.isSameInstant(date41, date72);
        boolean boolean91 = org.apache.commons.lang.time.DateUtils.isSameInstant(date37, date41);
        java.util.Date date93 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date37, 6);
        java.util.Date date95 = org.apache.commons.lang.time.DateUtils.addSeconds(date93, (int) (short) 100);
        boolean boolean96 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date93);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Mon Jun 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(date93);
        org.junit.Assert.assertEquals(date93.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date95);
        org.junit.Assert.assertEquals(date95.toString(), "Tue Jan 01 00:01:40 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addYears(date24, 3600000);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date26, 0);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.round(date26, (int) (byte) 0);
        java.lang.Class<?> wildcardClass31 = date26.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Apr 11 00:00:00 CEST 3602134");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Apr 11 00:00:00 CEST 3602134");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "" };
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray9);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, 60000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date38 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date36, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Fri Feb 11 16:00:00 CET 1");
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date5, 2, 1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, 1000);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date16 = org.apache.commons.lang.time.DateUtils.truncate(date14, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Mon Dec 31 23:59:59 CET 1979");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:16:40 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Jan 01 00:01:40 CET 1980");
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addHours(date15, 3600000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMinutes(date15, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date19, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Sep 08 01:00:00 CEST 2396");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 01 00:04:00 CET 1986");
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addDays(date5, 10);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMonths(date5, 6);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (byte) 1);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date9, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang.time.DateUtils.truncate(date13, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Jan 11 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jul 01 00:00:00 CEST 1980");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Jul 01 00:00:00 CEST 1981");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1981");
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addMonths(date0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addSeconds(date3, (int) (byte) 0);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addHours(date3, 1001);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Wed Feb 11 17:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.round(calendar0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (short) 10, 2);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, (int) (short) 100);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMonths(date31, (int) 'a');
        java.util.Date date34 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameInstant(date31, date34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Dec 02 02:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Jan 02 02:00:00 CET 1980");
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "hi!" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date4, 3600000);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.addHours(date6, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date8, (int) (short) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addMinutes(date3, (-1));
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) 'a');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:00 CET 1969");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 11 00:00:00 CET 1971");
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 100);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date21, 4, 1001);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addMinutes(date21, 3);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addYears(date40, (int) (short) 10);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.add(date40, 0, (int) '#');
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.add(date40, 0, 3);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addMinutes(date48, (int) (byte) 100);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date36, date50);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date36, 1);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date53, 2);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date26, date55);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Mar 09 00:00:00 CET 2089");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Jan 01 00:03:00 CET 2070");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        java.lang.String[] strArray8 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMinutes(date11, 1);
        java.util.Iterator iterator15 = org.apache.commons.lang.time.DateUtils.iterator(date11, 6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator15);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addSeconds(date7, (int) (short) 100);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addMonths(date7, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:01:40 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMinutes(date5, (int) (short) 100);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 1001);
        java.lang.Class<?> wildcardClass22 = date21.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Mar 09 01:40:00 CET 1989");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addYears(date24, (int) (short) 10);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.add(date24, 0, (int) '#');
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMonths(date29, (int) (short) 10);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date29);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date29, 3600000);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.add(date34, 0, (int) ' ');
        java.util.Iterator iterator39 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date37, (int) (byte) 1);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (short) 10);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date43, date49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addWeeks(date49, 0);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addMinutes(date49, (int) (short) -1);
        java.util.Iterator iterator56 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date49, 4);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addMinutes(date49, 0);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray61);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addYears(date62, (int) (short) 10);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.add(date62, 0, (int) '#');
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.add(date62, 0, 3);
        boolean boolean71 = org.apache.commons.lang.time.DateUtils.isSameInstant(date49, date70);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date70);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date70);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date75 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date14, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator56);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, (-1));
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.round(date36, (int) (byte) 1);
        java.lang.Class<?> wildcardClass41 = date36.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 31 23:59:00 CET 97");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Iterator iterator16 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date9, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date18 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) iterator16, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate org.apache.commons.lang.time.DateUtils$DateIterator@7e17cccb");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator16);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.add(date17, 3, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date22 = org.apache.commons.lang.time.DateUtils.round(date20, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Sep 26 00:00:00 CET 1989");
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.round(date5, (int) (short) 1);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date11 = org.apache.commons.lang.time.DateUtils.truncate(date7, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:01:00 CET 1980");
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addSeconds(date16, 3);
        java.util.Iterator iterator20 = org.apache.commons.lang.time.DateUtils.iterator(date16, 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Jan 01 00:00:03 CET 2070");
        org.junit.Assert.assertNotNull(iterator20);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, 1);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMonths(date9, 10);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addMinutes(date18, (int) (byte) 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:01:00 CET 1980");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Nov 01 01:40:00 CET 1980");
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, (-1));
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.round(date38, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date42 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date38, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 31 23:59:00 CET 97");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator(date21, 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) '#');
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 1001);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date27, 6);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Mar 09 00:00:00 CET 2024");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Mar 09 00:00:00 CET 2024");
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date24);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addDays(date3, 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 10");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Jan 11 00:00:00 CET 1970");
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMinutes(date5, (int) (short) 100);
        java.util.Date date20 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 01:40:00 CET 1970");
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date3, (int) (byte) -1);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addYears(date11, (int) (short) 10);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date11, 0, (int) '#');
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.add(date11, 0, 3);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addMonths(date11, (int) (byte) 1);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date21, (int) (byte) 10, 1);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date21);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addYears(date5, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date63 = org.apache.commons.lang.time.DateUtils.round(date61, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Mon Jan 01 00:00:00 CET 1990");
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addHours(date3, 86400000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) 86400000, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 86400000");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jun 20 01:00:00 CEST 11826");
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        java.util.Iterator iterator24 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date22, (int) (byte) 1);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date32, (int) (short) 10);
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date28, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addWeeks(date34, 0);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, (int) (short) -1);
        java.util.Iterator iterator41 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date34, 4);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, 0);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (short) 10);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.add(date47, 0, (int) '#');
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.add(date47, 0, 3);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameInstant(date34, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date22, date55);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date59 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date22, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addWeeks(date24, 0);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date24, (int) (byte) 1, 6);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addWeeks(date40, 0);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.add(date40, (int) (byte) 1, 6);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date24, date46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.round(date24, (int) (short) 0);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addDays(date24, 3600000);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date24);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addDays(date24, (int) (short) 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Jun 19 00:00:00 CEST 11836");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Apr 10 00:00:00 CEST 1980");
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date35 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date33, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Aug 13 00:00:00 CET 1970");
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addHours(date3, (-1));
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (short) 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Mon May 01 00:00:00 CEST 1978");
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date34, 6);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.round(date38, 1001);
        java.util.Date date41 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 00:00:00 CET 7");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 01 00:00:00 CET 7");
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, (int) (byte) 10);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date30, 2, 1);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addSeconds(date30, (int) (short) -1);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addSeconds(date30, 1000);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date37);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator40 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date37, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 3600000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Mon Dec 31 23:59:59 CET 1979");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:16:40 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date34, 6);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addSeconds(date34, 60000);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addWeeks(date40, (-1));
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date40, (int) (short) 1);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, 4);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 00:00:00 CET 7");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 01 16:40:00 CET 1");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Dec 25 16:40:00 CET 1");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Jan 01 16:40:00 CET 1");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun May 01 16:40:00 CET 1");
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addWeeks(date0, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addHours(date29, 0);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date31, (int) 'a', (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (byte) 100);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addDays(date23, 1000);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date23, (int) '4');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Mar 11 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon Dec 05 00:00:00 CET 2072");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Mar 11 00:52:00 CET 2070");
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator(calendar0, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (byte) 1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (byte) 10, 1000);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) (byte) 0);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date18, (int) ' ');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Feb 11 16:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date34, 6);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addSeconds(date34, 60000);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addWeeks(date40, (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date44 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) (-1), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round -1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 00:00:00 CET 7");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 01 16:40:00 CET 1");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Dec 25 16:40:00 CET 1");
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date21);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date15, (int) (byte) 10);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.add(date37, 0, (int) '#');
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addYears(date50, (int) (short) 10);
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date52);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        boolean boolean62 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date61);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date46);
        boolean boolean64 = org.apache.commons.lang.time.DateUtils.isSameInstant(date15, date46);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date46, 2);
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date66);
        java.lang.String[] strArray70 = new java.lang.String[] { "" };
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray70);
        java.lang.String[] strArray74 = new java.lang.String[] { "" };
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray74);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addYears(date75, (int) (short) 10);
        boolean boolean78 = org.apache.commons.lang.time.DateUtils.isSameDay(date71, date77);
        java.util.Date date80 = org.apache.commons.lang.time.DateUtils.addWeeks(date77, 0);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.add(date77, (int) (byte) 1, 6);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addSeconds(date83, 86400000);
        java.util.Date date88 = org.apache.commons.lang.time.DateUtils.add(date85, 3, (int) '4');
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.truncate(date88, (int) (short) 10);
        boolean boolean91 = org.apache.commons.lang.time.DateUtils.isSameDay(date66, date90);
        java.util.Date date93 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date66, (int) (byte) 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Tue Sep 26 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Tue Sep 26 00:00:00 CET 1989");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(date93);
        org.junit.Assert.assertEquals(date93.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Iterator iterator12 = org.apache.commons.lang.time.DateUtils.iterator(date8, (int) (byte) 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addYears(date20, (int) (short) 10);
        boolean boolean23 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addWeeks(date22, 0);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (byte) 1, 6);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addHours(date22, (int) ' ');
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameInstant(date8, date22);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date33 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date8, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3600000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date21, (int) (short) 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date23, (int) '#', 0);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addSeconds(date28, (int) (short) 1);
        java.lang.Class<?> wildcardClass31 = date30.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 29 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addWeeks(date8, (int) '4');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, (int) 'a');
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 4);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.round(date14, (int) (byte) 10);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addMinutes(date20, (int) (short) 10);
        java.lang.Class<?> wildcardClass23 = date20.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Nov 09 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Dec 31 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addWeeks(date27, (-1));
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.add(date27, 100, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Dec 25 00:02:00 CET 1969");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:02:00 CET 1970");
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addSeconds(date21, (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator25 = org.apache.commons.lang.time.DateUtils.iterator(date23, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 31 23:59:59 CET 2069");
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date21);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date15, (int) (byte) 10);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.add(date37, 0, (int) '#');
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addYears(date50, (int) (short) 10);
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date52);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        boolean boolean62 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date61);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date46);
        boolean boolean64 = org.apache.commons.lang.time.DateUtils.isSameInstant(date15, date46);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date46, 2);
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addWeeks(date11, (int) '4');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Dec 31 00:00:00 CET 1970");
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addYears(date15, (int) (short) 10);
        boolean boolean18 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date17);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        boolean boolean27 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date26);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date11, (int) (byte) 10);
        boolean boolean30 = org.apache.commons.lang.time.DateUtils.isSameDay(date7, date29);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date32 = org.apache.commons.lang.time.DateUtils.truncate(date29, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (byte) 1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (byte) 10, 1000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date18 = org.apache.commons.lang.time.DateUtils.round(date16, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Feb 11 16:00:00 CET 1970");
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date27, (int) (byte) 10);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        boolean boolean40 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addWeeks(date39, 0);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.add(date39, (int) (byte) 1, 6);
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray48);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addWeeks(date55, 0);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.add(date55, (int) (byte) 1, 6);
        boolean boolean62 = org.apache.commons.lang.time.DateUtils.isSameDay(date39, date61);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.round(date39, (int) (short) 0);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addYears(date64, (int) 'a');
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.addMinutes(date66, 6);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.addYears(date68, 86400000);
        boolean boolean71 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date68);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.truncate(date68, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Mon Jan 01 00:06:00 CET 98");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Wed Jan 01 00:06:00 CET 86400098");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Mon Jan 01 00:00:00 CET 98");
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addSeconds(date14, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date25, (int) '#', 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameInstant(date12, date44);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray57);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addYears(date58, (int) (short) 10);
        boolean boolean61 = org.apache.commons.lang.time.DateUtils.isSameDay(date54, date60);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addWeeks(date60, 0);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.add(date60, (int) (byte) 1, 6);
        java.lang.String[] strArray69 = new java.lang.String[] { "" };
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray69);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.addYears(date70, (int) (short) 10);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.add(date70, 0, (int) '#');
        boolean boolean76 = org.apache.commons.lang.time.DateUtils.isSameDay(date60, date75);
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.addMinutes(date75, 2);
        java.util.Date date80 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date75, 5);
        boolean boolean81 = org.apache.commons.lang.time.DateUtils.isSameInstant(date44, date80);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.addDays(date44, 3);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sun Jan 04 00:00:00 CET 1970");
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date38 = org.apache.commons.lang.time.DateUtils.truncate(date36, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 86400000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date34, 2);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addDays(date34, (int) 'a');
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addSeconds(date56, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date60 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date56, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 86400000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Apr 08 00:01:40 CET 1970");
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addSeconds(date7, (int) (short) 100);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date9, (int) '4');
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addDays(date9, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:01:40 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:01:40 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 06 00:01:40 CET 1970");
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMonths(date12, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addWeeks(date24, 0);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date24, (int) (byte) 1, 6);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addWeeks(date40, 0);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.add(date40, (int) (byte) 1, 6);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date24, date46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.round(date24, (int) (short) 0);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addYears(date49, (int) 'a');
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addYears(date49, 6);
        boolean boolean54 = org.apache.commons.lang.time.DateUtils.isSameInstant(date12, date49);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addSeconds(date12, 3600000);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addMonths(date12, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator60 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date58, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 1001 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Jan 01 00:00:00 CET 7");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Mon Feb 11 16:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sat Nov 01 00:00:00 CET 1980");
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addYears(date24, (int) (short) 10);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.add(date24, 0, (int) '#');
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMonths(date29, (int) (short) 10);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date29);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date29, 3600000);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.add(date34, 0, (int) ' ');
        java.util.Iterator iterator39 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date37, (int) (byte) 1);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (short) 10);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date43, date49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addWeeks(date49, 0);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addMinutes(date49, (int) (short) -1);
        java.util.Iterator iterator56 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date49, 4);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addMinutes(date49, 0);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray61);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addYears(date62, (int) (short) 10);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.add(date62, 0, (int) '#');
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.add(date62, 0, 3);
        boolean boolean71 = org.apache.commons.lang.time.DateUtils.isSameInstant(date49, date70);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date70);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date70);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addWeeks(date70, (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator77 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date75, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator56);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Dec 25 00:00:00 CET 1969");
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMinutes(date19, (int) (short) 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, (int) (byte) -1);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 1001);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date31 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) '4', 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 4");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 01 00:10:00 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon Dec 01 00:09:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Mon Feb 06 00:09:59 CET 1989");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Mon Feb 06 00:10:51 CET 1989");
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) 'a');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.truncate(date3, 1001);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date3, 1001);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date3, 1000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:16:40 CET 1970");
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date3, 4);
        java.lang.Class<?> wildcardClass22 = date21.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1974");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        boolean boolean24 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date28, 0, (int) '#');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addHours(date28, (-1));
        boolean boolean36 = org.apache.commons.lang.time.DateUtils.isSameInstant(date23, date28);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date11, date23);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addDays(date11, (int) '#');
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addYears(date43, (int) (short) 10);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.add(date43, 0, (int) '#');
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addMonths(date48, (int) (short) 10);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addDays(date48, (int) 'a');
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date39, date52);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator55 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date52, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Feb 05 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date31, (int) (byte) 1);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addWeeks(date33, 1001);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Mon Feb 06 00:00:00 CET 1989");
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Iterator iterator9 = org.apache.commons.lang.time.DateUtils.iterator(date7, 4);
        java.lang.Class<?> wildcardClass10 = date7.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date12 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) wildcardClass10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate class java.util.Date");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.round(date12, 2);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addHours(date12, 0);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date12, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date20 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) 5, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 5");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addHours(date9, (int) ' ');
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator21 = org.apache.commons.lang.time.DateUtils.iterator(date19, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Jan 01 00:00:00 CET 2080");
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "hi!" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date4, 3600000);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.addSeconds(date6, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 01:00:00 CET 1970");
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addHours(date29, 0);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMonths(date29, 3);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date33, (int) 'a');
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addYears(date33, 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Fri Apr 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Fri Apr 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Apr 01 00:00:00 CET 101");
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, (int) (short) -1);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addHours(date34, 1);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addMonths(date34, 100);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addMonths(date40, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date44 = org.apache.commons.lang.time.DateUtils.round(date42, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 1000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Fri Dec 31 23:59:00 CET 1");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 01:00:00 CET 1");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed May 01 00:00:00 CET 9");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Jun 01 00:00:00 CET 9");
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date5, 2, 1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Fri Feb 01 00:00:00 CET 1980");
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date59, 60000);
        java.util.Iterator iterator63 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date59, 6);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addWeeks(date59, (int) (byte) 100);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addYears(date65, (int) (byte) 0);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addMinutes(date65, 60000);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addDays(date69, 1000);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date69, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 10:01:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator63);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Dec 02 10:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Dec 02 10:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 13 02:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Wed Oct 09 02:00:00 CET 1974");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, (-1));
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.round(date36, (int) (byte) 1);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addWeeks(date40, 0);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date40, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date46 = org.apache.commons.lang.time.DateUtils.truncate(date44, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 31 23:59:00 CET 97");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Mon Jan 01 00:00:00 CET 98");
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator(date21, 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) '#');
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator29 = org.apache.commons.lang.time.DateUtils.iterator(date25, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Jan 01 00:00:00 CET 2005");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Mar 09 00:00:00 CET 2024");
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date14, 3);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 03:00:00 CET 1970");
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date32, (int) (short) 10);
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date28, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addWeeks(date34, 0);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.add(date34, (int) (byte) 1, 6);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date22, date34);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Fri Jan 01 00:00:00 CET 1971");
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date24);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addSeconds(date24, (int) 'a');
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray35);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date36, (int) (short) 10);
        boolean boolean39 = org.apache.commons.lang.time.DateUtils.isSameDay(date32, date38);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.add(date32, (int) (short) 1, (int) (byte) 0);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.add(date42, (int) (short) 1, (int) (byte) 100);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addMinutes(date45, 86400000);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (byte) -1);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray56);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addYears(date57, (int) (short) 10);
        boolean boolean60 = org.apache.commons.lang.time.DateUtils.isSameDay(date53, date59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addWeeks(date59, 0);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.add(date59, (int) (byte) 1, 6);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        boolean boolean75 = org.apache.commons.lang.time.DateUtils.isSameDay(date59, date74);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addHours(date74, (int) (byte) -1);
        boolean boolean78 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date77);
        java.util.Date date80 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date77, 3600000);
        boolean boolean81 = org.apache.commons.lang.time.DateUtils.isSameInstant(date28, date80);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date84 = org.apache.commons.lang.time.DateUtils.add(date28, (int) '#', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:01:37 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray55);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date62);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date71);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date56);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.round(date3, (int) (byte) 0);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.truncate(date3, 1);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addWeeks(date77, (int) (short) 100);
        java.util.Date date81 = org.apache.commons.lang.time.DateUtils.addMonths(date77, (int) '4');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Wed May 01 00:00:00 CET 1974");
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date5, 2, 1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, 1000);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addWeeks(date12, (int) '4');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) -1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Mon Dec 31 23:59:59 CET 1979");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:16:40 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Dec 30 00:16:40 CET 1980");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Mon Dec 31 23:16:40 CET 1979");
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round(date14, 0);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date14, 3600000);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date14, 86400000);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Sep 08 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 86401970");
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        boolean boolean24 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date23);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray29);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray29);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray29);
        boolean boolean33 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date17, (int) (byte) 10);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray51);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addYears(date52, (int) (short) 10);
        boolean boolean55 = org.apache.commons.lang.time.DateUtils.isSameDay(date48, date54);
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray60);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray60);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray60);
        boolean boolean64 = org.apache.commons.lang.time.DateUtils.isSameDay(date48, date63);
        boolean boolean65 = org.apache.commons.lang.time.DateUtils.isSameDay(date39, date48);
        boolean boolean66 = org.apache.commons.lang.time.DateUtils.isSameInstant(date17, date48);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date48, 2);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.add(date48, (int) (byte) 10, (int) (byte) 0);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.addWeeks(date48, 100);
        boolean boolean74 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date73);
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.truncate(date73, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Dec 02 00:00:00 CET 1971");
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.add(date13, 0, (int) '#');
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.add(date13, 0, 3);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMinutes(date21, (int) (byte) 100);
        boolean boolean24 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date9, 1);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, (int) (byte) 0);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date32, (int) (short) 10);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addYears(date42, (int) (short) 10);
        boolean boolean45 = org.apache.commons.lang.time.DateUtils.isSameDay(date38, date44);
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray50);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray50);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray50);
        boolean boolean54 = org.apache.commons.lang.time.DateUtils.isSameDay(date38, date53);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date38, (int) (byte) 10);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.add(date60, 0, (int) '#');
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.lang.String[] strArray72 = new java.lang.String[] { "" };
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray72);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addYears(date73, (int) (short) 10);
        boolean boolean76 = org.apache.commons.lang.time.DateUtils.isSameDay(date69, date75);
        java.lang.String[] strArray81 = new java.lang.String[] { "" };
        java.util.Date date82 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray81);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray81);
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray81);
        boolean boolean85 = org.apache.commons.lang.time.DateUtils.isSameDay(date69, date84);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date60, date69);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameInstant(date38, date69);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date34, date38);
        java.util.Date date91 = org.apache.commons.lang.time.DateUtils.add(date38, 5, 10);
        boolean boolean92 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date38);
        java.util.Date date94 = org.apache.commons.lang.time.DateUtils.addDays(date38, 100);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Sat Apr 11 00:00:00 CET 1970");
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addYears(date18, (int) (byte) -1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date24, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date30, 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date30, (int) (byte) 1, 6);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addYears(date40, (int) (short) 10);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.add(date40, 0, (int) '#');
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date30, date45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addHours(date45, (int) (byte) -1);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date48);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date20, (int) (byte) 100);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addYears(date51, 60000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator55 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date53, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Fri Apr 12 01:00:00 CEST 62233");
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.lang.Class<?> wildcardClass60 = date9.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date62 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) wildcardClass60, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate class java.util.Date");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.add(date16, 10, (-1));
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, 5);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date33);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        boolean boolean43 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date27, (int) (byte) 10);
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addYears(date54, (int) (short) 10);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date50, date56);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addWeeks(date56, 0);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.add(date56, (int) (byte) 1, 6);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addSeconds(date62, 86400000);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date64, (-1));
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date45, date66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addMinutes(date66, 10);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addWeeks(date66, (int) (short) -1);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.addDays(date71, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Dec 31 23:00:00 CET 2069");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 05 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Tue Sep 27 00:09:59 CET 1988");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Mon Sep 19 23:59:59 CEST 1988");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Mon Sep 19 23:59:59 CEST 1988");
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date11, (int) (byte) 0);
        java.lang.Class<?> wildcardClass16 = date15.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) '#');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date23, (int) (short) 0);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date23, 100);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date23, (int) (short) 1, (int) (byte) 1);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, (int) (short) 100);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addWeeks(date32, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator36 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) (byte) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on -1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Jan 02 11:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Jan 02 11:01:40 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Fri Dec 26 11:01:40 CET 1969");
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date17, 0);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addDays(date17, 3600000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) 3600000, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 3600000");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Mar 16 00:00:00 CET 11845");
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.truncate(date24, 10);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray34);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        boolean boolean42 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date41);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date50);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date35, (int) (byte) 10);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addHours(date35, (int) '#');
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addMinutes(date55, (int) (short) 0);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date31, date55);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addSeconds(date31, (int) (short) 100);
        java.lang.Class<?> wildcardClass61 = date60.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:01:40 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.add(date16, 10, (-1));
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, 5);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date33);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        boolean boolean43 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date27, (int) (byte) 10);
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addYears(date54, (int) (short) 10);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date50, date56);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addWeeks(date56, 0);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.add(date56, (int) (byte) 1, 6);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addSeconds(date62, 86400000);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date64, (-1));
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date45, date66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addMinutes(date66, 10);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addWeeks(date66, (int) (short) -1);
        java.lang.Class<?> wildcardClass72 = date66.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Dec 31 23:00:00 CET 2069");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 05 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Tue Sep 27 00:09:59 CET 1988");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Mon Sep 19 23:59:59 CEST 1988");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.add(date9, 5, 10);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addMinutes(date62, (int) (byte) 10);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addMinutes(date62, (int) (byte) 0);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.add(date62, 2, 0);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addSeconds(date62, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date73 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) '#', 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate #");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Jan 11 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sun Jan 11 00:00:35 CET 1970");
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round(date24, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator31 = org.apache.commons.lang.time.DateUtils.iterator(date29, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        java.util.Iterator iterator24 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date22, (int) (byte) 1);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date32, (int) (short) 10);
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date28, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addWeeks(date34, 0);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, (int) (short) -1);
        java.util.Iterator iterator41 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date34, 4);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, 0);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (short) 10);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.add(date47, 0, (int) '#');
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.add(date47, 0, 3);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameInstant(date34, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date22, date55);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date59 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) boolean57, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round false");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.add(date9, 5, 10);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addMinutes(date62, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date66 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) (byte) 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 10");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Jan 11 00:10:00 CET 1970");
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.round(date0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addHours(date0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date40 = org.apache.commons.lang.time.DateUtils.truncate(date38, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Mon Jan 01 00:06:00 CET 98");
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "hi!" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date4, 3600000);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.addDays(date6, (int) (byte) -1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Wed Dec 31 01:00:00 CET 1969");
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (byte) 1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (byte) 10, 1000);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) (byte) 0);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addMinutes(date18, (int) (short) 1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date18, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date24 = org.apache.commons.lang.time.DateUtils.round(date18, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 1000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Feb 11 16:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 0, (-1));
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator12 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date3, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 3600000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (short) 10, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date25, 3600000, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 02:00:00 CET 1970");
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        java.lang.String[] strArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Date and Patterns must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addYears(date18, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addYears(date18, (int) (byte) 0);
        java.util.Iterator iterator24 = org.apache.commons.lang.time.DateUtils.iterator(date22, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(iterator24);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date5, 6);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date5, 1000);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.add(date63, 10, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator68 = org.apache.commons.lang.time.DateUtils.iterator(date63, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 35 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Tue Jan 01 00:00:01 CET 1980");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sat Jan 05 01:00:01 CET 1980");
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addHours(date3, 86400000);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.add(date15, (int) (byte) 0, 60000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jun 20 01:00:00 CEST 11826");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jun 20 01:00:00 CEST 11826");
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date5, 2, 1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, 1000);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addWeeks(date12, (int) '4');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addDays(date14, (int) ' ');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Mon Dec 31 23:59:59 CET 1979");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:16:40 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Dec 30 00:16:40 CET 1980");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Jan 31 00:16:40 CET 1981");
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round(date19, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date23 = org.apache.commons.lang.time.DateUtils.truncate(date19, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 1000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!", "hi!" };
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray9);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addSeconds(date24, (int) (byte) 1);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMinutes(date31, 2);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date33, 60000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:02:01 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:03:01 CET 1970");
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, (int) 'a');
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date32, (int) (short) 10);
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date28, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addWeeks(date34, 0);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.add(date34, (int) (byte) 1, 6);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.add(date44, 0, (int) '#');
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addHours(date49, (int) (byte) -1);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addDays(date52, 60000);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.round(date52, 0);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addDays(date56, 1);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date24, date56);
        java.lang.Class<?> wildcardClass60 = date56.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Apr 10 23:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Jan 02 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.add(date17, 3, (int) '4');
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.truncate(date20, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.truncate(date20, 1);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addMonths(date24, 100);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addDays(date24, 86400000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Sep 26 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Sep 26 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Jan 01 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu May 01 00:00:00 CEST 1997");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Mon Mar 02 00:00:00 CET 238544");
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date3, (int) (byte) -1);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (short) 10);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date3, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date11, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 1000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMonths(date12, 1);
        java.lang.Class<?> wildcardClass15 = date14.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addHours(date3, (-1));
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addSeconds(date10, 86400000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Sep 26 23:00:00 CET 1972");
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addYears(date24, (int) (short) 10);
        boolean boolean27 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date26);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addWeeks(date26, 0);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.add(date26, (int) (byte) 1, 6);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray35);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date36, (int) (short) 10);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.add(date36, 0, (int) '#');
        boolean boolean42 = org.apache.commons.lang.time.DateUtils.isSameDay(date26, date41);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addHours(date41, (int) (byte) -1);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.round(date41, 5);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameInstant(date16, date46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date46, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator51 = org.apache.commons.lang.time.DateUtils.iterator(date49, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date24, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator29 = org.apache.commons.lang.time.DateUtils.iterator(date27, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 32 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Mon May 01 00:00:00 CEST 1978");
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date48);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date57);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date42);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date74, (int) (short) 10);
        boolean boolean77 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date74);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date74, 3600000);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray82);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addYears(date83, (int) (short) 10);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date79, date85);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date85);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date42);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.addDays(date42, (int) (byte) 100);
        java.util.Date date92 = org.apache.commons.lang.time.DateUtils.addYears(date90, (-1));
        java.util.Date date95 = org.apache.commons.lang.time.DateUtils.add(date90, (int) (byte) 10, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Sat Apr 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Fri Apr 11 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date95);
        org.junit.Assert.assertEquals(date95.toString(), "Sat Apr 11 01:00:00 CET 1970");
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameInstant(date12, date44);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addWeeks(date12, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator54 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date12, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 15 00:00:00 CET 1970");
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addMonths(date5, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.add(date7, 5, 2);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) ' ');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 01 00:00:00 CET 1982");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Fri Dec 03 00:00:00 CET 1982");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Mon Dec 01 00:00:00 CET 2014");
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator2 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) 10.0d, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 10.0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date34, 6);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addSeconds(date34, 60000);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addSeconds(date40, (int) (byte) -1);
        java.util.Iterator iterator44 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date40, 3);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 00:00:00 CET 7");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 01 16:40:00 CET 1");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Jan 01 16:39:59 CET 1");
        org.junit.Assert.assertNotNull(iterator44);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addHours(date0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) ' ', 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round  ");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "", "hi!" };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMinutes(date11, (int) (byte) 100);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.truncate(date11, 2);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addHours(date11, (int) (short) -1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 23:00:00 CET 1969");
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date17, 0);
        java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator(date17, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date17, 2);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date25, 3, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addMonths(date25, (int) '4');
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addSeconds(date30, 6);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date32, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Sep 27 00:00:00 CEST 1990");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Aug 06 00:00:00 CEST 1992");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Fri Jan 27 00:00:00 CET 1995");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Jan 27 00:00:06 CET 1995");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date34, 2);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addDays(date34, (int) 'a');
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addSeconds(date56, (int) (byte) 100);
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray62);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray62);
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray67);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.addYears(date68, (int) (short) 10);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.add(date68, 0, (int) '#');
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addMonths(date73, (int) (short) 10);
        boolean boolean76 = org.apache.commons.lang.time.DateUtils.isSameDay(date64, date73);
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.addYears(date73, 3600000);
        java.lang.String[] strArray81 = new java.lang.String[] { "" };
        java.util.Date date82 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray81);
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.addYears(date82, (int) (short) 10);
        boolean boolean85 = org.apache.commons.lang.time.DateUtils.isSameDay(date78, date84);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date58, date78);
        java.util.Iterator iterator88 = org.apache.commons.lang.time.DateUtils.iterator(date58, 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Apr 08 00:01:40 CET 1970");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(iterator88);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, 1000);
        java.lang.Class<?> wildcardClass17 = date16.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 16:40:00 CET 1980");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate(obj0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) (short) 10);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.add(date34, 0, (int) '#');
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addMonths(date39, (int) (short) 10);
        boolean boolean42 = org.apache.commons.lang.time.DateUtils.isSameDay(date28, date39);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addMonths(date39, (int) (byte) -1);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.add(date39, 0, 10);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date39, 3);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.truncate(date39, 1);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date39, 5);
        boolean boolean54 = org.apache.commons.lang.time.DateUtils.isSameInstant(date24, date39);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.add(date16, 10, (-1));
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, 5);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, 0);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, 100);
        java.lang.Class<?> wildcardClass28 = date27.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Dec 31 23:00:00 CET 2069");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 05 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Mon Jan 01 00:00:00 CET 2170");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date34, 5);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addYears(date54, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date24, 60000);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date31, 1);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addSeconds(date33, (int) (short) 1);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.round(date35, 2);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addDays(date37, (int) ' ');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 08 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 08 00:01:01 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Mon Feb 02 00:00:00 CET 1970");
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addYears(date18, (int) (byte) -1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date24, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date30, 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date30, (int) (byte) 1, 6);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addYears(date40, (int) (short) 10);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.add(date40, 0, (int) '#');
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date30, date45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addHours(date45, (int) (byte) -1);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date48);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date20, (int) (short) 10);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date51, (int) (byte) 10);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addMinutes(date53, 86400000);
        java.lang.Class<?> wildcardClass56 = date53.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Mon Jul 21 01:00:00 CEST 2397");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date27, (int) (byte) 10);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        boolean boolean40 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addWeeks(date39, 0);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.add(date39, (int) (byte) 1, 6);
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray48);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addWeeks(date55, 0);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.add(date55, (int) (byte) 1, 6);
        boolean boolean62 = org.apache.commons.lang.time.DateUtils.isSameDay(date39, date61);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.round(date39, (int) (short) 0);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addYears(date64, (int) 'a');
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.addMinutes(date66, 6);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.addYears(date68, 86400000);
        boolean boolean71 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date68);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date27, 5);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addWeeks(date27, (-1));
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date27, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Mon Jan 01 00:06:00 CET 98");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Wed Jan 01 00:06:00 CET 86400098");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Dec 25 00:02:00 CET 1969");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addWeeks(date0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addHours(date13, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator17 = org.apache.commons.lang.time.DateUtils.iterator(date15, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 1001 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 03 04:00:00 CET 1970");
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date9, 1000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:01 CET 1980");
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date3 = org.apache.commons.lang.time.DateUtils.add(date0, 10, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 3);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.truncate(date14, 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator28 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date26, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addSeconds(date13, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addHours(date29, 0);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date29, (int) 'a');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, 2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 11 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Nov 11 00:00:00 CET 4");
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray55);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date62);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date71);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date56);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addSeconds(date56, (int) (byte) 1);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date56, 5);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addWeeks(date77, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date81 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) 1001, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 1001");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Mar 09 00:00:00 CET 1989");
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 2);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray64);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addYears(date65, (int) (short) 10);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.add(date65, 0, (int) '#');
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.addHours(date65, (-1));
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date72);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addMonths(date9, 60000);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addYears(date9, (-1));
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Mon Jan 01 00:00:00 CET 6970");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Wed Jan 01 00:00:00 CET 1969");
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date10 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.round(date5, (int) (byte) 1);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.truncate(date7, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date27, (int) (byte) 10);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMinutes(date29, 3600000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Fri Nov 05 00:02:00 CET 1976");
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date0, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) '4');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Jan 01 00:00:00 CET 2022");
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date19, (int) (byte) 1, 6);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date29, 0, (int) '#');
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addHours(date34, (int) (byte) -1);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date34);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addSeconds(date34, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date42 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) 'a', 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate a");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:01:37 CET 1970");
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Iterator iterator59 = org.apache.commons.lang.time.DateUtils.iterator(date12, (int) (byte) 1);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMinutes(date12, (int) (short) 100);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addMonths(date12, (int) (byte) -1);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.truncate(date12, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(iterator59);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date5, 6);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date5, 1000);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addHours(date5, (int) (byte) 10);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addWeeks(date65, 86400000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Tue Jan 01 00:00:01 CET 1980");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Tue Jan 01 10:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Tue Feb 27 10:00:00 CET 1657866");
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addWeeks(date24, (int) 'a');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Nov 11 00:00:00 CET 1971");
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 2);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addHours(date61, (-1));
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMonths(date61, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator67 = org.apache.commons.lang.time.DateUtils.iterator(date65, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:00:02 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Feb 01 00:00:02 CET 1978");
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date21, (int) (short) 0);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addSeconds(date30, 1001);
        boolean boolean33 = org.apache.commons.lang.time.DateUtils.isSameDay(date21, date30);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date21, (int) '#', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:16:41 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang.time.DateUtils.round(date13, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round(date19, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date23 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date21, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 1000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (short) 10, 2);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray40);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addYears(date41, (int) (short) 10);
        boolean boolean44 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date43);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date37, (int) (byte) 10);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addYears(date59, (int) (short) 10);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.add(date59, 0, (int) '#');
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray67);
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray71);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.addYears(date72, (int) (short) 10);
        boolean boolean75 = org.apache.commons.lang.time.DateUtils.isSameDay(date68, date74);
        java.lang.String[] strArray80 = new java.lang.String[] { "" };
        java.util.Date date81 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray80);
        java.util.Date date82 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray80);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray80);
        boolean boolean84 = org.apache.commons.lang.time.DateUtils.isSameDay(date68, date83);
        boolean boolean85 = org.apache.commons.lang.time.DateUtils.isSameDay(date59, date68);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameInstant(date37, date68);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameInstant(date33, date37);
        java.util.Date date89 = org.apache.commons.lang.time.DateUtils.addSeconds(date37, 2);
        java.util.Date date91 = org.apache.commons.lang.time.DateUtils.addHours(date89, (-1));
        java.util.Date date93 = org.apache.commons.lang.time.DateUtils.addMonths(date89, (int) 'a');
        java.util.Date date95 = org.apache.commons.lang.time.DateUtils.addSeconds(date89, 5);
        boolean boolean96 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date89);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date98 = org.apache.commons.lang.time.DateUtils.round(date25, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Wed Dec 31 23:00:02 CET 1969");
        org.junit.Assert.assertNotNull(date93);
        org.junit.Assert.assertEquals(date93.toString(), "Wed Feb 01 00:00:02 CET 1978");
        org.junit.Assert.assertNotNull(date95);
        org.junit.Assert.assertEquals(date95.toString(), "Thu Jan 01 00:00:07 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMonths(date36, (int) (short) 10);
        boolean boolean39 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date36);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addMonths(date36, (int) (byte) -1);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date36, 0, 10);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addDays(date44, 60000);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date21, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addHours(date44, (int) ' ');
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date44, 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date53 = org.apache.commons.lang.time.DateUtils.round(date44, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 60000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Fri Jan 02 08:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date15, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round(date15, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Jan 01 00:00:00 CET 1986");
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date9, (int) (short) 10);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date9, 0);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date9, (int) (short) -1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, (int) (short) 10);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, (int) (short) 1);
        java.lang.Class<?> wildcardClass32 = date31.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addYears(date0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "", "hi!", "hi!" };
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.round(date6, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (byte) 1);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date13, (int) (short) -1);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addWeeks(date15, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator19 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) 'a', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on a");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 31 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Dec 11 23:59:59 CET 1971");
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date9, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date14 = org.apache.commons.lang.time.DateUtils.truncate(date12, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addDays(date5, 10);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMonths(date5, 6);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (byte) 1);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addDays(date11, 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) 100, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 100");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Jan 11 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jul 01 00:00:00 CEST 1980");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Jul 01 00:00:00 CEST 1981");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Fri Oct 09 00:00:00 CET 1981");
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addHours(date5, 2);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addYears(date11, (int) (short) 10);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date17, 0, (int) '#');
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date22);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (byte) -1);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date22, 0, 10);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date22, (int) 'a');
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray35);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addYears(date40, (int) (short) 10);
        boolean boolean43 = org.apache.commons.lang.time.DateUtils.isSameDay(date36, date42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addWeeks(date42, 0);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.add(date42, (int) (byte) 1, 6);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray51);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addYears(date52, (int) (short) 10);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.add(date52, 0, (int) '#');
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date57);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addHours(date57, (int) (byte) -1);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addDays(date60, 60000);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.round(date60, 0);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addDays(date64, 1);
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date32, date64);
        boolean boolean68 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date64);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Tue Jan 01 02:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sat Apr 10 23:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sun Jan 02 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addSeconds(date24, (int) (byte) 1);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, 0);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addSeconds(date31, 1001);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addHours(date35, (int) (byte) 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:16:42 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Mon Jan 05 04:16:42 CET 1970");
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 2, 1);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addSeconds(date19, (int) (short) -1);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameInstant(date13, date24);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Mon Dec 31 23:59:59 CET 1979");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date27, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator31 = org.apache.commons.lang.time.DateUtils.iterator(date27, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 52 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:02:00 CET 1970");
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date24);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addSeconds(date24, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addWeeks(date28, 100);
        java.lang.Class<?> wildcardClass31 = date30.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:01:37 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Dec 02 00:01:37 CET 1971");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date8, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addDays(date11, 4);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.round(date13, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang.time.DateUtils.round(date15, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Mon Jan 05 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date48);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date57);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date42);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date74, (int) (short) 10);
        boolean boolean77 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date74);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date74, 3600000);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray82);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addYears(date83, (int) (short) 10);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date79, date85);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date85);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date42);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.truncate(date27, (int) (byte) 10);
        java.util.Date date92 = org.apache.commons.lang.time.DateUtils.addDays(date27, (int) (short) 10);
        java.util.Date date94 = org.apache.commons.lang.time.DateUtils.addYears(date27, 86400000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date96 = org.apache.commons.lang.time.DateUtils.truncate(date94, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Sun Jan 11 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Thu Jan 01 00:02:00 CET 86401970");
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.util.Iterator iterator16 = org.apache.commons.lang.time.DateUtils.iterator(date8, 6);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addHours(date8, 100);
        java.util.Date date19 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Mon Jan 05 04:00:00 CET 1970");
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMonths(date36, (int) (short) 10);
        boolean boolean39 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date36);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addMonths(date36, (int) (byte) -1);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date36, 0, 10);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addDays(date44, 60000);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date21, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addHours(date44, (int) ' ');
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addHours(date44, (int) (short) 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Fri Jan 02 08:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Mon Jan 05 04:00:00 CET 1970");
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, (int) (byte) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addMonths(date24, (int) '4');
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Mar 12 10:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Fri Jul 12 00:00:00 CEST 3601974");
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, (int) (byte) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addHours(date28, 3600000);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addMinutes(date30, (int) (byte) -1);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addSeconds(date32, 0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Mar 12 10:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Mon Nov 17 10:00:00 CET 3602380");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Mon Nov 17 09:59:00 CET 3602380");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Mon Nov 17 09:59:00 CET 3602380");
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addMonths(date0, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addMonths(date0, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date34, 2);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addYears(date54, (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date58 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) (-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate -1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Jan 01 00:00:00 CET 1969");
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (short) -1);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date31, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date35 = org.apache.commons.lang.time.DateUtils.round(date33, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Mon Dec 01 00:00:00 CET 1969");
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date3, (int) (byte) -1);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addYears(date11, (int) (short) 10);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date11, 0, (int) '#');
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.add(date11, 0, 3);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addMonths(date11, (int) (byte) 1);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date21, (int) (byte) 10, 1);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date21);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date3, (int) '#');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addYears(date15, (int) (short) 10);
        boolean boolean18 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date17);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        boolean boolean27 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date26);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date11, (int) (byte) 10);
        boolean boolean30 = org.apache.commons.lang.time.DateUtils.isSameDay(date7, date29);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date29, 6, (int) ' ');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, 86400000);
        java.util.Iterator iterator37 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date33, 5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Mon Feb 02 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Mon Feb 02 00:00:00 CET 86401970");
        org.junit.Assert.assertNotNull(iterator37);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addSeconds(date14, (int) '4');
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:52 CET 1970");
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date24, 60000);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date31, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date33, (int) '#', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 08 00:01:00 CET 1970");
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addWeeks(date8, (int) '4');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, (int) 'a');
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 4);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.round(date14, (int) (byte) 10);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addMinutes(date20, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addHours(date20, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date26 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date20, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 1000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Nov 09 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Dec 31 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Mon Jan 04 04:00:00 CET 1971");
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, (-1));
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.round(date36, (int) (byte) 1);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addDays(date36, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date45 = org.apache.commons.lang.time.DateUtils.add(date36, 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 31 23:59:00 CET 97");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 31 00:00:00 CET 97");
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.lang.Class<?> wildcardClass14 = date13.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date5, 6);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addSeconds(date61, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date65 = org.apache.commons.lang.time.DateUtils.round(date61, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Tue Jan 01 00:01:40 CET 1980");
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date34, 6);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addSeconds(date34, 60000);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addWeeks(date40, (-1));
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date40, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator46 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date44, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 32 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 00:00:00 CET 7");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 01 16:40:00 CET 1");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Dec 25 16:40:00 CET 1");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Jan 01 16:40:00 CET 1");
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate(obj0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameInstant(date12, date44);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray57);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addYears(date58, (int) (short) 10);
        boolean boolean61 = org.apache.commons.lang.time.DateUtils.isSameDay(date54, date60);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addWeeks(date60, 0);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.add(date60, (int) (byte) 1, 6);
        java.lang.String[] strArray69 = new java.lang.String[] { "" };
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray69);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.addYears(date70, (int) (short) 10);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.add(date70, 0, (int) '#');
        boolean boolean76 = org.apache.commons.lang.time.DateUtils.isSameDay(date60, date75);
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.addMinutes(date75, 2);
        java.util.Date date80 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date75, 5);
        boolean boolean81 = org.apache.commons.lang.time.DateUtils.isSameInstant(date44, date80);
        java.util.Iterator iterator83 = org.apache.commons.lang.time.DateUtils.iterator(date44, 5);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(iterator83);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addSeconds(date24, 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date31, 0);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addYears(date43, (int) (short) 10);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.add(date43, 0, (int) '#');
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addMonths(date48, (int) (short) 10);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date39, date48);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date48, (int) (short) 1);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date48, (int) (short) 100);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date48);
        java.util.Date date57 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date48, date57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        java.lang.String[] strArray11 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        boolean boolean24 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date28, 0, (int) '#');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addHours(date28, (-1));
        boolean boolean36 = org.apache.commons.lang.time.DateUtils.isSameInstant(date23, date28);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date11, date23);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addHours(date11, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date42 = org.apache.commons.lang.time.DateUtils.add(date11, (int) (byte) 100, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Jan 03 04:00:00 CET 1970");
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (short) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addSeconds(date22, 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addDays(date22, (int) 'a');
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) '4');
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date22, (-1));
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date36, 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 01 00:00:00 CET 2022");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Tue Jan 01 00:00:00 CET 1980");
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.add(date13, 0, (int) '#');
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.add(date13, 0, 3);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMinutes(date21, (int) (byte) 100);
        boolean boolean24 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addMonths(date9, 86400000);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addHours(date9, 3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 7201970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 03:00:00 CET 1970");
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date5, 2, 1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addSeconds(date10, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date14 = org.apache.commons.lang.time.DateUtils.truncate(date12, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Mon Dec 31 23:59:59 CET 1979");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:01 CET 1980");
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        boolean boolean24 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date28, 0, (int) '#');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addHours(date28, (-1));
        boolean boolean36 = org.apache.commons.lang.time.DateUtils.isSameInstant(date23, date28);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date11, date23);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addDays(date11, (int) '#');
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addMinutes(date11, 60000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date43 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) 60000, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 60000");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Feb 05 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Feb 11 16:00:00 CET 1970");
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addYears(date24, (int) (short) 10);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.add(date24, 0, (int) '#');
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMonths(date29, (int) (short) 10);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date29);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date29, 3600000);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.add(date34, 0, (int) ' ');
        java.util.Iterator iterator39 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date37, (int) (byte) 1);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (short) 10);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date43, date49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addWeeks(date49, 0);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addMinutes(date49, (int) (short) -1);
        java.util.Iterator iterator56 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date49, 4);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addMinutes(date49, 0);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray61);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addYears(date62, (int) (short) 10);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.add(date62, 0, (int) '#');
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.add(date62, 0, 3);
        boolean boolean71 = org.apache.commons.lang.time.DateUtils.isSameInstant(date49, date70);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date70);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date70);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date75, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator56);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Tue Oct 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Tue Oct 05 00:00:00 CET 1976");
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date11, (int) (byte) 0);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.add(date11, 0, 10);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addSeconds(date18, (int) ' ');
        java.lang.Class<?> wildcardClass21 = date20.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:32 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date24, 60000);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date31, 1);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addSeconds(date33, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date37 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date35, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 08 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 08 00:01:01 CET 1970");
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.add(date31, 0, 3);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addMinutes(date39, (int) (byte) 100);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.truncate(date39, 2);
        boolean boolean44 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date48 = org.apache.commons.lang.time.DateUtils.round(date46, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:00:06 CET 1969");
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addWeeks(date8, (int) '4');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, (int) 'a');
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addHours(date14, (int) (short) 1);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.round(date14, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator22 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) 0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Nov 09 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Dec 31 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date17, 0);
        java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator(date17, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date17, 2);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date25, 1000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round(date25, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Sep 27 00:00:00 CEST 1990");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Sep 27 16:40:00 CEST 1990");
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 3);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addHours(date14, 4);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.round(date14, 2);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray35);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date36, (int) (short) 10);
        boolean boolean39 = org.apache.commons.lang.time.DateUtils.isSameDay(date32, date38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addWeeks(date38, 0);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date38, (int) (byte) 1, 6);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addYears(date48, (int) (short) 10);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.add(date48, 0, (int) '#');
        boolean boolean54 = org.apache.commons.lang.time.DateUtils.isSameDay(date38, date53);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addMinutes(date53, 2);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date56, (int) (byte) 10);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date28, date56);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addDays(date56, (int) (short) 10);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addSeconds(date56, (int) '#');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 04:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Jan 11 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:02:35 CET 1970");
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date3 = org.apache.commons.lang.time.DateUtils.add(date0, 1, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        boolean boolean40 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addWeeks(date39, 0);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.add(date39, (int) (byte) 1, 6);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addSeconds(date45, 86400000);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date47, (-1));
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date47, 0);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (byte) 1);
        boolean boolean54 = org.apache.commons.lang.time.DateUtils.isSameDay(date29, date47);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Sep 27 00:00:00 CET 1989");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Tue Jan 01 00:01:59 CET 1980");
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round(date24, 5);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.add(date33, 0, 3);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date41, 0);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addYears(date41, (int) (byte) 0);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.add(date41, 0, 10);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addSeconds(date48, (int) ' ');
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date29, date50);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addWeeks(date50, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date55 = org.apache.commons.lang.time.DateUtils.round(date53, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:32 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:32 CET 1970");
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMinutes(date29, 2);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMonths(date31, (int) (byte) 1);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray40);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addYears(date41, (int) (short) 10);
        boolean boolean44 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date43);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addHours(date37, 1000);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addDays(date55, 3);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date33, date55);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Feb 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Wed Feb 11 16:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Feb 14 16:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addDays(date27, 60000);
        java.lang.Class<?> wildcardClass30 = date29.getClass();
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date29, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Apr 10 23:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addMinutes(date3, 2);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date21, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang.time.DateUtils.round(date21, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:02:00 CET 1970");
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date24, (int) (byte) 100);
        java.util.Iterator iterator29 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date24, 3);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date24, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator33 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date31, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Mon May 01 00:00:00 CEST 1978");
        org.junit.Assert.assertNotNull(iterator29);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addDays(date0, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, (int) (byte) 10);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addSeconds(date18, 0);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date24, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date30, 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date30, (int) (byte) 1, 6);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addWeeks(date46, 0);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.add(date46, (int) (byte) 1, 6);
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date30, date52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.round(date30, (int) (short) 0);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addYears(date55, (int) 'a');
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addMinutes(date57, (-1));
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray62);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addYears(date63, (int) (short) 10);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.add(date63, 0, (int) '#');
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.add(date63, 0, 3);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.addMinutes(date71, (int) (byte) 100);
        boolean boolean74 = org.apache.commons.lang.time.DateUtils.isSameInstant(date59, date71);
        boolean boolean75 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date71);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date77 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) boolean75, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate false");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Mar 12 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Mar 12 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Dec 31 23:59:00 CET 97");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round(date19, (int) (short) 1);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addWeeks(date31, 0);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.add(date31, (int) (byte) 1, 6);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray40);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addYears(date41, (int) (short) 10);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.add(date41, 0, (int) '#');
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addMonths(date46, (int) (byte) 100);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameInstant(date19, date46);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addDays(date46, (int) (byte) 100);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date52, (int) (byte) 1);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray57);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addYears(date58, (int) (short) 10);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addMonths(date60, (int) '#');
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date60, (int) (short) 1);
        boolean boolean65 = org.apache.commons.lang.time.DateUtils.isSameInstant(date54, date64);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Mon May 01 00:00:00 CEST 1978");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sat Apr 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Apr 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 01 00:00:00 CET 1982");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date59, 60000);
        java.util.Iterator iterator63 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date59, 6);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addWeeks(date59, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date67 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date65, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 1000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 10:01:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator63);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Dec 02 10:00:00 CET 1971");
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date19, (int) (byte) 1, 6);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date29, 0, (int) '#');
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addHours(date34, (int) (byte) -1);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date34);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, 4);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addYears(date48, (int) (short) 10);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date44, date50);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addWeeks(date50, 0);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.add(date50, (int) (byte) 1, 6);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.add(date60, 0, (int) '#');
        boolean boolean66 = org.apache.commons.lang.time.DateUtils.isSameDay(date50, date65);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.addMinutes(date65, 2);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date65, 5);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.addMinutes(date70, 2);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date70);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date75 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date70, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date20 = org.apache.commons.lang.time.DateUtils.round(date16, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Mar 12 00:00:00 CET 1970");
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 2);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addHours(date61, (-1));
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMonths(date61, (int) 'a');
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addSeconds(date61, 5);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addHours(date67, 0);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addSeconds(date69, 3);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:00:02 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Feb 01 00:00:02 CET 1978");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:07 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:07 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:10 CET 1970");
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 2);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addHours(date61, (-1));
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMonths(date63, 86400000);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addDays(date63, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date69 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date67, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3600000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 23:00:02 CET 1969");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 23:00:02 CET 7201969");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sun Jan 04 23:00:02 CET 1970");
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate(date0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date21, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator25 = org.apache.commons.lang.time.DateUtils.iterator(date23, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Dec 02 00:00:00 CET 1971");
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date19, (int) (byte) 1, 6);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date29, 0, (int) '#');
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addHours(date34, (int) (byte) -1);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date34);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, 4);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addYears(date48, (int) (short) 10);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date44, date50);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addWeeks(date50, 0);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.add(date50, (int) (byte) 1, 6);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.add(date60, 0, (int) '#');
        boolean boolean66 = org.apache.commons.lang.time.DateUtils.isSameDay(date50, date65);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.addMinutes(date65, 2);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date65, 5);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.addMinutes(date70, 2);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date70);
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.add(date70, 10, (int) (short) -1);
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.addSeconds(date76, (int) (short) -1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 22:59:59 CET 1969");
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, 6);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addMonths(date36, (int) '#');
        java.lang.Class<?> wildcardClass41 = date40.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Mon Jan 01 00:06:00 CET 98");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Dec 01 00:00:00 CET 100");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date3, (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator33 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) (-1), 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on -1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1969");
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.round(date35, (int) (short) 1);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addMonths(date37, (int) 'a');
        boolean boolean40 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date39);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date43 = org.apache.commons.lang.time.DateUtils.add(date39, 1001, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Mon Feb 01 00:00:00 CET 1988");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addMinutes(date0, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date24, (int) (byte) 100);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMonths(date27, (int) (byte) 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Mon May 01 00:00:00 CEST 1978");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Mon Sep 01 00:00:00 CEST 1986");
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMinutes(date11, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator15 = org.apache.commons.lang.time.DateUtils.iterator(date13, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 01:40:00 CET 1970");
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addYears(date15, (int) (short) 10);
        boolean boolean18 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date17);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addWeeks(date17, 0);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.add(date17, (int) (byte) 1, 6);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray26);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addYears(date27, (int) (short) 10);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.add(date27, 0, (int) '#');
        boolean boolean33 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMinutes(date32, 2);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addSeconds(date35, (-1));
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray40);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addYears(date41, (int) (short) 10);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.add(date41, 0, (int) '#');
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray53);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addYears(date54, (int) (short) 10);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date50, date56);
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray62);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray62);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray62);
        boolean boolean66 = org.apache.commons.lang.time.DateUtils.isSameDay(date50, date65);
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date41, date50);
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray71);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray71);
        java.lang.String[] strArray76 = new java.lang.String[] { "" };
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date77, (int) (short) 10);
        java.util.Date date82 = org.apache.commons.lang.time.DateUtils.add(date77, 0, (int) '#');
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.addMonths(date82, (int) (short) 10);
        boolean boolean85 = org.apache.commons.lang.time.DateUtils.isSameDay(date73, date82);
        java.util.Date date87 = org.apache.commons.lang.time.DateUtils.addYears(date82, 3600000);
        java.lang.String[] strArray90 = new java.lang.String[] { "" };
        java.util.Date date91 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray90);
        java.util.Date date93 = org.apache.commons.lang.time.DateUtils.addYears(date91, (int) (short) 10);
        boolean boolean94 = org.apache.commons.lang.time.DateUtils.isSameDay(date87, date93);
        boolean boolean95 = org.apache.commons.lang.time.DateUtils.isSameDay(date50, date93);
        boolean boolean96 = org.apache.commons.lang.time.DateUtils.isSameInstant(date35, date50);
        boolean boolean97 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date50);
        java.lang.Class<?> wildcardClass98 = date50.getClass();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date93);
        org.junit.Assert.assertEquals(date93.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMonths(date3, 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date27 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date3, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 6 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 01:00:00 CET 1970");
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        java.util.Iterator iterator24 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date22, (int) (byte) 1);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date32, (int) (short) 10);
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date28, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addWeeks(date34, 0);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, (int) (short) -1);
        java.util.Iterator iterator41 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date34, 4);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, 0);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (short) 10);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.add(date47, 0, (int) '#');
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.add(date47, 0, 3);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameInstant(date34, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date22, date55);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray61);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addYears(date67, (int) (short) 10);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.add(date67, 0, (int) '#');
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.addMonths(date72, (int) (short) 10);
        boolean boolean75 = org.apache.commons.lang.time.DateUtils.isSameDay(date63, date72);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date72, (int) (short) 1);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.round(date72, 0);
        boolean boolean80 = org.apache.commons.lang.time.DateUtils.isSameInstant(date55, date72);
        java.lang.Class<?> wildcardClass81 = date55.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addYears(date5, (int) (short) 10);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addYears(date5, (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date65 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) (-1), 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round -1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Mon Jan 01 00:00:00 CET 1990");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Mon Jan 01 00:00:00 CET 1979");
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        java.lang.String[] strArray10 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addMonths(date5, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.add(date7, 5, 2);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addYears(date10, 86400000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 01 00:00:00 CET 1982");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Fri Dec 03 00:00:00 CET 1982");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Fri Dec 03 00:00:00 CET 86401982");
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date34, 5);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addWeeks(date54, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date59 = org.apache.commons.lang.time.DateUtils.add(date54, (int) '#', 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date34, 6);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addSeconds(date38, 0);
        java.lang.Class<?> wildcardClass41 = date38.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 00:00:00 CET 7");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 01 00:00:00 CET 7");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addHours(date3, 1000);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date21, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date25 = org.apache.commons.lang.time.DateUtils.round(date23, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 86400000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Feb 11 16:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 11 16:00:00 CET 1970");
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) '#');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, 0);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date23, 3, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Fri Jan 09 11:00:00 CET 1970");
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date24);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date18, (int) (byte) 10);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, (int) (byte) 10);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date39, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date17, 0);
        java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator(date17, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date17, 2);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date25, 3, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addMonths(date25, (int) '4');
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addMonths(date30, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Sep 27 00:00:00 CEST 1990");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Aug 06 00:00:00 CEST 1992");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Fri Jan 27 00:00:00 CET 1995");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Mon Nov 27 00:00:00 CET 1995");
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.util.Iterator iterator16 = org.apache.commons.lang.time.DateUtils.iterator(date8, 2);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addSeconds(date8, 1001);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.round(date18, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:16:41 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.round(date5, (int) (short) 1);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date5, 60000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:01:00 CET 1980");
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date3, 4);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMinutes(date21, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1974");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1974");
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addSeconds(date7, (int) (short) 100);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date9, (int) '4');
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 100);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:01:40 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:01:40 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Dec 02 00:01:40 CET 1971");
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date21);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date15, (int) (byte) 10);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.add(date37, 0, (int) '#');
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addYears(date50, (int) (short) 10);
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date52);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        boolean boolean62 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date61);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date46);
        boolean boolean64 = org.apache.commons.lang.time.DateUtils.isSameInstant(date15, date46);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date46, 2);
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date66);
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray71);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray71);
        java.lang.String[] strArray76 = new java.lang.String[] { "" };
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date77, (int) (short) 10);
        java.util.Date date82 = org.apache.commons.lang.time.DateUtils.add(date77, 0, (int) '#');
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.addMonths(date82, (int) (short) 10);
        boolean boolean85 = org.apache.commons.lang.time.DateUtils.isSameDay(date73, date82);
        java.util.Date date87 = org.apache.commons.lang.time.DateUtils.addYears(date82, 3600000);
        java.lang.String[] strArray90 = new java.lang.String[] { "" };
        java.util.Date date91 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray90);
        java.util.Date date93 = org.apache.commons.lang.time.DateUtils.addYears(date91, (int) (short) 10);
        boolean boolean94 = org.apache.commons.lang.time.DateUtils.isSameDay(date87, date93);
        boolean boolean95 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date93);
        java.util.Date date97 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, (int) (short) -1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date93);
        org.junit.Assert.assertEquals(date93.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(date97);
        org.junit.Assert.assertEquals(date97.toString(), "Wed Dec 31 23:59:59 CET 1969");
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.add(date16, 10, (-1));
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, 5);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date33);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        boolean boolean43 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date27, (int) (byte) 10);
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date45);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator48 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date16, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 0 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Dec 31 23:00:00 CET 2069");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 05 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray55);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date62);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date56, date71);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date56);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addHours(date56, 1);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addDays(date56, 6);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date77, (int) (short) -1);
        java.util.Iterator iterator81 = org.apache.commons.lang.time.DateUtils.iterator(date77, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Wed Jan 07 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Tue Jan 06 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(iterator81);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.util.Iterator iterator16 = org.apache.commons.lang.time.DateUtils.iterator(date8, 6);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date8, 5);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date48);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date57);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date42);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date74, (int) (short) 10);
        boolean boolean77 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date74);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date74, 3600000);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray82);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addYears(date83, (int) (short) 10);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date79, date85);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date85);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date42);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date42, 1000);
        java.util.Date date92 = org.apache.commons.lang.time.DateUtils.addMonths(date90, (-1));
        java.util.Date date94 = org.apache.commons.lang.time.DateUtils.addDays(date90, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Mon Dec 01 00:00:01 CET 1969");
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Sun Jan 11 00:00:01 CET 1970");
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date11, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date11, (int) (byte) 0);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.add(date11, 0, 10);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addSeconds(date18, (int) ' ');
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addHours(date20, 1000);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date22, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:32 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Wed Feb 11 16:00:32 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Wed Feb 11 16:00:32 CET 1970");
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addSeconds(date16, 3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator20 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date16, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:03 CET 1970");
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addWeeks(date13, 2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 15 00:00:00 CET 1970");
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.addSeconds(date6, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date8, (int) (byte) 100, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:16:41 CET 1970");
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date24);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date18, date33);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date18, (int) (byte) 10);
        boolean boolean37 = org.apache.commons.lang.time.DateUtils.isSameInstant(date14, date36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date14, (int) (short) 10);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addMonths(date39, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator43 = org.apache.commons.lang.time.DateUtils.iterator(date41, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 100 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Apr 05 00:00:00 CEST 1977");
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round(date14, 0);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date14, 3600000);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date14, 5);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.round(date25, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date27, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 35 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Sep 08 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:05:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addYears(date5, (int) (short) 10);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addDays(date61, (int) '4');
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addYears(date67, (int) (short) 10);
        java.lang.String[] strArray72 = new java.lang.String[] { "" };
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray72);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addYears(date73, (int) (short) 10);
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.add(date73, 0, (int) '#');
        java.util.Date date80 = org.apache.commons.lang.time.DateUtils.addMonths(date78, (int) (short) 10);
        boolean boolean81 = org.apache.commons.lang.time.DateUtils.isSameDay(date67, date78);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.addMonths(date78, (int) (byte) -1);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addWeeks(date78, 4);
        java.util.Date date87 = org.apache.commons.lang.time.DateUtils.addSeconds(date78, 0);
        java.util.Date date89 = org.apache.commons.lang.time.DateUtils.addHours(date87, 2);
        java.util.Date date91 = org.apache.commons.lang.time.DateUtils.addMonths(date89, (int) 'a');
        boolean boolean92 = org.apache.commons.lang.time.DateUtils.isSameDay(date61, date89);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Mon Jan 01 00:00:00 CET 1990");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Feb 22 00:00:00 CET 1990");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Wed Feb 01 02:00:00 CET 1978");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addHours(date29, 0);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date29, (int) 'a');
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addYears(date43, (int) (short) 10);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.add(date43, 0, (int) '#');
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addMonths(date48, (int) (short) 10);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date39, date48);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addMinutes(date39, (int) (short) 100);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addWeeks(date53, 1001);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameInstant(date33, date53);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 11 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Mar 09 01:40:00 CET 1989");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date48);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date57);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date42);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date74, (int) (short) 10);
        boolean boolean77 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date74);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date74, 3600000);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray82);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addYears(date83, (int) (short) 10);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date79, date85);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date85);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date42);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.truncate(date27, (int) (byte) 10);
        java.util.Date date92 = org.apache.commons.lang.time.DateUtils.addDays(date27, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date94 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) (short) 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 10");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Sun Jan 11 00:02:00 CET 1970");
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round(date14, 0);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date14, 3600000);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMinutes(date14, (int) (short) 1);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date25, 0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Sep 08 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:01:00 CET 1970");
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date12, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date33 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date12, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 32 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1976");
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date5, 2, 1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addWeeks(date8, 86400000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date12 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date8, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Fri Mar 30 00:00:00 CEST 1657866");
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.round(date5, (int) (short) 1);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addYears(date15, (int) (short) 10);
        boolean boolean18 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date17);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addWeeks(date17, 0);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.add(date17, (int) (byte) 1, 6);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray26);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addYears(date27, (int) (short) 10);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.add(date27, 0, (int) '#');
        boolean boolean33 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMinutes(date32, 2);
        boolean boolean36 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date35);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.truncate(date7, 5);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Tue Jan 01 00:00:00 CET 1980");
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addYears(date5, (int) (short) 10);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addYears(date5, (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator65 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) (-1), (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on -1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Mon Jan 01 00:00:00 CET 1990");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Mon Jan 01 00:00:00 CET 1979");
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date17, 0);
        java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator(date17, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date17, 2);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date25, 3, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date25, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Sep 27 00:00:00 CEST 1990");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Aug 06 00:00:00 CEST 1992");
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (short) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addSeconds(date22, 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addDays(date22, (int) 'a');
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date22, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 01 00:00:00 CET 2022");
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date10 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date8, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 1000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date5, 6);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addSeconds(date61, (int) (short) 100);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addDays(date63, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date67 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) 1001, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 1001");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Tue Jan 01 00:01:40 CET 1980");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Tue Sep 28 00:01:40 CET 1982");
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (byte) 1);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date13, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) (short) -1, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round -1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 31 23:59:59 CET 1970");
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        java.util.Date date0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray7);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addYears(date8, (int) (short) 10);
        boolean boolean11 = org.apache.commons.lang.time.DateUtils.isSameDay(date4, date10);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addWeeks(date10, 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date10, (int) (byte) 1, 6);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addHours(date16, 3600000);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 4);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = org.apache.commons.lang.time.DateUtils.isSameDay(date0, date20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Sep 08 01:00:00 CEST 2396");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Wed Jan 01 00:04:00 CET 1986");
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addHours(date15, 3600000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMinutes(date17, 0);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate(date19, 2);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date25, 0, 3);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray40);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addYears(date41, (int) (short) 10);
        boolean boolean44 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date43);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date37, (int) (byte) 10);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addYears(date59, (int) (short) 10);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.add(date59, 0, (int) '#');
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray67);
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray71);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.addYears(date72, (int) (short) 10);
        boolean boolean75 = org.apache.commons.lang.time.DateUtils.isSameDay(date68, date74);
        java.lang.String[] strArray80 = new java.lang.String[] { "" };
        java.util.Date date81 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray80);
        java.util.Date date82 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray80);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray80);
        boolean boolean84 = org.apache.commons.lang.time.DateUtils.isSameDay(date68, date83);
        boolean boolean85 = org.apache.commons.lang.time.DateUtils.isSameDay(date59, date68);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameInstant(date37, date68);
        java.util.Date date88 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date68, 2);
        boolean boolean89 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date88);
        java.util.Date date91 = org.apache.commons.lang.time.DateUtils.addSeconds(date33, (int) (short) 0);
        boolean boolean92 = org.apache.commons.lang.time.DateUtils.isSameInstant(date19, date33);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Sep 08 01:00:00 CEST 2396");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Sep 08 01:00:00 CEST 2396");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Sep 01 00:00:00 CEST 2396");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addYears(date5, (int) (short) 10);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addYears(date5, (-1));
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.round(date63, 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Mon Jan 01 00:00:00 CET 1990");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Mon Jan 01 00:00:00 CET 1979");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Mon Jan 01 00:00:00 CET 1979");
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMinutes(date5, (int) (short) 100);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 1001);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.truncate(date19, (int) (short) 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addWeeks(date23, (int) (byte) 1);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 1001);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Mar 09 01:40:00 CET 1989");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Jun 08 00:00:00 CEST 2053");
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        java.lang.String[] strArray8 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMinutes(date11, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date11, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:01:00 CET 1970");
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addSeconds(date24, (int) (byte) 1);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, 0);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addSeconds(date31, 1001);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addYears(date43, (int) (short) 10);
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date39, date45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addWeeks(date45, 0);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.add(date45, (int) (byte) 1, 6);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addHours(date51, 3600000);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addHours(date51, (int) (short) -1);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameInstant(date31, date51);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:16:42 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Sep 08 01:00:00 CEST 2396");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Dec 31 23:00:00 CET 1985");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date24);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addSeconds(date24, (int) 'a');
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray35);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date36, (int) (short) 10);
        boolean boolean39 = org.apache.commons.lang.time.DateUtils.isSameDay(date32, date38);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.add(date32, (int) (short) 1, (int) (byte) 0);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.add(date42, (int) (short) 1, (int) (byte) 100);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addMinutes(date45, 86400000);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (byte) -1);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray56);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addYears(date57, (int) (short) 10);
        boolean boolean60 = org.apache.commons.lang.time.DateUtils.isSameDay(date53, date59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addWeeks(date59, 0);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.add(date59, (int) (byte) 1, 6);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        boolean boolean75 = org.apache.commons.lang.time.DateUtils.isSameDay(date59, date74);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addHours(date74, (int) (byte) -1);
        boolean boolean78 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date77);
        java.util.Date date80 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date77, 3600000);
        boolean boolean81 = org.apache.commons.lang.time.DateUtils.isSameInstant(date28, date80);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.addYears(date80, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date85 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 1");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:01:37 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Fri Jan 01 00:00:00 CET 1971");
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date24, 60000);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date31, 1);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addSeconds(date33, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator37 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 0");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 08 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 08 00:01:00 CET 1970");
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addDays(date0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date34, 5);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, 5);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray59);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addYears(date60, (int) (short) 10);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.add(date60, 0, (int) '#');
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addMonths(date65, (int) (short) 10);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addDays(date65, (int) 'a');
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addWeeks(date65, (int) '4');
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.addWeeks(date71, (int) 'a');
        java.lang.String[] strArray76 = new java.lang.String[] { "" };
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray76);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date77, (int) (short) 10);
        java.util.Date date82 = org.apache.commons.lang.time.DateUtils.add(date79, 2, 1);
        java.util.Date date84 = org.apache.commons.lang.time.DateUtils.addSeconds(date79, (int) (short) -1);
        java.util.Date date86 = org.apache.commons.lang.time.DateUtils.addSeconds(date84, 2);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameInstant(date73, date84);
        java.util.Date date89 = org.apache.commons.lang.time.DateUtils.round(date84, 0);
        boolean boolean90 = org.apache.commons.lang.time.DateUtils.isSameInstant(date34, date84);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Nov 09 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Mon Dec 31 23:59:59 CET 1979");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Tue Jan 01 00:00:01 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        java.util.Iterator iterator24 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date22, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator26 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) iterator24, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on org.apache.commons.lang.time.DateUtils$DateIterator@64e867f8");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(iterator24);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addMonths(date24, 3);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addSeconds(date26, 60000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Jul 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Jul 11 16:40:00 CEST 2134");
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date5, 2, 1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addSeconds(date10, 2);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.truncate(date12, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator16 = org.apache.commons.lang.time.DateUtils.iterator(date12, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Mon Dec 31 23:59:59 CET 1979");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:01 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Iterator iterator12 = org.apache.commons.lang.time.DateUtils.iterator(date8, (int) (byte) 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addYears(date20, (int) (short) 10);
        boolean boolean23 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addWeeks(date22, 0);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (byte) 1, 6);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addHours(date22, (int) ' ');
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameInstant(date8, date22);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMinutes(date22, 6);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (short) 100);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date40 = org.apache.commons.lang.time.DateUtils.add(date37, (int) '#', 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:06:00 CET 1980");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun May 01 00:00:00 CEST 1988");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Nov 01 00:00:00 CET 1980");
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date24);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addSeconds(date24, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addWeeks(date28, 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator32 = org.apache.commons.lang.time.DateUtils.iterator(date28, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 35 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:01:37 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Dec 02 00:01:37 CET 1971");
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, (int) (short) -1);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addHours(date34, 1);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addSeconds(date34, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date42 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date34, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Fri Dec 31 23:59:00 CET 1");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 01:00:00 CET 1");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Fri Dec 31 23:59:59 CET 1");
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.add(date16, 10, (-1));
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, 5);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, 0);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date25, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Dec 31 23:00:00 CET 2069");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 05 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Mon Jan 01 00:00:00 CET 2170");
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Iterator iterator12 = org.apache.commons.lang.time.DateUtils.iterator(date8, (int) (byte) 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addYears(date20, (int) (short) 10);
        boolean boolean23 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addWeeks(date22, 0);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (byte) 1, 6);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addHours(date22, (int) ' ');
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameInstant(date8, date22);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMinutes(date22, 6);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator37 = org.apache.commons.lang.time.DateUtils.iterator(date35, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:06:00 CET 1980");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun May 01 00:00:00 CEST 1988");
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addYears(date18, (int) (short) 10);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date24, date30);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        boolean boolean40 = org.apache.commons.lang.time.DateUtils.isSameDay(date24, date39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date24, (int) (byte) 10);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.add(date46, 0, (int) '#');
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addYears(date59, (int) (short) 10);
        boolean boolean62 = org.apache.commons.lang.time.DateUtils.isSameDay(date55, date61);
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray67);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray67);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray67);
        boolean boolean71 = org.apache.commons.lang.time.DateUtils.isSameDay(date55, date70);
        boolean boolean72 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date55);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameInstant(date24, date55);
        boolean boolean74 = org.apache.commons.lang.time.DateUtils.isSameInstant(date20, date24);
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addSeconds(date24, 2);
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.addHours(date76, (-1));
        boolean boolean79 = org.apache.commons.lang.time.DateUtils.isSameInstant(date8, date78);
        java.util.Date date81 = org.apache.commons.lang.time.DateUtils.addYears(date78, (int) (short) 1);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.addMinutes(date81, (int) '#');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 23:00:02 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Thu Dec 31 23:00:02 CET 1970");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Dec 31 23:35:02 CET 1970");
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date11 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date7, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addYears(date15, (int) (short) 10);
        boolean boolean18 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date17);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        boolean boolean27 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date26);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date11, (int) (byte) 10);
        boolean boolean30 = org.apache.commons.lang.time.DateUtils.isSameDay(date7, date29);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.add(date29, 6, (int) ' ');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, 86400000);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addMinutes(date35, 4);
        java.lang.Class<?> wildcardClass38 = date37.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date40 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date37, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 86400000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Mon Feb 02 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Mon Feb 02 00:00:00 CET 86401970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Mon Feb 02 00:04:00 CET 86401970");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addHours(date11, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = org.apache.commons.lang.time.DateUtils.truncate(date11, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 4 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 10:00:00 CET 1970");
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date3, (-1));
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, 1000);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMonths(date3, 4);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Mar 02 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Fri May 01 00:00:00 CET 1970");
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date21);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date15, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date15, (int) (byte) 10);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.add(date37, 0, (int) '#');
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addYears(date50, (int) (short) 10);
        boolean boolean53 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date52);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray58);
        boolean boolean62 = org.apache.commons.lang.time.DateUtils.isSameDay(date46, date61);
        boolean boolean63 = org.apache.commons.lang.time.DateUtils.isSameDay(date37, date46);
        boolean boolean64 = org.apache.commons.lang.time.DateUtils.isSameInstant(date15, date46);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date46, 2);
        boolean boolean67 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addMonths(date11, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date71 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date11, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addHours(date15, 3600000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMinutes(date17, 0);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate(date19, 2);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addYears(date35, (int) (short) 10);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date37);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date31, (int) (byte) 10);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.add(date53, 0, (int) '#');
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray61);
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray65);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.addYears(date66, (int) (short) 10);
        boolean boolean69 = org.apache.commons.lang.time.DateUtils.isSameDay(date62, date68);
        java.lang.String[] strArray74 = new java.lang.String[] { "" };
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray74);
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray74);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray74);
        boolean boolean78 = org.apache.commons.lang.time.DateUtils.isSameDay(date62, date77);
        boolean boolean79 = org.apache.commons.lang.time.DateUtils.isSameDay(date53, date62);
        boolean boolean80 = org.apache.commons.lang.time.DateUtils.isSameInstant(date31, date62);
        boolean boolean81 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date31);
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date27, 6);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date27, 1000);
        java.util.Date date87 = org.apache.commons.lang.time.DateUtils.addHours(date27, (int) (byte) 10);
        java.util.Date date89 = org.apache.commons.lang.time.DateUtils.addMinutes(date87, 1000);
        boolean boolean90 = org.apache.commons.lang.time.DateUtils.isSameInstant(date19, date87);
        java.util.Date date92 = org.apache.commons.lang.time.DateUtils.addYears(date87, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Sep 08 01:00:00 CEST 2396");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Sep 08 01:00:00 CEST 2396");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Sep 01 00:00:00 CEST 2396");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Jan 01 00:00:01 CET 1980");
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Tue Jan 01 10:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Wed Jan 02 02:40:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Tue Jan 01 10:00:00 CET 1980");
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        java.lang.String[] strArray8 = new java.lang.String[] { "", "", "hi!", "hi!", "hi!" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMinutes(date11, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator15 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date13, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 3600000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:01:00 CET 1970");
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addSeconds(date0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date3 = org.apache.commons.lang.time.DateUtils.add(date0, 1000, 1001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 4);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date21, (int) (short) 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, (int) (short) -1);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 28 23:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Jan 28 23:59:59 CET 1970");
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.truncate(date9, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 CET 1980");
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addYears(date18, (int) (byte) -1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date24, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date30, 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date30, (int) (byte) 1, 6);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addYears(date40, (int) (short) 10);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.add(date40, 0, (int) '#');
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date30, date45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addHours(date45, (int) (byte) -1);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date48);
        java.lang.Class<?> wildcardClass50 = date20.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date24, 1001);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMonths(date31, (int) (short) 100);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Mon May 01 00:00:01 CEST 1978");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:01 CET 1970");
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date3, 4);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) '4');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1974");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 2026");
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray13);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addYears(date18, (int) (short) 10);
        boolean boolean21 = org.apache.commons.lang.time.DateUtils.isSameDay(date14, date20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date20, 0);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.add(date20, (int) (byte) 1, 6);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addSeconds(date26, 86400000);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date28, 3, (int) '4');
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.truncate(date31, (int) (short) 10);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addWeeks(date31, 1001);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addYears(date43, (int) (short) 10);
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date39, date45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addWeeks(date45, 0);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.add(date45, (int) (byte) 1, 6);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addSeconds(date51, 86400000);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date53, (-1));
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date53, 0);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date31, date57);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addSeconds(date57, (int) (short) 100);
        boolean boolean61 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date57);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date57, 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Sep 26 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 26 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Dec 02 00:00:00 CET 2008");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sat Jan 01 00:01:40 CET 1");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, (int) (short) 10);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMonths(date24, 5);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, (int) (byte) 10);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addHours(date24, 3);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Mon Jun 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 03:00:00 CET 1970");
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addYears(date18, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addYears(date18, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date24 = org.apache.commons.lang.time.DateUtils.round(date22, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Apr 12 01:00:00 CEST 2234");
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMonths(date3, (int) (byte) 1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (byte) 10, 1000);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) (byte) 0);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addMinutes(date18, (int) (short) 1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date18, (int) (short) 0);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addWeeks(date22, 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Feb 11 16:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Mar 12 00:00:00 CET 1970");
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addSeconds(date21, 86400000);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addMonths(date23, 60000);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addYears(date35, (int) (short) 10);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.add(date35, 0, (int) '#');
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addMonths(date40, (int) (short) 10);
        boolean boolean43 = org.apache.commons.lang.time.DateUtils.isSameDay(date29, date40);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addMonths(date40, (int) (byte) -1);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.add(date40, 0, 10);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addDays(date48, 60000);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addMonths(date48, (int) (short) 10);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addSeconds(date48, 10);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addDays(date48, (int) 'a');
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addDays(date56, 10);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date25, date58);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMonths(date58, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date63 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date61, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 97 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 05 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Dec 05 00:00:00 CET 6972");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sat Apr 18 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Mar 18 00:00:00 CET 1973");
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        java.util.Iterator iterator24 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date22, (int) (byte) 1);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date32, (int) (short) 10);
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date28, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addWeeks(date34, 0);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, (int) (short) -1);
        java.util.Iterator iterator41 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date34, 4);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, 0);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date47, (int) (short) 10);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.add(date47, 0, (int) '#');
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.add(date47, 0, 3);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameInstant(date34, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date22, date55);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray61);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray66);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.addYears(date67, (int) (short) 10);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.add(date67, 0, (int) '#');
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.addMonths(date72, (int) (short) 10);
        boolean boolean75 = org.apache.commons.lang.time.DateUtils.isSameDay(date63, date72);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date72, (int) (short) 1);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.round(date72, 0);
        boolean boolean80 = org.apache.commons.lang.time.DateUtils.isSameInstant(date55, date72);
        java.util.Date date82 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date55, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.round(date35, (int) (short) 1);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addMonths(date37, (int) 'a');
        boolean boolean40 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date39);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator42 = org.apache.commons.lang.time.DateUtils.iterator(date12, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Mon Feb 01 00:00:00 CET 1988");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date19, (int) (byte) 1, 6);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date29, 0, (int) '#');
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addHours(date34, (int) (byte) -1);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date34);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, 4);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, 6);
        java.util.Iterator iterator44 = org.apache.commons.lang.time.DateUtils.iterator(date34, 5);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:06:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator44);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addWeeks(date8, (int) '4');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, (int) 'a');
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date14, 4);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.round(date14, (int) (byte) 10);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addSeconds(date14, 86400000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Nov 09 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Wed Sep 26 00:00:00 CET 1973");
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Iterator iterator16 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date9, 4);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, 0);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) (short) 10);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.add(date22, 0, (int) '#');
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date22, 0, 3);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.truncate(date30, 2);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addMinutes(date30, 1);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addHours(date30, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date39 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) 1001, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 1001");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:01:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Feb 11 17:00:00 CET 1970");
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 4, 3600000);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMonths(date19, (int) '#');
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 1000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Mon Dec 29 23:59:59 CET 70983");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Mon Aug 26 23:59:59 CEST 1991");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Mon Nov 26 23:59:59 CET 2007");
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date48);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date57);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date42);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date74, (int) (short) 10);
        boolean boolean77 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date74);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date74, 3600000);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray82);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addYears(date83, (int) (short) 10);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date79, date85);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date85);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date42);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date90 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) boolean88, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate false");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray13);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addYears(date18, (int) (short) 10);
        boolean boolean21 = org.apache.commons.lang.time.DateUtils.isSameDay(date14, date20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date20, 0);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.add(date20, (int) (byte) 1, 6);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addSeconds(date26, 86400000);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date28, 3, (int) '4');
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.truncate(date31, (int) (short) 10);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addWeeks(date31, 1001);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addYears(date43, (int) (short) 10);
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date39, date45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addWeeks(date45, 0);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.add(date45, (int) (byte) 1, 6);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addSeconds(date51, 86400000);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date53, (-1));
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date53, 0);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date31, date57);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addSeconds(date57, (int) (short) 100);
        boolean boolean61 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date57);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addMinutes(date57, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Sep 26 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Sep 26 00:00:00 CET 1989");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Dec 02 00:00:00 CET 2008");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sat Jan 01 00:01:40 CET 1");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, (int) (byte) 10);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, (int) (byte) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) (byte) 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not truncate 10");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Mar 12 10:00:00 CET 3601970");
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date5, 2, 1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, 1000);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addWeeks(date12, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date16 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) '4', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 4");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Mon Dec 31 23:59:59 CET 1979");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:16:40 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Dec 30 00:16:40 CET 1980");
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date34, 6);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addSeconds(date34, 60000);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addWeeks(date40, (-1));
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date40, (int) (short) 1);
        java.lang.Class<?> wildcardClass45 = date40.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Jan 01 00:00:00 CET 7");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 01 16:40:00 CET 1");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Dec 25 16:40:00 CET 1");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Jan 01 16:40:00 CET 1");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addMinutes(date11, (int) (byte) 100);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray17);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date23, 0, (int) '#');
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addMonths(date28, (int) (short) 10);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date28);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date28, (int) (short) 1);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.round(date33, (int) (short) 1);
        boolean boolean36 = org.apache.commons.lang.time.DateUtils.isSameDay(date11, date33);
        java.lang.Class<?> wildcardClass37 = date33.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.round(date12, 2);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addHours(date12, 0);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date12, 5);
        java.lang.Class<?> wildcardClass19 = date18.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addHours(date11, (int) (short) 10);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addWeeks(date11, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = org.apache.commons.lang.time.DateUtils.round(date11, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Dec 02 00:00:00 CET 1971");
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date34, 2);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addDays(date34, (int) 'a');
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addSeconds(date56, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date60 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date58, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3600000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Wed Apr 08 00:01:40 CET 1970");
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Iterator iterator59 = org.apache.commons.lang.time.DateUtils.iterator(date12, (int) (byte) 1);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addMinutes(date12, (int) (short) 100);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.add(date61, (int) (short) 1, 0);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date61, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(iterator59);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 01:40:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (short) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addSeconds(date22, 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addDays(date22, (int) 'a');
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date34 = org.apache.commons.lang.time.DateUtils.truncate(date22, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Apr 11 00:00:00 CEST 2134");
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, (-1));
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.round(date38, 0);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addWeeks(date40, (int) '4');
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date42, 5);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 31 23:59:00 CET 97");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Dec 31 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Dec 31 00:00:00 CET 1");
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addSeconds(date9, 2);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray64);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addYears(date65, (int) (short) 10);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.add(date65, 0, (int) '#');
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.addHours(date65, (-1));
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date72);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addMonths(date9, 60000);
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:02 CET 1970");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Mon Jan 01 00:00:00 CET 6970");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Mar 12 00:00:00 CET 1970");
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date19, (int) (byte) 1, 6);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date29, 0, (int) '#');
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addHours(date34, (int) (byte) -1);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date34);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, 4);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addYears(date50, (int) (short) 10);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.add(date50, 0, (int) '#');
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addMonths(date55, (int) (short) 10);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date44, date55);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addMonths(date55, (int) (byte) -1);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.add(date55, 0, 10);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date55, 3);
        boolean boolean66 = org.apache.commons.lang.time.DateUtils.isSameInstant(date40, date65);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date40, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date70 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date68, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date31);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date40);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date25, (int) (byte) 10);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addHours(date25, (int) '#');
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addSeconds(date25, (int) (short) 1);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date47, (int) (byte) 0);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date21, date47);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addMinutes(date21, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Wed Mar 11 00:00:00 CET 1970");
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addHours(date3, (int) '#');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date3, (int) (short) 1);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addYears(date35, (int) (short) 10);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.add(date35, 0, (int) '#');
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addMonths(date40, (int) (short) 10);
        boolean boolean43 = org.apache.commons.lang.time.DateUtils.isSameDay(date29, date40);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addMonths(date40, (int) (byte) -1);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addWeeks(date40, 4);
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray50);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addYears(date51, (int) (short) 10);
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray56);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addYears(date57, (int) (short) 10);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.add(date57, 0, (int) '#');
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addMonths(date62, (int) (short) 10);
        boolean boolean65 = org.apache.commons.lang.time.DateUtils.isSameDay(date51, date62);
        java.util.Date date67 = org.apache.commons.lang.time.DateUtils.addMonths(date62, (int) (byte) -1);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.add(date62, 0, 10);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.addDays(date70, 60000);
        boolean boolean73 = org.apache.commons.lang.time.DateUtils.isSameDay(date47, date70);
        java.util.Date date75 = org.apache.commons.lang.time.DateUtils.addHours(date70, (int) ' ');
        java.util.Date date77 = org.apache.commons.lang.time.DateUtils.round(date75, (int) (byte) 10);
        boolean boolean78 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date77);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date80 = org.apache.commons.lang.time.DateUtils.truncate(date77, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3600000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 29 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Fri Jan 02 08:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Fri Jan 02 08:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        java.lang.Object obj0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.truncate(obj0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round(date24, 5);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.add(date33, 0, 3);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date41, 0);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addYears(date41, (int) (byte) 0);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.add(date41, 0, 10);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addSeconds(date48, (int) ' ');
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date29, date50);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addWeeks(date50, 0);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.add(date50, 0, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:32 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:32 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:32 CET 1970");
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.add(date16, 10, (-1));
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, 5);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date33);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        boolean boolean43 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date27, (int) (byte) 10);
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addSeconds(date16, 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Dec 31 23:00:00 CET 2069");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 05 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Jan 01 00:00:10 CET 2070");
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addMonths(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date44);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addYears(date44, 3600000);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.addYears(date53, (int) (short) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date49, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date55);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addHours(date12, (int) (byte) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addWeeks(date59, (int) (short) 10);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addSeconds(date59, (int) (short) -1);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addSeconds(date59, (int) (short) -1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Mar 12 10:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 09:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 09:59:59 CET 1970");
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (short) 10);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray29);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addYears(date30, (int) (short) 10);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addMonths(date32, (int) '#');
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date22, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addMinutes(date34, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 01 00:00:00 CET 1982");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 01 00:10:00 CET 1982");
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray13);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.add(date14, 0, (int) '#');
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addHours(date14, (-1));
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date14);
        java.lang.Class<?> wildcardClass23 = date14.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date24, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date27, (-1), (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Mon May 01 00:00:00 CEST 1978");
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addMinutes(date19, (int) (short) 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addSeconds(date23, (int) (byte) -1);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 1001);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMonths(date27, (-1));
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date29, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Dec 01 00:10:00 CET 1969");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon Dec 01 00:09:59 CET 1969");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Mon Feb 06 00:09:59 CET 1989");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Fri Jan 06 00:09:59 CET 1989");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Fri Jan 06 00:00:00 CET 1989");
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) 'a');
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date33);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        boolean boolean43 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date27, (int) (byte) 10);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addWeeks(date27, (int) 'a');
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.truncate(date27, 1001);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date27, 1001);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addDays(date27, 3);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.truncate(date53, (int) (byte) 10);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date23, date53);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date58 = org.apache.commons.lang.time.DateUtils.truncate(date53, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3600000 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Jan 04 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Jan 04 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMinutes(date29, 2);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date29, 4);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addDays(date33, (int) '4');
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addMinutes(date33, (int) (byte) 10);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addMinutes(date37, 10);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addDays(date37, (-1));
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Feb 22 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:20:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 00:10:00 CET 1969");
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "" };
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray7);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addSeconds(date8, 3600000);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Feb 11 16:00:00 CET 1970");
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addWeeks(date8, 3);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addSeconds(date8, (int) '4');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 22 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:52 CET 1970");
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.addYears(date13, (int) (short) 10);
        boolean boolean16 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date15);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray21);
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, (int) (byte) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date31, 0, (int) '#');
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date46);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray52);
        boolean boolean56 = org.apache.commons.lang.time.DateUtils.isSameDay(date40, date55);
        boolean boolean57 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date40);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date40);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameInstant(date5, date9);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.add(date9, 5, 10);
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.addMinutes(date62, (int) (byte) 10);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addMinutes(date62, (int) (byte) 0);
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.add(date62, 2, 0);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addMinutes(date62, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator73 = org.apache.commons.lang.time.DateUtils.iterator(date71, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 86400000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Jan 11 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sun Jan 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sun Jan 11 00:10:00 CET 1970");
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date19, (int) (byte) 1, 6);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date29, 0, (int) '#');
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addHours(date34, (int) (byte) -1);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date34);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date34, 4);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addYears(date50, (int) (short) 10);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.add(date50, 0, (int) '#');
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addMonths(date55, (int) (short) 10);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date44, date55);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addMonths(date55, (int) (byte) -1);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.add(date55, 0, 10);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date55, 3);
        boolean boolean66 = org.apache.commons.lang.time.DateUtils.isSameInstant(date40, date65);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.truncate(date40, 10);
        java.util.Date date70 = org.apache.commons.lang.time.DateUtils.addMonths(date40, 1);
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.addHours(date70, 60000);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.addHours(date72, (int) 'a');
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMinutes(date72, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sun Feb 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Mon Dec 06 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Fri Dec 10 01:00:00 CET 1976");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Mon Dec 06 00:01:00 CET 1976");
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.addDays(date5, 10);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMonths(date5, 6);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date5, 1001);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date13 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) 1001, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not round 1001");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Jan 11 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jul 01 00:00:00 CEST 1980");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.add(date16, 10, (-1));
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date16, 5);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addYears(date31, (int) (short) 10);
        boolean boolean34 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date33);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        boolean boolean43 = org.apache.commons.lang.time.DateUtils.isSameDay(date27, date42);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date27, (int) (byte) 10);
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date16, date45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray49);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addYears(date50, (int) (short) 10);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray55);
        java.util.Date date58 = org.apache.commons.lang.time.DateUtils.addYears(date56, (int) (short) 10);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.add(date56, 0, (int) '#');
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.addMonths(date61, (int) (short) 10);
        boolean boolean64 = org.apache.commons.lang.time.DateUtils.isSameDay(date50, date61);
        java.util.Date date66 = org.apache.commons.lang.time.DateUtils.addMonths(date61, (int) (byte) -1);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.addDays(date66, (int) (byte) 100);
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.Date date72 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray71);
        java.lang.String[] strArray75 = new java.lang.String[] { "" };
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray75);
        java.util.Date date78 = org.apache.commons.lang.time.DateUtils.addYears(date76, (int) (short) 10);
        boolean boolean79 = org.apache.commons.lang.time.DateUtils.isSameDay(date72, date78);
        java.lang.String[] strArray84 = new java.lang.String[] { "" };
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray84);
        java.util.Date date86 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray84);
        java.util.Date date87 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray84);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameDay(date72, date87);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date72, (int) (byte) 10);
        java.util.Date date92 = org.apache.commons.lang.time.DateUtils.addHours(date72, (int) '#');
        java.util.Date date94 = org.apache.commons.lang.time.DateUtils.addSeconds(date72, (int) (short) 1);
        java.util.Date date96 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date94, (int) (byte) 0);
        boolean boolean97 = org.apache.commons.lang.time.DateUtils.isSameDay(date68, date94);
        boolean boolean98 = org.apache.commons.lang.time.DateUtils.isSameDay(date45, date68);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Dec 31 23:00:00 CET 2069");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 05 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date96);
        org.junit.Assert.assertEquals(date96.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) 'a');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.truncate(date3, 1001);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date3, 1001);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addDays(date3, 3);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray36);
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.addYears(date37, (int) (short) 10);
        boolean boolean40 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.addYears(date44, (int) (short) 10);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.add(date44, 0, (int) '#');
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addHours(date44, (-1));
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date39, date44);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addMinutes(date44, (int) '4');
        boolean boolean55 = org.apache.commons.lang.time.DateUtils.isSameDay(date29, date54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addSeconds(date54, 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Jan 04 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:52:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:52:01 CET 1970");
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addHours(date3, (-1));
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date3, 100);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addYears(date25, (int) (short) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.add(date25, 0, (int) '#');
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray37);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addYears(date38, (int) (short) 10);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date40);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray46);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameDay(date34, date49);
        boolean boolean51 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date34);
        boolean boolean52 = org.apache.commons.lang.time.DateUtils.isSameInstant(date3, date34);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date34, 2);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.addDays(date34, (int) 'a');
        java.util.Iterator iterator58 = org.apache.commons.lang.time.DateUtils.iterator(date56, 3);
        java.util.Date date60 = org.apache.commons.lang.time.DateUtils.addSeconds(date56, 100);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.addMonths(date56, 2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator58);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Apr 08 00:01:40 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Mon Jun 08 00:00:00 CET 1970");
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray13);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.add(date14, 0, (int) '#');
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addHours(date14, (-1));
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date14);
        java.lang.Class<?> wildcardClass23 = date9.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMinutes(date24, 2);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addSeconds(date27, (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addYears(date33, (int) (short) 10);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.add(date33, 0, (int) '#');
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addYears(date46, (int) (short) 10);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date48);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date56 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray54);
        boolean boolean58 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date57);
        boolean boolean59 = org.apache.commons.lang.time.DateUtils.isSameDay(date33, date42);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.Date date64 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.util.Date date65 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.Date date69 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray68);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.addYears(date69, (int) (short) 10);
        java.util.Date date74 = org.apache.commons.lang.time.DateUtils.add(date69, 0, (int) '#');
        java.util.Date date76 = org.apache.commons.lang.time.DateUtils.addMonths(date74, (int) (short) 10);
        boolean boolean77 = org.apache.commons.lang.time.DateUtils.isSameDay(date65, date74);
        java.util.Date date79 = org.apache.commons.lang.time.DateUtils.addYears(date74, 3600000);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.Date date83 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray82);
        java.util.Date date85 = org.apache.commons.lang.time.DateUtils.addYears(date83, (int) (short) 10);
        boolean boolean86 = org.apache.commons.lang.time.DateUtils.isSameDay(date79, date85);
        boolean boolean87 = org.apache.commons.lang.time.DateUtils.isSameDay(date42, date85);
        boolean boolean88 = org.apache.commons.lang.time.DateUtils.isSameInstant(date27, date42);
        java.util.Date date90 = org.apache.commons.lang.time.DateUtils.truncate(date27, (int) (byte) 10);
        java.util.Date date92 = org.apache.commons.lang.time.DateUtils.addDays(date27, (int) (short) 10);
        java.util.Date date94 = org.apache.commons.lang.time.DateUtils.addHours(date27, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator96 = org.apache.commons.lang.time.DateUtils.iterator(date94, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 10 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:01:59 CET 1970");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Sun Jan 11 00:02:00 CET 1970");
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Thu Jan 01 04:02:00 CET 1970");
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addDays(date8, (int) 'a');
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date8, 3600000);
        java.util.Iterator iterator16 = org.apache.commons.lang.time.DateUtils.iterator(date8, 2);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.add(date8, (int) (byte) 0, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Nov 05 00:00:00 CET 1976");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator15 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date3, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 60000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date21, (int) (short) 0);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addSeconds(date30, 1001);
        boolean boolean33 = org.apache.commons.lang.time.DateUtils.isSameDay(date21, date30);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date35 = org.apache.commons.lang.time.DateUtils.round(date21, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:16:41 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray4);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addMinutes(date7, (int) (byte) 10);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date17, (int) (short) 10);
        boolean boolean20 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date19);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, 0);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date19, (int) (byte) 1, 6);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.add(date29, 0, (int) '#');
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addHours(date34, (int) (byte) -1);
        boolean boolean38 = org.apache.commons.lang.time.DateUtils.isSameInstant(date7, date34);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.addSeconds(date7, (int) (byte) 1);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addMonths(date40, (int) '#');
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:10:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Fri Dec 01 00:00:01 CET 1972");
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addYears(date16, (int) (short) 10);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date18);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        boolean boolean28 = org.apache.commons.lang.time.DateUtils.isSameDay(date12, date27);
        boolean boolean29 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date12);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.add(date3, 5, 1001);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addMinutes(date3, 3);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Sep 28 00:00:00 CET 1972");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:03:00 CET 1970");
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addYears(date34, (int) 'a');
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addMinutes(date36, (-1));
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.round(date38, 0);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addWeeks(date40, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator44 = org.apache.commons.lang.time.DateUtils.iterator(date42, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 52 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 01 00:00:00 CET 98");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 31 23:59:00 CET 97");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Dec 31 00:00:00 CET 1");
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date5, 2, 1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, (int) (short) -1);
        java.util.Date date11 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Mon Dec 31 23:59:59 CET 1979");
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "", "hi!", "hi!" };
        java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray5);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.addSeconds(date6, (int) (short) 10);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.round(date6, 2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 CET 1970");
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, (int) (byte) 0);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.add(date13, (int) (short) 1, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addMinutes(date16, 86400000);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addYears(date18, (int) (byte) -1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addYears(date28, (int) (short) 10);
        boolean boolean31 = org.apache.commons.lang.time.DateUtils.isSameDay(date24, date30);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addWeeks(date30, 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.add(date30, (int) (byte) 1, 6);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addYears(date40, (int) (short) 10);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.add(date40, 0, (int) '#');
        boolean boolean46 = org.apache.commons.lang.time.DateUtils.isSameDay(date30, date45);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addHours(date45, (int) (byte) -1);
        boolean boolean49 = org.apache.commons.lang.time.DateUtils.isSameDay(date20, date48);
        java.util.Date date51 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date48, 3600000);
        java.util.Date date53 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date48, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator55 = org.apache.commons.lang.time.DateUtils.iterator(date53, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 52 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Jan 01 00:00:00 CET 2070");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 12 01:00:00 CEST 2234");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Apr 12 01:00:00 CEST 2233");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Dec 31 23:00:00 CET 1969");
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) 'a');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.truncate(date3, 1001);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date3, 1001);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addDays(date3, 3);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date29, 4);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Jan 04 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Jan 04 00:00:00 CET 1970");
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.truncate(date24, (int) (short) 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addSeconds(date24, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator33 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date31, 86400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style 86400000 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:01 CET 1970");
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date3, 4);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date3, (int) (short) 1, 3);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date3, (int) (short) -1);
        java.util.Iterator iterator28 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) date26, 2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1974");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Mon Jan 01 00:00:00 CET 1973");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 23:59:59 CET 1969");
        org.junit.Assert.assertNotNull(iterator28);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray22);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date23, (int) (short) 10);
        boolean boolean26 = org.apache.commons.lang.time.DateUtils.isSameDay(date19, date25);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.add(date25, (int) (byte) 1, 6);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 0);
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.addDays(date9, 3600000);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addHours(date9, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date40 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date38, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 100 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Jun 19 00:00:00 CEST 11836");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Tue Jan 01 00:00:00 CET 1980");
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        java.lang.String[] strArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Date and Patterns must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray13);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.add(date14, 0, (int) '#');
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addHours(date14, (-1));
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date14);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addSeconds(date14, (int) (short) 1);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addWeeks(date14, (int) '4');
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date26, (int) (byte) 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addDays(date26, (int) '#');
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.truncate(date30, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:01 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Dec 31 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Feb 04 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Feb 04 00:00:00 CET 1971");
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addHours(date22, 3600000);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addMinutes(date26, (int) (byte) 1);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray35);
        java.util.Date date38 = org.apache.commons.lang.time.DateUtils.addYears(date36, (int) (short) 10);
        boolean boolean39 = org.apache.commons.lang.time.DateUtils.isSameDay(date32, date38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addWeeks(date38, 0);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addMinutes(date38, (int) (short) -1);
        java.util.Date date45 = org.apache.commons.lang.time.DateUtils.addMinutes(date38, 1000);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date45, 6);
        boolean boolean48 = org.apache.commons.lang.time.DateUtils.isSameInstant(date28, date47);
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addMinutes(date28, 1001);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Mon Sep 08 01:00:00 CEST 2380");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Mon Sep 08 01:01:00 CEST 2380");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Tue Jan 01 16:40:00 CET 1980");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Tue Jan 01 16:40:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Mon Sep 08 17:42:00 CEST 2380");
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (short) 10, 2);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, (int) (short) 100);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMonths(date31, (int) 'a');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.truncate(date33, 1);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date40, 3600000);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addHours(date42, (int) (short) -1);
        boolean boolean45 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date42);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addSeconds(date42, 6);
        java.lang.Class<?> wildcardClass48 = date47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Dec 02 02:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Jan 02 02:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 01:00:06 CET 1970");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = org.apache.commons.lang.time.DateUtils.truncate(calendar0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date9, 0);
        java.util.Iterator iterator19 = org.apache.commons.lang.time.DateUtils.iterator(date17, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date17, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(iterator19);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addHours(date9, (int) ' ');
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate(date19, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 52 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Jan 02 08:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Jan 01 00:00:00 CET 2080");
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addMonths(date8, (int) (short) 10);
        java.util.Iterator iterator12 = org.apache.commons.lang.time.DateUtils.iterator(date8, (int) (byte) 1);
        java.lang.Class<?> wildcardClass13 = iterator12.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.addSeconds(date15, 86400000);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date17, (-1));
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date17, 0);
        java.util.Iterator iterator23 = org.apache.commons.lang.time.DateUtils.iterator(date17, (int) (byte) 1);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.addYears(date17, 2);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.add(date25, 3, (int) 'a');
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, (int) (short) 1);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addMinutes(date30, 0);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addHours(date30, (-1));
        java.util.Date date36 = org.apache.commons.lang.time.DateUtils.round(date34, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Sep 27 00:00:00 CET 1988");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 26 23:59:59 CET 1988");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Jan 01 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Sep 27 00:00:00 CEST 1990");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Aug 06 00:00:00 CEST 1992");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Oct 04 00:00:00 CET 1990");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Oct 04 00:00:00 CET 1990");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Oct 03 23:00:00 CET 1990");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Oct 03 23:00:00 CET 1990");
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, (int) (short) -1);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMinutes(date9, 1);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.round(date9, (int) (short) 10);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addWeeks(date18, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Dec 31 23:59:00 CET 1979");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:01:00 CET 1980");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Jan 08 00:00:00 CET 1980");
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addDays(date19, (int) (byte) 100);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.truncate(date19, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Mar 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Jan 01 00:00:00 CET 1");
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addDays(date27, 60000);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date27, (int) ' ');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Apr 10 23:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Mon Dec 31 23:00:00 CET 2001");
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date32, (int) (short) 10);
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date28, date34);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.addWeeks(date34, 0);
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.add(date34, (int) (byte) 1, 6);
        boolean boolean41 = org.apache.commons.lang.time.DateUtils.isSameDay(date22, date34);
        java.util.Iterator iterator43 = org.apache.commons.lang.time.DateUtils.iterator(date34, (int) (short) 1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(iterator43);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        java.lang.String[] strArray1 = new java.lang.String[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date2 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray1);
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unable to parse the date: hi!");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date5, 2, 1);
        java.util.Date date10 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, (int) (short) -1);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, 1000);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, 100);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addDays(date5, (int) (byte) 100);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.addSeconds(date5, 86400000);
        java.util.Date date20 = org.apache.commons.lang.time.DateUtils.addYears(date18, (-1));
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Mon Dec 31 23:59:59 CET 1979");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:16:40 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Jan 01 00:01:40 CET 1980");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Apr 10 00:00:00 CEST 1980");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Mon Sep 27 00:00:00 CET 1982");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Sep 27 00:00:00 CEST 1981");
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "", "", "" };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date6 = org.apache.commons.lang.time.DateUtils.parseDate("hi!", strArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern character 'i'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray13);
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addYears(date14, (int) (short) 10);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.add(date14, 0, (int) '#');
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addHours(date14, (-1));
        boolean boolean22 = org.apache.commons.lang.time.DateUtils.isSameInstant(date9, date14);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addMinutes(date14, (int) '4');
        java.util.Iterator iterator26 = org.apache.commons.lang.time.DateUtils.iterator(date24, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date29 = org.apache.commons.lang.time.DateUtils.add(date24, 100, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:52:00 CET 1970");
        org.junit.Assert.assertNotNull(iterator26);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addYears(date14, 3600000);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) ' ');
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addWeeks(date19, (int) (byte) 10);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addYears(date32, (int) (short) 10);
        boolean boolean35 = org.apache.commons.lang.time.DateUtils.isSameDay(date28, date34);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray40);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray40);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray40);
        boolean boolean44 = org.apache.commons.lang.time.DateUtils.isSameDay(date28, date43);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date28, (int) (byte) 10);
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.addHours(date28, (int) '#');
        java.util.Date date50 = org.apache.commons.lang.time.DateUtils.addMinutes(date48, (int) (short) 0);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date48, 100);
        java.util.Date date55 = org.apache.commons.lang.time.DateUtils.add(date48, (int) (short) 1, (int) (byte) 1);
        java.util.Date date57 = org.apache.commons.lang.time.DateUtils.addSeconds(date48, (int) (short) 100);
        java.util.Date date59 = org.apache.commons.lang.time.DateUtils.addWeeks(date57, (int) (byte) -1);
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.addYears(date59, 1000);
        boolean boolean62 = org.apache.commons.lang.time.DateUtils.isSameInstant(date19, date59);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date64 = org.apache.commons.lang.time.DateUtils.truncate(date59, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field -1 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Mar 12 00:00:00 CET 3601970");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Fri Jan 02 11:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Jan 02 11:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Fri Jan 02 11:01:40 CET 1970");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Fri Dec 26 11:01:40 CET 1969");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Tue Dec 26 11:01:40 CET 2969");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.util.Date date4 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date5, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date14, (int) (short) 1);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.round(date19, (int) (short) 1);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray24);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray28);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addYears(date29, (int) (short) 10);
        boolean boolean32 = org.apache.commons.lang.time.DateUtils.isSameDay(date25, date31);
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addWeeks(date31, 0);
        java.util.Date date37 = org.apache.commons.lang.time.DateUtils.add(date31, (int) (byte) 1, 6);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray40);
        java.util.Date date43 = org.apache.commons.lang.time.DateUtils.addYears(date41, (int) (short) 10);
        java.util.Date date46 = org.apache.commons.lang.time.DateUtils.add(date41, 0, (int) '#');
        boolean boolean47 = org.apache.commons.lang.time.DateUtils.isSameDay(date31, date46);
        java.util.Date date49 = org.apache.commons.lang.time.DateUtils.addMonths(date46, (int) (byte) 100);
        boolean boolean50 = org.apache.commons.lang.time.DateUtils.isSameInstant(date19, date46);
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.addDays(date46, (int) (byte) 100);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addHours(date46, (int) (short) 100);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Mon May 01 00:00:00 CEST 1978");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sat Apr 11 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Mon Jan 05 04:00:00 CET 1970");
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.util.Date date8 = org.apache.commons.lang.time.DateUtils.add(date3, 0, (int) '#');
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.add(date3, 0, 3);
        java.util.Date date13 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray20);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addYears(date21, (int) (short) 10);
        boolean boolean24 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date23);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray29);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray29);
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray29);
        boolean boolean33 = org.apache.commons.lang.time.DateUtils.isSameDay(date17, date32);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date17, (int) (byte) 10);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.Date date39 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray38);
        java.util.Date date41 = org.apache.commons.lang.time.DateUtils.addYears(date39, (int) (short) 10);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.add(date39, 0, (int) '#');
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.Date date48 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.Date date52 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray51);
        java.util.Date date54 = org.apache.commons.lang.time.DateUtils.addYears(date52, (int) (short) 10);
        boolean boolean55 = org.apache.commons.lang.time.DateUtils.isSameDay(date48, date54);
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.Date date61 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray60);
        java.util.Date date62 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray60);
        java.util.Date date63 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray60);
        boolean boolean64 = org.apache.commons.lang.time.DateUtils.isSameDay(date48, date63);
        boolean boolean65 = org.apache.commons.lang.time.DateUtils.isSameDay(date39, date48);
        boolean boolean66 = org.apache.commons.lang.time.DateUtils.isSameInstant(date17, date48);
        java.util.Date date68 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date48, 2);
        java.util.Date date71 = org.apache.commons.lang.time.DateUtils.add(date48, (int) (byte) 10, (int) (byte) 0);
        java.util.Date date73 = org.apache.commons.lang.time.DateUtils.addWeeks(date48, 100);
        boolean boolean74 = org.apache.commons.lang.time.DateUtils.isSameDay(date13, date73);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date76 = org.apache.commons.lang.time.DateUtils.truncate(date73, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field 3 is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Dec 02 00:00:00 CET 1971");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.add(date22, (int) (short) 10, 2);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMonths(date25, 0);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addWeeks(date25, (int) (short) 100);
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addMonths(date31, (int) 'a');
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.truncate(date33, 1);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        java.util.Date date40 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray39);
        java.util.Date date42 = org.apache.commons.lang.time.DateUtils.addMilliseconds(date40, 3600000);
        java.util.Date date44 = org.apache.commons.lang.time.DateUtils.addHours(date42, (int) (short) -1);
        boolean boolean45 = org.apache.commons.lang.time.DateUtils.isSameDay(date35, date42);
        java.util.Date date47 = org.apache.commons.lang.time.DateUtils.addSeconds(date42, 6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator49 = org.apache.commons.lang.time.DateUtils.iterator((java.lang.Object) 6, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: Could not iterate based on 6");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 02:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Dec 02 02:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Jan 02 02:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 01:00:06 CET 1970");
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.util.Date date5 = org.apache.commons.lang.time.DateUtils.addYears(date3, (int) (short) 10);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray8);
        java.util.Date date11 = org.apache.commons.lang.time.DateUtils.addYears(date9, (int) (short) 10);
        java.util.Date date14 = org.apache.commons.lang.time.DateUtils.add(date9, 0, (int) '#');
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (short) 10);
        boolean boolean17 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date14);
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.addMonths(date14, (int) (byte) -1);
        java.util.Date date22 = org.apache.commons.lang.time.DateUtils.add(date14, 0, 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.addDays(date22, 60000);
        java.util.Date date26 = org.apache.commons.lang.time.DateUtils.addMonths(date22, (int) (short) 10);
        java.util.Date date28 = org.apache.commons.lang.time.DateUtils.addSeconds(date22, 10);
        java.util.Date date30 = org.apache.commons.lang.time.DateUtils.addDays(date22, (int) 'a');
        java.util.Date date32 = org.apache.commons.lang.time.DateUtils.addYears(date22, (int) '4');
        java.util.Date date34 = org.apache.commons.lang.time.DateUtils.addDays(date32, 3600000);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Dec 01 00:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Apr 11 00:00:00 CEST 2134");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Nov 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:10 CET 1970");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Apr 08 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Jan 01 00:00:00 CET 2022");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jun 20 00:00:00 CEST 11878");
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.Date date16 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date17 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        java.util.Date date18 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray15);
        boolean boolean19 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.truncate((java.lang.Object) date3, (int) (byte) 10);
        java.util.Date date23 = org.apache.commons.lang.time.DateUtils.addWeeks(date3, (int) 'a');
        java.util.Date date25 = org.apache.commons.lang.time.DateUtils.truncate(date3, 1001);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.round((java.lang.Object) date3, 1001);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.addMonths(date27, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator iterator31 = org.apache.commons.lang.time.DateUtils.iterator(date27, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The range style -1 is not valid.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Nov 01 00:00:00 CET 1970");
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.util.Date date3 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.Date date7 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray6);
        java.util.Date date9 = org.apache.commons.lang.time.DateUtils.addYears(date7, (int) (short) 10);
        boolean boolean10 = org.apache.commons.lang.time.DateUtils.isSameDay(date3, date9);
        java.util.Date date12 = org.apache.commons.lang.time.DateUtils.addWeeks(date9, 0);
        java.util.Date date15 = org.apache.commons.lang.time.DateUtils.add(date9, (int) (byte) 1, 6);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.Date date19 = org.apache.commons.lang.time.DateUtils.parseDate("", strArray18);
        java.util.Date date21 = org.apache.commons.lang.time.DateUtils.addYears(date19, (int) (short) 10);
        java.util.Date date24 = org.apache.commons.lang.time.DateUtils.add(date19, 0, (int) '#');
        boolean boolean25 = org.apache.commons.lang.time.DateUtils.isSameDay(date9, date24);
        java.util.Date date27 = org.apache.commons.lang.time.DateUtils.addHours(date24, (int) (byte) -1);
        java.util.Date date29 = org.apache.commons.lang.time.DateUtils.round(date24, 5);
        java.util.Date date31 = org.apache.commons.lang.time.DateUtils.addWeeks(date29, (int) 'a');
        java.util.Date date33 = org.apache.commons.lang.time.DateUtils.addSeconds(date31, 0);
        java.util.Date date35 = org.apache.commons.lang.time.DateUtils.addSeconds(date31, 6);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jan 01 00:00:00 CET 1986");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 23:00:00 CET 1969");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Nov 11 00:00:00 CET 1971");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Nov 11 00:00:06 CET 1971");
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        boolean boolean7 = realMatrixImpl6.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl10.add(realMatrixImpl13);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl17.add(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl20.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        boolean boolean26 = realMatrixImpl20.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl32);
        int int34 = realMatrixImpl32.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl20.subtract(realMatrixImpl32);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl13.subtract(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl39.add(realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl42.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl36.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl51.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = realMatrixImpl58.add(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrixImpl61.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl65);
        boolean boolean67 = realMatrixImpl61.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix74 = realMatrixImpl70.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl73);
        int int75 = realMatrixImpl73.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = realMatrixImpl61.subtract(realMatrixImpl73);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl54.subtract(realMatrixImpl76);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = realMatrixImpl80.add(realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix88 = realMatrixImpl83.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl87);
        org.apache.commons.math.linear.RealMatrix realMatrix89 = realMatrixImpl77.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrix realMatrix90 = realMatrixImpl42.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl83);
        double[][] doubleArray91 = realMatrixImpl83.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl92 = realMatrixImpl6.subtract(realMatrixImpl83);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix97 = realMatrixImpl83.getSubMatrix((int) (short) -1, (int) (byte) 0, 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrixImpl62);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(realMatrix74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl76);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertNotNull(realMatrixImpl84);
        org.junit.Assert.assertNotNull(realMatrix88);
        org.junit.Assert.assertNotNull(realMatrix89);
        org.junit.Assert.assertNotNull(realMatrix90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(realMatrixImpl92);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        double[] doubleArray42 = realMatrixImpl34.getColumn(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl45.add(realMatrixImpl48);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl52.add(realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrixImpl55.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl59);
        boolean boolean61 = realMatrixImpl55.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl64.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl67);
        int int69 = realMatrixImpl67.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = realMatrixImpl55.subtract(realMatrixImpl67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = realMatrixImpl48.subtract(realMatrixImpl70);
        org.apache.commons.math.linear.RealMatrix realMatrix73 = realMatrixImpl71.getColumnMatrix(0);
        double[][] doubleArray74 = realMatrixImpl71.getData();
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl34.setSubMatrix(doubleArray74, (int) (byte) 10, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl49);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl70);
        org.junit.Assert.assertNotNull(realMatrixImpl71);
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertNotNull(doubleArray74);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray25);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray25, true);
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl28.getData();
        java.math.BigDecimal[][] bigDecimalArray30 = bigMatrixImpl28.getData();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        int int3 = bigMatrixImpl2.getScale();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 64 + "'", int3 == 64);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        double[][] doubleArray41 = realMatrixImpl28.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl44.add(realMatrixImpl47);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl51.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrixImpl54.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl58);
        boolean boolean60 = realMatrixImpl54.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl63.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        int int68 = realMatrixImpl66.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl54.subtract(realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = realMatrixImpl47.subtract(realMatrixImpl69);
        double[] doubleArray72 = realMatrixImpl47.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl78 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl79 = realMatrixImpl75.add(realMatrixImpl78);
        org.apache.commons.math.linear.RealMatrix realMatrix80 = realMatrixImpl47.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl79);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl81 = realMatrixImpl28.multiply(realMatrixImpl79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(realMatrixImpl70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl79);
        org.junit.Assert.assertNotNull(realMatrix80);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        bigMatrixImpl20.setScale(35);
        boolean boolean27 = bigMatrixImpl20.isSingular();
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl20.getData();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal31 = bigMatrixImpl20.getEntry(35, 52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        int int3 = bigMatrixImpl2.getColumnDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = realMatrixImpl6.add(realMatrixImpl9);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrixImpl10.scalarMultiply((double) (byte) 0);
        boolean boolean13 = bigMatrixImpl2.equals((java.lang.Object) realMatrixImpl10);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray15 = bigMatrixImpl2.getColumn(100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(realMatrixImpl10);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        int int17 = realMatrixImpl12.getColumnDimension();
        int int18 = realMatrixImpl12.getColumnDimension();
        boolean boolean19 = realMatrixImpl12.isSingular();
        boolean boolean20 = realMatrixImpl12.isSquare();
        int int21 = realMatrixImpl12.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        boolean boolean40 = realMatrixImpl34.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        int int48 = realMatrixImpl46.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl34.subtract(realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl27.subtract(realMatrixImpl49);
        double[] doubleArray52 = realMatrixImpl27.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl55.add(realMatrixImpl58);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrixImpl27.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl59);
        boolean boolean61 = realMatrixImpl59.isSquare();
        double double62 = realMatrixImpl59.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl12.subtract(realMatrixImpl59);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = realMatrixImpl66.add(realMatrixImpl69);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl73.add(realMatrixImpl76);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl78 = realMatrixImpl66.add(realMatrixImpl76);
        org.apache.commons.math.linear.RealMatrix realMatrix80 = realMatrixImpl76.scalarMultiply(1.0d);
        boolean boolean81 = realMatrixImpl76.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix82 = realMatrixImpl76.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix84 = realMatrixImpl76.getColumnMatrix((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix85 = realMatrixImpl12.multiply(realMatrix84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl49);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl59);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrixImpl70);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertNotNull(realMatrixImpl78);
        org.junit.Assert.assertNotNull(realMatrix80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(realMatrix82);
        org.junit.Assert.assertNotNull(realMatrix84);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl21.subtract(bigMatrixImpl43);
        double[][] doubleArray45 = bigMatrixImpl21.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(doubleArray45);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal21 = bigMatrixImpl20.getNorm();
        java.math.BigDecimal bigDecimal22 = bigMatrixImpl20.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal22);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl25.add(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl32.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl25.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl25.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl45.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl49);
        boolean boolean51 = realMatrixImpl45.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl54.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        int int59 = realMatrixImpl57.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = realMatrixImpl45.subtract(realMatrixImpl57);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl25.add(realMatrixImpl57);
        double[][] doubleArray62 = realMatrixImpl61.getData();
        int int63 = realMatrixImpl61.getColumnDimension();
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[] doubleArray72 = new double[] { 1, (byte) 10 };
        double[] doubleArray75 = new double[] { 1, (byte) 10 };
        double[] doubleArray78 = new double[] { 1, (byte) 10 };
        double[] doubleArray81 = new double[] { 1, (byte) 10 };
        double[][] doubleArray82 = new double[][] { doubleArray66, doubleArray69, doubleArray72, doubleArray75, doubleArray78, doubleArray81 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl83 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray82);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl84 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray82);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl85 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray82);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl86 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray82);
        int int87 = realMatrixImpl86.getRowDimension();
        boolean boolean88 = realMatrixImpl61.equals((java.lang.Object) int87);
        int int89 = realMatrixImpl61.getRowDimension();
        boolean boolean90 = bigMatrixImpl21.equals((java.lang.Object) realMatrixImpl61);
        int int91 = bigMatrixImpl21.getColumnDimension();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl60);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 6 + "'", int87 == 6);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        double[][] doubleArray3 = realMatrixImpl2.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray3, false);
        double[][] doubleArray6 = null;
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl5.setSubMatrix(doubleArray6, (int) (short) 100, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        double double9 = realMatrixImpl2.getEntry(1, (int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = realMatrixImpl12.add(realMatrixImpl15);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl15.subtract(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl41.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix49 = realMatrixImpl44.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl48);
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl38.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl44);
        boolean boolean51 = realMatrixImpl38.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix53 = realMatrixImpl38.getRowMatrix(2);
        org.apache.commons.math.linear.RealMatrix realMatrix55 = realMatrixImpl38.scalarAdd((double) (-1L));
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl2.add(realMatrixImpl38);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray58 = realMatrixImpl56.getRow((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrixImpl16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray47 = bigMatrixImpl42.getColumnAsDoubleArray(2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        int int17 = realMatrixImpl12.getColumnDimension();
        double[][] doubleArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl12.setSubMatrix(doubleArray18, (int) (short) 1, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        double[] doubleArray42 = realMatrixImpl34.getColumn(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl34.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl21.subtract(bigMatrixImpl43);
        double[][] doubleArray45 = bigMatrixImpl21.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(doubleArray45);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        int int23 = bigMatrixImpl21.getScale();
        bigMatrixImpl21.setRoundingMode((int) '#');
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[][] doubleArray44 = new double[][] { doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = bigMatrixImpl21.add(bigMatrixImpl47);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl21.getRowMatrix((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl21.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(bigMatrixImpl48);
        org.junit.Assert.assertNotNull(bigMatrix50);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        boolean boolean71 = bigMatrixImpl67.isSingular();
        java.math.BigDecimal[][] bigDecimalArray72 = bigMatrixImpl67.getData();
        int int73 = bigMatrixImpl67.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal74 = bigMatrixImpl67.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 6 + "'", int73 == 6);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        double[][] doubleArray3 = realMatrixImpl2.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = realMatrixImpl6.add(realMatrixImpl9);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = realMatrixImpl13.add(realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl16.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl20);
        boolean boolean22 = realMatrixImpl16.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix29 = realMatrixImpl25.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl28);
        int int30 = realMatrixImpl28.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl16.subtract(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl9.subtract(realMatrixImpl31);
        boolean boolean33 = realMatrixImpl32.isSquare();
        double[][] doubleArray34 = realMatrixImpl32.getDataRef();
        double[][] doubleArray35 = realMatrixImpl32.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = realMatrixImpl38.add(realMatrixImpl41);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl45.add(realMatrixImpl48);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl38.add(realMatrixImpl48);
        org.apache.commons.math.linear.RealMatrix realMatrix52 = realMatrixImpl48.scalarMultiply(1.0d);
        double[] doubleArray54 = realMatrixImpl48.getRow((int) (short) 1);
        double[] doubleArray55 = realMatrixImpl32.operate(doubleArray54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray55);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray57 = realMatrixImpl2.preMultiply(doubleArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(realMatrixImpl10);
        org.junit.Assert.assertNotNull(realMatrixImpl17);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realMatrixImpl42);
        org.junit.Assert.assertNotNull(realMatrixImpl49);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24, false);
        boolean boolean31 = bigMatrixImpl30.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            double double34 = bigMatrixImpl30.getEntryAsDouble((int) '#', 4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray8);
        double[][] doubleArray10 = realMatrixImpl9.getData();
        double[][] doubleArray11 = realMatrixImpl9.getData();
        int int12 = realMatrixImpl9.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = realMatrixImpl9.getColumnMatrix(0);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl9.scalarMultiply((double) ' ');
        double[] doubleArray19 = new double[] { 1, (byte) 10 };
        double[] doubleArray22 = new double[] { 1, (byte) 10 };
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[][] doubleArray35 = new double[][] { doubleArray19, doubleArray22, doubleArray25, doubleArray28, doubleArray31, doubleArray34 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray35);
        int int40 = realMatrixImpl39.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl39.scalarMultiply((double) (byte) 100);
        boolean boolean43 = realMatrixImpl39.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrixImpl9.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        boolean boolean71 = bigMatrixImpl67.isSingular();
        java.math.BigDecimal[][] bigDecimalArray72 = bigMatrixImpl67.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix74 = bigMatrixImpl67.getRowMatrix(1);
        int int75 = bigMatrixImpl67.getScale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix80 = bigMatrixImpl67.getSubMatrix((-1), 6, 4, 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertNotNull(bigMatrix74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 64 + "'", int75 == 64);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl19.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        boolean boolean35 = realMatrixImpl22.equals((java.lang.Object) realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl2.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl2.scalarAdd((double) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl2.getSubMatrix((int) (byte) 1, 4, (int) (short) 1, 6);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(realMatrix43);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        bigMatrixImpl12.setRoundingMode((int) (byte) 100);
        bigMatrixImpl12.setScale((int) (byte) 1);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = bigMatrixImpl12.subtract(bigMatrixImpl20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl6.scalarMultiply((double) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 100, (int) (byte) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrixImpl11.scalarAdd((double) 0L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix14 = realMatrixImpl6.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        double[] doubleArray16 = realMatrixImpl14.getColumn(10);
        double[] doubleArray18 = realMatrixImpl14.getRow(2);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrixImpl5.getColumnMatrix((int) (byte) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrixImpl5.scalarMultiply((double) 'a');
        double double14 = realMatrixImpl5.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl17.add(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl17.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl17.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl34.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl37.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl41);
        boolean boolean43 = realMatrixImpl37.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl46.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl49);
        int int51 = realMatrixImpl49.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl37.subtract(realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl17.add(realMatrixImpl49);
        double[][] doubleArray54 = realMatrixImpl53.getData();
        double[][] doubleArray55 = realMatrixImpl53.getData();
        boolean boolean56 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl53);
        boolean boolean57 = realMatrixImpl5.isSquare();
        double[] doubleArray59 = realMatrixImpl5.getColumn(6);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getScale();
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray14 = bigMatrixImpl12.getDataAsDoubleArray();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 64 + "'", int13 == 64);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl17.add(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrixImpl27.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl31);
        boolean boolean33 = realMatrixImpl27.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl36.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl39);
        int int41 = realMatrixImpl39.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = realMatrixImpl27.subtract(realMatrixImpl39);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl20.subtract(realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl46.add(realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrixImpl49.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrix realMatrix55 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl49);
        boolean boolean56 = realMatrixImpl43.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl43.getRowMatrix(2);
        boolean boolean59 = realMatrixImpl43.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl43);
        int int61 = realMatrixImpl14.getRowDimension();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl42);
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        boolean boolean7 = realMatrixImpl6.isSingular();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl10.add(realMatrixImpl13);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl17.add(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = realMatrixImpl10.add(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl20.transpose();
        boolean boolean24 = realMatrixImpl6.equals((java.lang.Object) realMatrix23);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrixImpl22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        boolean boolean7 = realMatrixImpl6.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl10.add(realMatrixImpl13);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl17.add(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl20.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        boolean boolean26 = realMatrixImpl20.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl32);
        int int34 = realMatrixImpl32.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl20.subtract(realMatrixImpl32);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl13.subtract(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl39.add(realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl42.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl36.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl51.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = realMatrixImpl58.add(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrixImpl61.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl65);
        boolean boolean67 = realMatrixImpl61.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix74 = realMatrixImpl70.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl73);
        int int75 = realMatrixImpl73.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = realMatrixImpl61.subtract(realMatrixImpl73);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl54.subtract(realMatrixImpl76);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = realMatrixImpl80.add(realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix88 = realMatrixImpl83.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl87);
        org.apache.commons.math.linear.RealMatrix realMatrix89 = realMatrixImpl77.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrix realMatrix90 = realMatrixImpl42.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl83);
        double[][] doubleArray91 = realMatrixImpl83.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl92 = realMatrixImpl6.subtract(realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrix realMatrix94 = realMatrixImpl92.scalarMultiply((double) 0L);
        boolean boolean95 = realMatrixImpl92.isSquare();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrixImpl62);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(realMatrix74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl76);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertNotNull(realMatrixImpl84);
        org.junit.Assert.assertNotNull(realMatrix88);
        org.junit.Assert.assertNotNull(realMatrix89);
        org.junit.Assert.assertNotNull(realMatrix90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(realMatrixImpl92);
        org.junit.Assert.assertNotNull(realMatrix94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        java.math.BigDecimal[][] bigDecimalArray45 = bigMatrixImpl44.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45, true);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
        int int51 = bigMatrixImpl49.getRoundingMode();
        double[][] doubleArray52 = bigMatrixImpl49.getDataAsDoubleArray();
        int int53 = bigMatrixImpl49.getScale();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = realMatrixImpl56.add(realMatrixImpl59);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = realMatrixImpl63.add(realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl56.add(realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrix realMatrix70 = realMatrixImpl66.scalarMultiply(1.0d);
        int int71 = realMatrixImpl66.getColumnDimension();
        int int72 = realMatrixImpl66.getColumnDimension();
        boolean boolean73 = realMatrixImpl66.isSingular();
        boolean boolean74 = realMatrixImpl66.isSquare();
        boolean boolean75 = bigMatrixImpl49.equals((java.lang.Object) boolean74);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 64 + "'", int53 == 64);
        org.junit.Assert.assertNotNull(realMatrixImpl60);
        org.junit.Assert.assertNotNull(realMatrixImpl67);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
        org.junit.Assert.assertNotNull(realMatrix70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.scalarMultiply((double) (short) -1);
        double[][] doubleArray18 = realMatrixImpl2.getData();
        double[][] doubleArray19 = realMatrixImpl2.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = realMatrixImpl22.add(realMatrixImpl25);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl29.add(realMatrixImpl32);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl32.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl36);
        boolean boolean38 = realMatrixImpl32.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl41.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl44);
        int int46 = realMatrixImpl44.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = realMatrixImpl32.subtract(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl25.subtract(realMatrixImpl47);
        boolean boolean49 = realMatrixImpl48.isSingular();
        int[] intArray51 = new int[] { 4 };
        int[] intArray53 = new int[] { (byte) 0 };
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrixImpl48.getSubMatrix(intArray51, intArray53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl57.add(realMatrixImpl60);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl64.add(realMatrixImpl67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix72 = realMatrixImpl67.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl71);
        boolean boolean73 = realMatrixImpl67.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl79 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix80 = realMatrixImpl76.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl79);
        int int81 = realMatrixImpl79.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl82 = realMatrixImpl67.subtract(realMatrixImpl79);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = realMatrixImpl60.subtract(realMatrixImpl82);
        boolean boolean84 = realMatrixImpl83.isSingular();
        int[] intArray86 = new int[] { 4 };
        int[] intArray88 = new int[] { (byte) 0 };
        org.apache.commons.math.linear.RealMatrix realMatrix89 = realMatrixImpl83.getSubMatrix(intArray86, intArray88);
        org.apache.commons.math.linear.RealMatrix realMatrix90 = realMatrixImpl2.getSubMatrix(intArray53, intArray88);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realMatrixImpl26);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl47);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[4]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0]");
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
        org.junit.Assert.assertNotNull(realMatrix72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(realMatrix80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl82);
        org.junit.Assert.assertNotNull(realMatrixImpl83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[4]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0]");
        org.junit.Assert.assertNotNull(realMatrix89);
        org.junit.Assert.assertNotNull(realMatrix90);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl19.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        boolean boolean35 = realMatrixImpl22.equals((java.lang.Object) realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl2.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl2.scalarMultiply((double) 0.0f);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl41.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl48.add(realMatrixImpl51);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl41.add(realMatrixImpl51);
        org.apache.commons.math.linear.RealMatrix realMatrix55 = realMatrixImpl41.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = realMatrixImpl58.add(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrixImpl61.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl65);
        boolean boolean67 = realMatrixImpl61.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix74 = realMatrixImpl70.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl73);
        int int75 = realMatrixImpl73.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = realMatrixImpl61.subtract(realMatrixImpl73);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl41.add(realMatrixImpl73);
        int int78 = realMatrixImpl77.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix79 = realMatrixImpl2.multiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertNotNull(realMatrixImpl62);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(realMatrix74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl76);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray23, true);
        int int26 = bigMatrixImpl25.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl25.getColumnMatrix(64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        boolean boolean3 = realMatrixImpl2.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrixImpl2.scalarMultiply((double) 1L);
        int int6 = realMatrixImpl2.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl2.scalarMultiply((double) 10L);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = realMatrixImpl11.add(realMatrixImpl14);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl18);
        boolean boolean20 = realMatrixImpl14.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        int int28 = realMatrixImpl26.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl14.subtract(realMatrixImpl26);
        double[][] doubleArray30 = realMatrixImpl26.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray30, true);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray30, true);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl34.scalarAdd((double) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl2.preMultiply(realMatrix36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrixImpl15);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realMatrix36);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl28.getRowMatrix((int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl45.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl20.scalarMultiply(bigDecimal48);
        java.math.BigDecimal[] bigDecimalArray51 = bigMatrixImpl20.getRow(2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray51);
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[][] doubleArray71 = new double[][] { doubleArray55, doubleArray58, doubleArray61, doubleArray64, doubleArray67, doubleArray70 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray71);
        java.math.BigDecimal bigDecimal73 = bigMatrixImpl72.getNorm();
        java.math.BigDecimal[] bigDecimalArray74 = new java.math.BigDecimal[] { bigDecimal73 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl75 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray74);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl75.transpose();
        boolean boolean77 = bigMatrixImpl52.equals((java.lang.Object) bigMatrix76);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal78 = bigMatrixImpl52.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigMatrix49);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertNotNull(bigDecimalArray74);
        org.junit.Assert.assertNotNull(bigMatrix76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        java.math.BigDecimal bigDecimal46 = bigMatrixImpl43.getEntry(0, (int) (short) 0);
        boolean boolean47 = bigMatrixImpl43.isSingular();
        java.math.BigDecimal[][] bigDecimalArray48 = bigMatrixImpl43.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray48);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray48, true);
        java.math.BigDecimal[][] bigDecimalArray52 = bigMatrixImpl51.getData();
        boolean boolean53 = realMatrixImpl22.equals((java.lang.Object) bigDecimalArray52);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray55 = realMatrixImpl22.getRow((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl21.subtract(bigMatrixImpl43);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl43.getRowMatrix((int) (short) 0);
        bigMatrixImpl43.setRoundingMode((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl43.getColumnMatrix(4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigMatrix46);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 100, 64);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl8 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = realMatrixImpl5.add(realMatrixImpl8);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = realMatrixImpl12.add(realMatrixImpl15);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl15.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl19);
        boolean boolean21 = realMatrixImpl15.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrixImpl24.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl27);
        int int29 = realMatrixImpl27.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl15.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl8.subtract(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl34.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl37.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl41);
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl46.add(realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = realMatrixImpl53.add(realMatrixImpl56);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix61 = realMatrixImpl56.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl60);
        boolean boolean62 = realMatrixImpl56.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix69 = realMatrixImpl65.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl68);
        int int70 = realMatrixImpl68.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = realMatrixImpl56.subtract(realMatrixImpl68);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = realMatrixImpl49.subtract(realMatrixImpl71);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl78 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl79 = realMatrixImpl75.add(realMatrixImpl78);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl82 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix83 = realMatrixImpl78.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl82);
        org.apache.commons.math.linear.RealMatrix realMatrix84 = realMatrixImpl72.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl78);
        org.apache.commons.math.linear.RealMatrix realMatrix85 = realMatrixImpl37.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl78);
        double[][] doubleArray86 = realMatrixImpl78.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = realMatrixImpl2.multiply(realMatrixImpl78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl9);
        org.junit.Assert.assertNotNull(realMatrixImpl16);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertNotNull(realMatrixImpl57);
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(realMatrix69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl71);
        org.junit.Assert.assertNotNull(realMatrixImpl72);
        org.junit.Assert.assertNotNull(realMatrixImpl79);
        org.junit.Assert.assertNotNull(realMatrix83);
        org.junit.Assert.assertNotNull(realMatrix84);
        org.junit.Assert.assertNotNull(realMatrix85);
        org.junit.Assert.assertNotNull(doubleArray86);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(0, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl26.equals((java.lang.Object) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl5.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl53.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        boolean boolean59 = realMatrixImpl46.equals((java.lang.Object) realMatrixImpl57);
        boolean boolean60 = realMatrixImpl46.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl37.add(realMatrixImpl46);
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[][] doubleArray80 = new double[][] { doubleArray64, doubleArray67, doubleArray70, doubleArray73, doubleArray76, doubleArray79 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray80);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl82 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray80);
        boolean boolean83 = realMatrixImpl61.equals((java.lang.Object) bigMatrixImpl82);
        double[][] doubleArray84 = realMatrixImpl61.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl85 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray84);
        org.apache.commons.math.linear.BigMatrix bigMatrix86 = bigMatrixImpl85.transpose();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(bigMatrix86);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.scalarAdd((double) 2);
        int int5 = realMatrixImpl2.getRowDimension();
        double double8 = realMatrixImpl2.getEntry((int) (short) 1, 6);
        double double11 = realMatrixImpl2.getEntry(1, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrixImpl2.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = realMatrixImpl12.add(realMatrixImpl15);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl12.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl5.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl22);
        double[][] doubleArray26 = realMatrixImpl22.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray26, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray26);
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[] doubleArray47 = new double[] { 1, (byte) 10 };
        double[][] doubleArray48 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44, doubleArray47 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray48);
        java.math.BigDecimal bigDecimal50 = bigMatrixImpl49.getNorm();
        java.math.BigDecimal[] bigDecimalArray51 = new java.math.BigDecimal[] { bigDecimal50 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray51);
        java.math.BigDecimal[] bigDecimalArray54 = bigMatrixImpl52.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix61 = realMatrixImpl57.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl60);
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrixImpl60.getColumnMatrix((int) (short) 1);
        boolean boolean64 = realMatrixImpl60.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrixImpl60.getColumnMatrix((int) (byte) 10);
        boolean boolean67 = bigMatrixImpl52.equals((java.lang.Object) (byte) 10);
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[][] doubleArray86 = new double[][] { doubleArray70, doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl87 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        java.math.BigDecimal bigDecimal88 = bigMatrixImpl87.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix89 = bigMatrixImpl52.scalarAdd(bigDecimal88);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix90 = bigMatrixImpl29.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(bigDecimal88);
        org.junit.Assert.assertNotNull(bigMatrix89);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl25.add(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl32.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl25.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl35.scalarMultiply(1.0d);
        int int40 = realMatrixImpl35.getColumnDimension();
        boolean boolean41 = bigMatrixImpl20.equals((java.lang.Object) realMatrixImpl35);
        bigMatrixImpl20.setScale(6);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal44 = bigMatrixImpl20.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        int int17 = realMatrixImpl12.getColumnDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl20.add(realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl27.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl34.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl27.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrixImpl27.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl24.add(realMatrix41);
        double[] doubleArray44 = realMatrixImpl24.getRow((int) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = realMatrixImpl12.add(realMatrixImpl46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrixImpl39);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        double[] doubleArray21 = new double[] { 1, (byte) 10 };
        double[] doubleArray24 = new double[] { 1, (byte) 10 };
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray37);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray37);
        boolean boolean40 = bigMatrixImpl39.isSquare();
        java.math.BigDecimal[][] bigDecimalArray41 = bigMatrixImpl39.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl44.add(realMatrixImpl47);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl51.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl44.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl54.scalarMultiply(1.0d);
        int int59 = realMatrixImpl54.getColumnDimension();
        boolean boolean60 = bigMatrixImpl39.equals((java.lang.Object) realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl16.subtract(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl64.add(realMatrixImpl67);
        boolean boolean69 = realMatrixImpl68.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = realMatrixImpl54.add(realMatrixImpl68);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl73.add(realMatrixImpl76);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = realMatrixImpl80.add(realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl85 = realMatrixImpl73.add(realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrix realMatrix87 = realMatrixImpl83.scalarMultiply(1.0d);
        boolean boolean88 = realMatrixImpl83.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix89 = realMatrixImpl70.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl83);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl70);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertNotNull(realMatrixImpl84);
        org.junit.Assert.assertNotNull(realMatrixImpl85);
        org.junit.Assert.assertNotNull(realMatrix87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(realMatrix89);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean45 = bigMatrixImpl44.isSquare();
        java.math.BigDecimal bigDecimal46 = bigMatrixImpl44.getNorm();
        int int47 = bigMatrixImpl44.getRowDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl44.copy();
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[][] doubleArray67 = new double[][] { doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63, doubleArray66 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray67);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray67);
        java.math.BigDecimal bigDecimal72 = bigMatrixImpl69.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray73 = bigMatrixImpl69.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix75 = bigMatrixImpl69.getRowMatrix(1);
        int int76 = bigMatrixImpl69.getColumnDimension();
        int int77 = bigMatrixImpl69.getScale();
        java.math.BigDecimal[][] bigDecimalArray78 = bigMatrixImpl69.getData();
        java.lang.String str79 = bigMatrixImpl69.toString();
        bigMatrixImpl69.setScale(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl82 = bigMatrixImpl44.multiply(bigMatrixImpl69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigDecimalArray73);
        org.junit.Assert.assertNotNull(bigMatrix75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 64 + "'", int77 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str79, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.scalarAdd((double) 2);
        int int5 = realMatrixImpl2.getRowDimension();
        double double8 = realMatrixImpl2.getEntry((int) (short) 1, 6);
        double double11 = realMatrixImpl2.getEntry(1, (int) (byte) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl2.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl23.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl23.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl40.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl47);
        boolean boolean49 = realMatrixImpl43.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl52.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl55);
        int int57 = realMatrixImpl55.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl43.subtract(realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl23.add(realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrixImpl23.copy();
        boolean boolean61 = realMatrixImpl23.isSquare();
        double[][] doubleArray62 = realMatrixImpl23.getDataRef();
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrix realMatrix65 = realMatrixImpl23.getRowMatrix((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix72 = realMatrixImpl68.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl71);
        org.apache.commons.math.linear.RealMatrix realMatrix74 = realMatrixImpl71.getColumnMatrix((int) (short) 1);
        double[][] doubleArray75 = realMatrixImpl71.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix76 = realMatrixImpl23.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl71);
        org.apache.commons.math.linear.RealMatrix realMatrix77 = realMatrixImpl71.transpose();
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrixImpl59);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertNotNull(realMatrix72);
        org.junit.Assert.assertNotNull(realMatrix74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(realMatrix77);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 1, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl12.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[][] doubleArray62 = new double[][] { doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = bigMatrixImpl42.subtract(bigMatrixImpl64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = bigMatrixImpl20.add(bigMatrixImpl65);
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[] doubleArray72 = new double[] { 1, (byte) 10 };
        double[] doubleArray75 = new double[] { 1, (byte) 10 };
        double[] doubleArray78 = new double[] { 1, (byte) 10 };
        double[] doubleArray81 = new double[] { 1, (byte) 10 };
        double[] doubleArray84 = new double[] { 1, (byte) 10 };
        double[][] doubleArray85 = new double[][] { doubleArray69, doubleArray72, doubleArray75, doubleArray78, doubleArray81, doubleArray84 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl86 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray85);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl87 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray85);
        java.math.BigDecimal bigDecimal90 = bigMatrixImpl87.getEntry(0, (int) (short) 0);
        boolean boolean91 = bigMatrixImpl87.isSingular();
        java.math.BigDecimal[][] bigDecimalArray92 = bigMatrixImpl87.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl93 = bigMatrixImpl66.subtract(bigMatrixImpl87);
        org.apache.commons.math.linear.BigMatrix bigMatrix94 = bigMatrixImpl93.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix99 = bigMatrixImpl93.getSubMatrix((int) (byte) 1, 97, (int) (byte) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(bigMatrixImpl65);
        org.junit.Assert.assertNotNull(bigMatrixImpl66);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(bigDecimal90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray92);
        org.junit.Assert.assertNotNull(bigMatrixImpl93);
        org.junit.Assert.assertNotNull(bigMatrix94);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl(64, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be postive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(1, (int) (short) 10);
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[][] doubleArray21 = new double[][] { doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17, doubleArray20 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        int int46 = bigMatrixImpl45.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = bigMatrixImpl23.add(bigMatrixImpl45);
        java.lang.String str48 = bigMatrixImpl23.toString();
        int int49 = bigMatrixImpl23.getRoundingMode();
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[][] doubleArray68 = new double[][] { doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64, doubleArray67 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        int int71 = bigMatrixImpl70.getScale();
        java.math.BigDecimal[][] bigDecimalArray72 = bigMatrixImpl70.getData();
        java.math.BigDecimal[][] bigDecimalArray73 = bigMatrixImpl70.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl75 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray73, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl76 = bigMatrixImpl23.subtract(bigMatrixImpl75);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl77 = bigMatrixImpl2.add(bigMatrixImpl23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str48, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 64 + "'", int71 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertNotNull(bigDecimalArray73);
        org.junit.Assert.assertNotNull(bigMatrixImpl76);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl21.getRowMatrix(4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl21.getRowMatrix(10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(bigMatrix26);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = realMatrixImpl5.copy();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = realMatrixImpl12.add(realMatrixImpl15);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl12.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrixImpl12.scalarAdd((double) (byte) 1);
        double[] doubleArray28 = realMatrixImpl12.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl5.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl29.getColumnMatrix((int) (short) 1);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrixImpl16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrix31);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        int int25 = bigMatrixImpl24.getRoundingMode();
        double[][] doubleArray26 = bigMatrixImpl24.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl24.transpose();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(bigMatrix27);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.copy();
        boolean boolean17 = realMatrixImpl2.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl20.add(realMatrixImpl23);
        double[] doubleArray26 = realMatrixImpl23.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray26);
        double[][] doubleArray28 = realMatrixImpl27.getData();
        double[][] doubleArray29 = realMatrixImpl27.getData();
        int int30 = realMatrixImpl27.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrixImpl27.getColumnMatrix(0);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl27.scalarMultiply((double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl2.preMultiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix34);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        double double41 = realMatrixImpl28.getNorm();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl6.add(realMatrix23);
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl6.preMultiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = realMatrixImpl12.add(realMatrixImpl15);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl12.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl5.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl22);
        int int26 = realMatrixImpl5.getRowDimension();
        boolean boolean27 = realMatrixImpl5.isSingular();
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[][] doubleArray7 = realMatrixImpl5.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray7);
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[][] doubleArray27 = new double[][] { doubleArray11, doubleArray14, doubleArray17, doubleArray20, doubleArray23, doubleArray26 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray27);
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl30.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl30.getColumnMatrix((int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl30.getRowMatrix(4);
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[] doubleArray47 = new double[] { 1, (byte) 10 };
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[][] doubleArray54 = new double[][] { doubleArray38, doubleArray41, doubleArray44, doubleArray47, doubleArray50, doubleArray53 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray54);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl56 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray54);
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[] doubleArray68 = new double[] { 1, (byte) 10 };
        double[] doubleArray71 = new double[] { 1, (byte) 10 };
        double[] doubleArray74 = new double[] { 1, (byte) 10 };
        double[][] doubleArray75 = new double[][] { doubleArray59, doubleArray62, doubleArray65, doubleArray68, doubleArray71, doubleArray74 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl76 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray75);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl77 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray75);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl78 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray75);
        int int79 = bigMatrixImpl78.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl80 = bigMatrixImpl56.add(bigMatrixImpl78);
        java.math.BigDecimal bigDecimal81 = bigMatrixImpl78.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix82 = bigMatrixImpl30.scalarAdd(bigDecimal81);
        int int83 = bigMatrixImpl30.getScale();
        java.math.BigDecimal[][] bigDecimalArray84 = bigMatrixImpl30.getDataRef();
        double[][] doubleArray85 = bigMatrixImpl30.getDataAsDoubleArray();
        java.lang.String str86 = bigMatrixImpl30.toString();
        double[] doubleArray88 = bigMatrixImpl30.getColumnAsDoubleArray((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray89 = bigMatrixImpl8.solve(doubleArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl80);
        org.junit.Assert.assertNotNull(bigDecimal81);
        org.junit.Assert.assertNotNull(bigMatrix82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 64 + "'", int83 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str86, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        int int25 = bigMatrixImpl24.getRoundingMode();
        double[][] doubleArray26 = bigMatrixImpl24.getDataAsDoubleArray();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl24.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(doubleArray26);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean45 = bigMatrixImpl44.isSquare();
        int int46 = bigMatrixImpl44.getScale();
        java.math.BigDecimal[][] bigDecimalArray47 = bigMatrixImpl44.getData();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal50 = bigMatrixImpl44.getEntry(0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 64 + "'", int46 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal25 = bigMatrixImpl24.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl45.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl20.scalarMultiply(bigDecimal48);
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[][] doubleArray68 = new double[][] { doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64, doubleArray67 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        double[] doubleArray73 = bigMatrixImpl71.getColumnAsDoubleArray(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix74 = bigMatrixImpl20.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigMatrix49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        boolean boolean7 = realMatrixImpl6.isSquare();
        int int8 = realMatrixImpl6.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl11.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl14);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = realMatrixImpl18.add(realMatrixImpl21);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl25);
        boolean boolean27 = realMatrixImpl14.equals((java.lang.Object) realMatrixImpl25);
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[] doubleArray45 = new double[] { 1, (byte) 10 };
        double[][] doubleArray46 = new double[][] { doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42, doubleArray45 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        boolean boolean49 = bigMatrixImpl48.isSquare();
        java.math.BigDecimal[][] bigDecimalArray50 = bigMatrixImpl48.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = realMatrixImpl53.add(realMatrixImpl56);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = realMatrixImpl60.add(realMatrixImpl63);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = realMatrixImpl53.add(realMatrixImpl63);
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl63.scalarMultiply(1.0d);
        int int68 = realMatrixImpl63.getColumnDimension();
        boolean boolean69 = bigMatrixImpl48.equals((java.lang.Object) realMatrixImpl63);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = realMatrixImpl25.subtract(realMatrixImpl63);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl73.add(realMatrixImpl76);
        boolean boolean78 = realMatrixImpl77.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl79 = realMatrixImpl63.add(realMatrixImpl77);
        boolean boolean80 = realMatrixImpl63.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl81 = realMatrixImpl6.add(realMatrixImpl63);
        double[][] doubleArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl63.setSubMatrix(doubleArray82, (int) (byte) 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrixImpl22);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(realMatrixImpl57);
        org.junit.Assert.assertNotNull(realMatrixImpl64);
        org.junit.Assert.assertNotNull(realMatrixImpl65);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl70);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl81);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean45 = bigMatrixImpl44.isSquare();
        java.math.BigDecimal bigDecimal46 = bigMatrixImpl44.getNorm();
        double[] doubleArray48 = bigMatrixImpl44.getRowAsDoubleArray(5);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[2.0, 20.0]");
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = bigMatrixImpl45.add(bigMatrixImpl67);
        java.math.BigDecimal bigDecimal70 = bigMatrixImpl67.getNorm();
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[] doubleArray88 = new double[] { 1, (byte) 10 };
        double[][] doubleArray89 = new double[][] { doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85, doubleArray88 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl90 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl91 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl92 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        int int93 = bigMatrixImpl92.getColumnDimension();
        int int94 = bigMatrixImpl92.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl95 = bigMatrixImpl67.subtract(bigMatrixImpl92);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl96 = bigMatrixImpl20.subtract(bigMatrixImpl67);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal97 = bigMatrixImpl20.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 64 + "'", int94 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl95);
        org.junit.Assert.assertNotNull(bigMatrixImpl96);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, false);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, false);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(6, 4);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal5 = bigMatrixImpl2.getEntry(64, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        int int23 = realMatrixImpl22.getRowDimension();
        double[][] doubleArray24 = realMatrixImpl22.getData();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        boolean boolean44 = bigMatrixImpl43.isSquare();
        java.math.BigDecimal[][] bigDecimalArray45 = bigMatrixImpl43.getDataRef();
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl43.getEntry(1, (int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl22.scalarMultiply(bigDecimal48);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl22.getRowMatrix(6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigMatrix49);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray24);
        bigMatrixImpl25.setRoundingMode(4);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal28 = bigMatrixImpl25.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        java.math.BigDecimal[][] bigDecimalArray45 = bigMatrixImpl44.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45, true);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl49.copy();
        java.math.BigDecimal[][] bigDecimalArray52 = bigMatrixImpl49.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray52, true);
        double[] doubleArray56 = bigMatrixImpl54.getRowAsDoubleArray((int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        int int25 = bigMatrixImpl21.getRowDimension();
        int int26 = bigMatrixImpl21.getRoundingMode();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl(100, 52);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix7 = realMatrixImpl2.getSubMatrix(10, (int) (byte) 0, (int) (byte) 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        int int3 = bigMatrixImpl2.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = bigMatrixImpl2.subtract(bigMatrixImpl4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getRoundingMode();
        java.math.BigDecimal[][] bigDecimalArray14 = bigMatrixImpl12.getDataRef();
        java.lang.String str15 = bigMatrixImpl12.toString();
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "BigMatrixImpl{{null},{null},{null},{null},{null}}" + "'", str15, "BigMatrixImpl{{null},{null},{null},{null},{null}}");
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl20.copy();
        int int24 = bigMatrixImpl20.getRowDimension();
        boolean boolean25 = bigMatrixImpl20.isSingular();
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray26, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray26, true);
        int int31 = bigMatrixImpl30.getRowDimension();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.scalarMultiply((double) (short) -1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl20.add(realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl27.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl20.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl20.getColumnMatrix((int) ' ');
        double[][] doubleArray35 = realMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray35, false);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl2.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl41.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix49 = realMatrixImpl44.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl48);
        boolean boolean50 = realMatrixImpl44.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix57 = realMatrixImpl53.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl56);
        int int58 = realMatrixImpl56.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl44.subtract(realMatrixImpl56);
        double[][] doubleArray60 = realMatrixImpl56.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray60, true);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray60, true);
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrixImpl64.scalarAdd((double) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = realMatrixImpl37.multiply(realMatrixImpl64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realMatrix66);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        double[][] doubleArray17 = realMatrixImpl2.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray17, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl33.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrixImpl42.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl45);
        int int47 = realMatrixImpl45.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl33.subtract(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl26.subtract(realMatrixImpl48);
        double[] doubleArray51 = realMatrixImpl26.getRow(0);
        java.math.BigDecimal[] bigDecimalArray52 = bigMatrixImpl20.operate(doubleArray51);
        boolean boolean53 = bigMatrixImpl20.isSquare();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
        org.junit.Assert.assertNotNull(realMatrixImpl49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        double[][] doubleArray21 = realMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrixImpl24.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrixImpl27.getColumnMatrix((int) (short) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrixImpl27.getColumnMatrix(2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl20.preMultiply(realMatrix32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix32);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl19.getNorm();
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl22.copy();
        java.math.BigDecimal bigDecimal24 = bigMatrixImpl22.getTrace();
        java.math.BigDecimal bigDecimal25 = bigMatrixImpl22.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl22.getRowMatrix(0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigMatrix27);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrixImpl21.transpose();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        int int45 = bigMatrixImpl44.getScale();
        int int46 = bigMatrixImpl44.getRowDimension();
        java.math.BigDecimal[] bigDecimalArray48 = bigMatrixImpl44.getRow(2);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray49 = bigMatrixImpl21.solve(bigDecimalArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigMatrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 64 + "'", int45 == 64);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl(1, 64);
        double[] doubleArray4 = realMatrixImpl2.getColumn((int) (short) 10);
        double[][] doubleArray5 = realMatrixImpl2.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl8 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = realMatrixImpl8.add(realMatrixImpl11);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = realMatrixImpl15.add(realMatrixImpl18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl8.add(realMatrixImpl18);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl18.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrixImpl2.preMultiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realMatrixImpl12);
        org.junit.Assert.assertNotNull(realMatrixImpl19);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        double[][] doubleArray41 = realMatrixImpl34.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl42.getSubMatrix((int) (short) 0, (-1), 0, 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(doubleArray41);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        bigMatrixImpl12.setRoundingMode((int) (byte) 100);
        boolean boolean18 = bigMatrixImpl12.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl12.transpose();
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigMatrix19);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be postive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean45 = bigMatrixImpl44.isSquare();
        int int46 = bigMatrixImpl44.getScale();
        java.math.BigDecimal[][] bigDecimalArray47 = bigMatrixImpl44.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double50 = bigMatrixImpl44.getEntryAsDouble(5, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 64 + "'", int46 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[][] doubleArray62 = new double[][] { doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = bigMatrixImpl42.subtract(bigMatrixImpl64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = bigMatrixImpl20.add(bigMatrixImpl65);
        java.math.BigDecimal bigDecimal67 = null;
        java.math.BigDecimal[] bigDecimalArray68 = new java.math.BigDecimal[] { bigDecimal67 };
        java.math.BigDecimal bigDecimal69 = null;
        java.math.BigDecimal[] bigDecimalArray70 = new java.math.BigDecimal[] { bigDecimal69 };
        java.math.BigDecimal bigDecimal71 = null;
        java.math.BigDecimal[] bigDecimalArray72 = new java.math.BigDecimal[] { bigDecimal71 };
        java.math.BigDecimal bigDecimal73 = null;
        java.math.BigDecimal[] bigDecimalArray74 = new java.math.BigDecimal[] { bigDecimal73 };
        java.math.BigDecimal bigDecimal75 = null;
        java.math.BigDecimal[] bigDecimalArray76 = new java.math.BigDecimal[] { bigDecimal75 };
        java.math.BigDecimal[][] bigDecimalArray77 = new java.math.BigDecimal[][] { bigDecimalArray68, bigDecimalArray70, bigDecimalArray72, bigDecimalArray74, bigDecimalArray76 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl79 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray77, true);
        bigMatrixImpl79.setRoundingMode((int) (short) 100);
        java.math.BigDecimal[][] bigDecimalArray82 = bigMatrixImpl79.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix83 = bigMatrixImpl20.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(bigMatrixImpl65);
        org.junit.Assert.assertNotNull(bigMatrixImpl66);
        org.junit.Assert.assertNotNull(bigDecimalArray68);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertNotNull(bigDecimalArray74);
        org.junit.Assert.assertNotNull(bigDecimalArray76);
        org.junit.Assert.assertNotNull(bigDecimalArray77);
        org.junit.Assert.assertNotNull(bigDecimalArray82);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrixImpl5.getColumnMatrix((int) (byte) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrixImpl5.scalarMultiply((double) 'a');
        double double14 = realMatrixImpl5.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl17.add(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl17.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl17.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl34.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl37.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl41);
        boolean boolean43 = realMatrixImpl37.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl46.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl49);
        int int51 = realMatrixImpl49.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl37.subtract(realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl17.add(realMatrixImpl49);
        double[][] doubleArray54 = realMatrixImpl53.getData();
        double[][] doubleArray55 = realMatrixImpl53.getData();
        boolean boolean56 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl59.add(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        boolean boolean68 = realMatrixImpl62.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix75 = realMatrixImpl71.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl74);
        int int76 = realMatrixImpl74.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl62.subtract(realMatrixImpl74);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = realMatrixImpl80.add(realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl90 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl91 = realMatrixImpl87.add(realMatrixImpl90);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl92 = realMatrixImpl80.add(realMatrixImpl90);
        org.apache.commons.math.linear.RealMatrix realMatrix93 = realMatrixImpl80.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix94 = realMatrixImpl74.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl80);
        double double95 = realMatrixImpl74.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix96 = realMatrixImpl53.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl74);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl53.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertNotNull(realMatrixImpl84);
        org.junit.Assert.assertNotNull(realMatrixImpl91);
        org.junit.Assert.assertNotNull(realMatrixImpl92);
        org.junit.Assert.assertNotNull(realMatrix93);
        org.junit.Assert.assertNotNull(realMatrix94);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix96);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl6.scalarMultiply((double) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = realMatrixImpl11.add(realMatrixImpl14);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = realMatrixImpl18.add(realMatrixImpl21);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl11.add(realMatrixImpl21);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl11.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl35.add(realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl38.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl42);
        boolean boolean44 = realMatrixImpl31.equals((java.lang.Object) realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl11.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl6.subtract(realMatrixImpl45);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl45.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrixImpl15);
        org.junit.Assert.assertNotNull(realMatrixImpl22);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrixImpl39);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        int int23 = bigMatrixImpl21.getScale();
        int int24 = bigMatrixImpl21.getScale();
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl21.getDataRef();
        bigMatrixImpl21.setRoundingMode((int) ' ');
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl21.getDataRef();
        bigMatrixImpl21.setScale((int) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 64 + "'", int24 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        double[][] doubleArray41 = realMatrixImpl34.getDataRef();
        double[] doubleArray43 = realMatrixImpl34.getColumn((int) (byte) 1);
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[][] doubleArray62 = new double[][] { doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray62);
        int int67 = realMatrixImpl66.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix69 = realMatrixImpl66.scalarMultiply((double) (byte) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix70 = realMatrixImpl66.transpose();
        double[][] doubleArray71 = realMatrixImpl66.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = realMatrixImpl34.multiply(realMatrixImpl66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 6 + "'", int67 == 6);
        org.junit.Assert.assertNotNull(realMatrix69);
        org.junit.Assert.assertNotNull(realMatrix70);
        org.junit.Assert.assertNotNull(doubleArray71);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl26.getSubMatrix((int) '4', (int) (short) 1, (int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = realMatrixImpl12.getEntry((int) 'a', 64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 100, 64);
        double double3 = realMatrixImpl2.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = realMatrixImpl6.add(realMatrixImpl9);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = realMatrixImpl13.add(realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = realMatrixImpl6.add(realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl6.getColumnMatrix((int) ' ');
        java.lang.Object obj21 = null;
        boolean boolean22 = realMatrixImpl6.equals(obj21);
        boolean boolean23 = realMatrixImpl6.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl30.copy();
        boolean boolean32 = realMatrixImpl6.equals((java.lang.Object) realMatrix31);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl2.subtract(realMatrixImpl6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrixImpl10);
        org.junit.Assert.assertNotNull(realMatrixImpl17);
        org.junit.Assert.assertNotNull(realMatrixImpl18);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.copy();
        double[][] doubleArray18 = realMatrixImpl2.getDataRef();
        boolean boolean19 = realMatrixImpl2.isSingular();
        double[][] doubleArray20 = realMatrixImpl2.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl2.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.copy();
        double[][] doubleArray18 = realMatrixImpl2.getDataRef();
        boolean boolean19 = realMatrixImpl2.isSingular();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = realMatrixImpl22.add(realMatrixImpl25);
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl2.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl2.add(realMatrixImpl28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl26);
        org.junit.Assert.assertNotNull(realMatrix27);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        int int3 = bigMatrixImpl2.getColumnDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = realMatrixImpl6.add(realMatrixImpl9);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrixImpl10.scalarMultiply((double) (byte) 0);
        boolean boolean13 = bigMatrixImpl2.equals((java.lang.Object) realMatrixImpl10);
        int int14 = bigMatrixImpl2.getRowDimension();
        java.lang.String str15 = bigMatrixImpl2.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(realMatrixImpl10);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "BigMatrixImpl{{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null}}" + "'", str15, "BigMatrixImpl{{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null}}");
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        int int46 = bigMatrixImpl20.getRoundingMode();
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[][] doubleArray65 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        int int68 = bigMatrixImpl67.getScale();
        java.math.BigDecimal[][] bigDecimalArray69 = bigMatrixImpl67.getData();
        java.math.BigDecimal[][] bigDecimalArray70 = bigMatrixImpl67.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray70, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = bigMatrixImpl20.subtract(bigMatrixImpl72);
        bigMatrixImpl20.setRoundingMode(97);
        double[] doubleArray78 = new double[] { 1, (byte) 10 };
        double[] doubleArray81 = new double[] { 1, (byte) 10 };
        double[] doubleArray84 = new double[] { 1, (byte) 10 };
        double[] doubleArray87 = new double[] { 1, (byte) 10 };
        double[] doubleArray90 = new double[] { 1, (byte) 10 };
        double[] doubleArray93 = new double[] { 1, (byte) 10 };
        double[][] doubleArray94 = new double[][] { doubleArray78, doubleArray81, doubleArray84, doubleArray87, doubleArray90, doubleArray93 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl95 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray94);
        java.math.BigDecimal bigDecimal96 = bigMatrixImpl95.getNorm();
        java.math.BigDecimal[] bigDecimalArray97 = new java.math.BigDecimal[] { bigDecimal96 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl98 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray97);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray99 = bigMatrixImpl20.solve(bigDecimalArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 64 + "'", int68 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertNotNull(bigMatrixImpl73);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(bigDecimal96);
        org.junit.Assert.assertNotNull(bigDecimalArray97);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl5.copy();
        double double20 = realMatrixImpl5.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrixImpl5.scalarMultiply((-1.0d));
        // The following exception was thrown during execution in test generation
        try {
            double double23 = realMatrixImpl5.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        double[] doubleArray15 = realMatrixImpl12.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray15);
        double[][] doubleArray17 = realMatrixImpl16.getData();
        double[][] doubleArray18 = realMatrixImpl16.getData();
        int int19 = realMatrixImpl16.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl16.getColumnMatrix(0);
        java.lang.String str22 = realMatrixImpl16.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl2.multiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}" + "'", str22, "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}");
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, true);
        int int23 = realMatrixImpl22.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray25 = realMatrixImpl22.getRow(100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        double[][] doubleArray29 = bigMatrixImpl27.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray29);
        java.lang.String str31 = realMatrixImpl30.toString();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "RealMatrixImpl{{1.0,10.0},{1.0,10.0},{1.0,10.0},{1.0,10.0},{1.0,10.0},{1.0,10.0}}" + "'", str31, "RealMatrixImpl{{1.0,10.0},{1.0,10.0},{1.0,10.0},{1.0,10.0},{1.0,10.0},{1.0,10.0}}");
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        int int46 = bigMatrixImpl20.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl20.transpose();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 1, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl20.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 64 + "'", int46 == 64);
        org.junit.Assert.assertNotNull(bigMatrix47);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl6.scalarMultiply((double) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = realMatrixImpl11.add(realMatrixImpl14);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = realMatrixImpl18.add(realMatrixImpl21);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl11.add(realMatrixImpl21);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl11.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl35.add(realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl38.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl42);
        boolean boolean44 = realMatrixImpl31.equals((java.lang.Object) realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl11.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl6.subtract(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix57 = realMatrixImpl52.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl56);
        boolean boolean58 = realMatrixImpl52.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix65 = realMatrixImpl61.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl64);
        int int66 = realMatrixImpl64.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = realMatrixImpl52.subtract(realMatrixImpl64);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = realMatrixImpl70.add(realMatrixImpl73);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl81 = realMatrixImpl77.add(realMatrixImpl80);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl82 = realMatrixImpl70.add(realMatrixImpl80);
        org.apache.commons.math.linear.RealMatrix realMatrix83 = realMatrixImpl70.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix84 = realMatrixImpl64.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl70);
        int int85 = realMatrixImpl70.getColumnDimension();
        boolean boolean86 = realMatrixImpl70.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = realMatrixImpl46.multiply(realMatrixImpl70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrixImpl15);
        org.junit.Assert.assertNotNull(realMatrixImpl22);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrixImpl39);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl67);
        org.junit.Assert.assertNotNull(realMatrixImpl74);
        org.junit.Assert.assertNotNull(realMatrixImpl81);
        org.junit.Assert.assertNotNull(realMatrixImpl82);
        org.junit.Assert.assertNotNull(realMatrix83);
        org.junit.Assert.assertNotNull(realMatrix84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        int int46 = bigMatrixImpl20.getRoundingMode();
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[][] doubleArray65 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        int int68 = bigMatrixImpl67.getScale();
        java.math.BigDecimal[][] bigDecimalArray69 = bigMatrixImpl67.getData();
        java.math.BigDecimal[][] bigDecimalArray70 = bigMatrixImpl67.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray70, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = bigMatrixImpl20.subtract(bigMatrixImpl72);
        boolean boolean74 = bigMatrixImpl73.isSquare();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 64 + "'", int68 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertNotNull(bigMatrixImpl73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl20.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl20.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray28 = bigMatrixImpl20.getColumn(97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl(1, 1);
        double double3 = realMatrixImpl2.getDeterminant();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl25.add(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl32.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl25.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl35.scalarMultiply(1.0d);
        int int40 = realMatrixImpl35.getColumnDimension();
        boolean boolean41 = bigMatrixImpl20.equals((java.lang.Object) realMatrixImpl35);
        boolean boolean42 = bigMatrixImpl20.isSquare();
        double[][] doubleArray43 = bigMatrixImpl20.getDataAsDoubleArray();
        double[][] doubleArray44 = bigMatrixImpl20.getDataAsDoubleArray();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[][] doubleArray62 = new double[][] { doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = bigMatrixImpl42.subtract(bigMatrixImpl64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = bigMatrixImpl20.add(bigMatrixImpl65);
        java.math.BigDecimal[][] bigDecimalArray67 = bigMatrixImpl66.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl66.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(bigMatrixImpl65);
        org.junit.Assert.assertNotNull(bigMatrixImpl66);
        org.junit.Assert.assertNotNull(bigDecimalArray67);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        double[][] doubleArray40 = realMatrixImpl38.getData();
        boolean boolean41 = realMatrixImpl38.isSingular();
        double[][] doubleArray42 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray42, false);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl45.getRowMatrix((int) (byte) 1);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realMatrix47);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 100, (int) (byte) 10);
        org.apache.commons.math.linear.BigMatrix bigMatrix3 = bigMatrixImpl2.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix4 = bigMatrixImpl2.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigMatrix3);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[][] doubleArray62 = new double[][] { doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = bigMatrixImpl42.subtract(bigMatrixImpl64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = bigMatrixImpl20.add(bigMatrixImpl65);
        java.math.BigDecimal[][] bigDecimalArray67 = bigMatrixImpl20.getDataRef();
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[][] doubleArray86 = new double[][] { doubleArray70, doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl87 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl88 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        java.math.BigDecimal bigDecimal91 = bigMatrixImpl88.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray92 = bigMatrixImpl88.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix94 = bigMatrixImpl88.getRowMatrix(1);
        java.math.BigDecimal[][] bigDecimalArray95 = bigMatrixImpl88.getDataRef();
        java.math.BigDecimal[] bigDecimalArray97 = bigMatrixImpl88.getColumn((int) (short) 1);
        java.math.BigDecimal[] bigDecimalArray98 = bigMatrixImpl20.preMultiply(bigDecimalArray97);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(bigMatrixImpl65);
        org.junit.Assert.assertNotNull(bigMatrixImpl66);
        org.junit.Assert.assertNotNull(bigDecimalArray67);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(bigDecimal91);
        org.junit.Assert.assertNotNull(bigDecimalArray92);
        org.junit.Assert.assertNotNull(bigMatrix94);
        org.junit.Assert.assertNotNull(bigDecimalArray95);
        org.junit.Assert.assertNotNull(bigDecimalArray97);
        org.junit.Assert.assertNotNull(bigDecimalArray98);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        boolean boolean25 = bigMatrixImpl24.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl24.copy();
        java.lang.String str27 = bigMatrixImpl24.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl24.transpose();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal29 = bigMatrixImpl24.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str27, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(bigMatrix28);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl20.copy();
        double[] doubleArray25 = bigMatrixImpl20.getRowAsDoubleArray(1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray25);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl29.add(realMatrixImpl32);
        double[] doubleArray35 = realMatrixImpl32.getColumn((int) (byte) 0);
        boolean boolean37 = realMatrixImpl32.equals((java.lang.Object) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl32.getRowMatrix(5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl26.preMultiply(realMatrix39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(realMatrix39);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, false);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl22.scalarAdd((double) (byte) 10);
        double[][] doubleArray25 = realMatrixImpl22.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray25);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl27.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray25);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray8);
        double[][] doubleArray10 = realMatrixImpl9.getData();
        double[][] doubleArray11 = realMatrixImpl9.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray11);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal15 = bigMatrixImpl12.getEntry(64, 52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(10, (int) (short) 10);
        java.lang.String str3 = bigMatrixImpl2.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = bigMatrixImpl2.transpose();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null}}" + "'", str3, "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null}}");
        org.junit.Assert.assertNotNull(bigMatrix4);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        boolean boolean71 = bigMatrixImpl67.isSingular();
        java.math.BigDecimal[][] bigDecimalArray72 = bigMatrixImpl67.getData();
        int int73 = bigMatrixImpl67.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            double double76 = bigMatrixImpl67.getEntryAsDouble((int) ' ', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 6 + "'", int73 == 6);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray27, true);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl29.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        bigMatrixImpl12.setRoundingMode((int) (byte) 100);
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[][] doubleArray36 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        java.math.BigDecimal bigDecimal41 = bigMatrixImpl38.getEntry(0, (int) (short) 0);
        boolean boolean42 = bigMatrixImpl38.isSingular();
        java.math.BigDecimal[][] bigDecimalArray43 = bigMatrixImpl38.getData();
        int int44 = bigMatrixImpl38.getRowDimension();
        boolean boolean45 = bigMatrixImpl12.equals((java.lang.Object) bigMatrixImpl38);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl12.getColumnMatrix((int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 6 + "'", int44 == 6);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl20.copy();
        int int24 = bigMatrixImpl20.getRowDimension();
        boolean boolean25 = bigMatrixImpl20.isSingular();
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl20.getDataRef();
        bigMatrixImpl20.setRoundingMode((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray30 = bigMatrixImpl20.getRowAsDoubleArray(100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrixImpl5.getColumnMatrix((int) (byte) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrixImpl5.scalarMultiply((double) 'a');
        double double14 = realMatrixImpl5.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl17.add(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl17.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl17.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl34.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl37.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl41);
        boolean boolean43 = realMatrixImpl37.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl46.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl49);
        int int51 = realMatrixImpl49.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl37.subtract(realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl17.add(realMatrixImpl49);
        double[][] doubleArray54 = realMatrixImpl53.getData();
        double[][] doubleArray55 = realMatrixImpl53.getData();
        boolean boolean56 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl53);
        java.lang.Class<?> wildcardClass57 = realMatrixImpl5.getClass();
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(2, 97);
        java.math.BigDecimal[][] bigDecimalArray3 = bigMatrixImpl2.getDataRef();
        java.lang.String str4 = bigMatrixImpl2.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray6 = bigMatrixImpl2.getRow((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null}}" + "'", str4, "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null}}");
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl20.copy();
        int int24 = bigMatrixImpl20.getRowDimension();
        boolean boolean25 = bigMatrixImpl20.isSingular();
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl20.getDataRef();
        boolean boolean27 = bigMatrixImpl20.isSquare();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getScale();
        boolean boolean14 = bigMatrixImpl12.isSingular();
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[][] doubleArray33 = new double[][] { doubleArray17, doubleArray20, doubleArray23, doubleArray26, doubleArray29, doubleArray32 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        java.math.BigDecimal bigDecimal38 = bigMatrixImpl35.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray39 = bigMatrixImpl35.getData();
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[] doubleArray45 = new double[] { 1, (byte) 10 };
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[][] doubleArray58 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54, doubleArray57 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl59 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray58);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray58);
        java.math.BigDecimal bigDecimal63 = bigMatrixImpl60.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = bigMatrixImpl35.scalarMultiply(bigDecimal63);
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[][] doubleArray83 = new double[][] { doubleArray67, doubleArray70, doubleArray73, doubleArray76, doubleArray79, doubleArray82 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl84 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray83);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl85 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray83);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl86 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray83);
        int int87 = bigMatrixImpl86.getColumnDimension();
        int int88 = bigMatrixImpl86.getScale();
        java.math.BigDecimal[] bigDecimalArray90 = bigMatrixImpl86.getColumn((int) (byte) 0);
        java.math.BigDecimal[] bigDecimalArray91 = bigMatrixImpl35.preMultiply(bigDecimalArray90);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray92 = bigMatrixImpl12.solve(bigDecimalArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 64 + "'", int13 == 64);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertNotNull(bigMatrix64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 64 + "'", int88 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray90);
        org.junit.Assert.assertNotNull(bigDecimalArray91);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[] doubleArray47 = new double[] { 1, (byte) 10 };
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[][] doubleArray57 = new double[][] { doubleArray41, doubleArray44, doubleArray47, doubleArray50, doubleArray53, doubleArray56 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray57);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl59 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray57);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray57);
        int int61 = bigMatrixImpl60.getRoundingMode();
        int int62 = bigMatrixImpl60.getScale();
        int int63 = bigMatrixImpl60.getScale();
        java.math.BigDecimal[][] bigDecimalArray64 = bigMatrixImpl60.getDataRef();
        bigMatrixImpl60.setRoundingMode((int) ' ');
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[] doubleArray72 = new double[] { 1, (byte) 10 };
        double[] doubleArray75 = new double[] { 1, (byte) 10 };
        double[] doubleArray78 = new double[] { 1, (byte) 10 };
        double[] doubleArray81 = new double[] { 1, (byte) 10 };
        double[] doubleArray84 = new double[] { 1, (byte) 10 };
        double[][] doubleArray85 = new double[][] { doubleArray69, doubleArray72, doubleArray75, doubleArray78, doubleArray81, doubleArray84 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl86 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray85);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl87 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray85);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl88 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray85);
        int int89 = bigMatrixImpl88.getScale();
        int int90 = bigMatrixImpl88.getRowDimension();
        java.math.BigDecimal[] bigDecimalArray92 = bigMatrixImpl88.getRow(2);
        org.apache.commons.math.linear.BigMatrix bigMatrix93 = bigMatrixImpl60.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl88);
        double[][] doubleArray94 = bigMatrixImpl60.getDataAsDoubleArray();
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl34.setSubMatrix(doubleArray94, (int) (short) -1, (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 64 + "'", int62 == 64);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 64 + "'", int63 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray64);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 64 + "'", int89 == 64);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 6 + "'", int90 == 6);
        org.junit.Assert.assertNotNull(bigDecimalArray92);
        org.junit.Assert.assertNotNull(bigMatrix93);
        org.junit.Assert.assertNotNull(doubleArray94);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        double[] doubleArray42 = realMatrixImpl34.getColumn(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl46.add(realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = realMatrixImpl53.add(realMatrixImpl56);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl46.add(realMatrixImpl56);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrixImpl56.scalarMultiply(1.0d);
        double[] doubleArray62 = realMatrixImpl56.getRow((int) (short) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray64 = realMatrixImpl43.preMultiply(doubleArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertNotNull(realMatrixImpl57);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean46 = bigMatrixImpl20.equals((java.lang.Object) (-1));
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[][] doubleArray65 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[][] doubleArray86 = new double[][] { doubleArray70, doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl87 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl88 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl89 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        int int90 = bigMatrixImpl89.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl91 = bigMatrixImpl67.add(bigMatrixImpl89);
        java.math.BigDecimal bigDecimal92 = bigMatrixImpl89.getNorm();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl93 = bigMatrixImpl20.subtract(bigMatrixImpl89);
        org.apache.commons.math.linear.BigMatrix bigMatrix94 = bigMatrixImpl93.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix95 = bigMatrixImpl93.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl91);
        org.junit.Assert.assertNotNull(bigDecimal92);
        org.junit.Assert.assertNotNull(bigMatrixImpl93);
        org.junit.Assert.assertNotNull(bigMatrix94);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        boolean boolean10 = realMatrixImpl5.equals((java.lang.Object) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrixImpl5.scalarAdd((double) 4);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = realMatrixImpl5.scalarAdd((double) (-1L));
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl17.add(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrixImpl27.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl31);
        boolean boolean33 = realMatrixImpl27.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl36.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl39);
        int int41 = realMatrixImpl39.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = realMatrixImpl27.subtract(realMatrixImpl39);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl20.subtract(realMatrixImpl42);
        double[] doubleArray45 = realMatrixImpl20.getRow(0);
        double[] doubleArray46 = realMatrixImpl5.operate(doubleArray45);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl42);
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, true);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal27 = bigMatrixImpl26.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) 'a', (int) (byte) 10);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl42.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl42.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl59.add(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl42.add(realMatrix67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl38.subtract(realMatrixImpl42);
        double[] doubleArray71 = realMatrixImpl69.getRow(4);
        int int72 = realMatrixImpl69.getColumnDimension();
        java.math.BigDecimal bigDecimal73 = null;
        java.math.BigDecimal[] bigDecimalArray74 = new java.math.BigDecimal[] { bigDecimal73 };
        java.math.BigDecimal bigDecimal75 = null;
        java.math.BigDecimal[] bigDecimalArray76 = new java.math.BigDecimal[] { bigDecimal75 };
        java.math.BigDecimal bigDecimal77 = null;
        java.math.BigDecimal[] bigDecimalArray78 = new java.math.BigDecimal[] { bigDecimal77 };
        java.math.BigDecimal bigDecimal79 = null;
        java.math.BigDecimal[] bigDecimalArray80 = new java.math.BigDecimal[] { bigDecimal79 };
        java.math.BigDecimal bigDecimal81 = null;
        java.math.BigDecimal[] bigDecimalArray82 = new java.math.BigDecimal[] { bigDecimal81 };
        java.math.BigDecimal[][] bigDecimalArray83 = new java.math.BigDecimal[][] { bigDecimalArray74, bigDecimalArray76, bigDecimalArray78, bigDecimalArray80, bigDecimalArray82 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl85 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray83, true);
        bigMatrixImpl85.setScale((int) (short) 0);
        int int88 = bigMatrixImpl85.getRoundingMode();
        int int89 = bigMatrixImpl85.getRowDimension();
        int int90 = bigMatrixImpl85.getRoundingMode();
        boolean boolean91 = realMatrixImpl69.equals((java.lang.Object) bigMatrixImpl85);
        // The following exception was thrown during execution in test generation
        try {
            double double94 = realMatrixImpl69.getEntry((int) (byte) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertNotNull(bigDecimalArray74);
        org.junit.Assert.assertNotNull(bigDecimalArray76);
        org.junit.Assert.assertNotNull(bigDecimalArray78);
        org.junit.Assert.assertNotNull(bigDecimalArray80);
        org.junit.Assert.assertNotNull(bigDecimalArray82);
        org.junit.Assert.assertNotNull(bigDecimalArray83);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 5 + "'", int89 == 5);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 4 + "'", int90 == 4);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        int int23 = bigMatrixImpl21.getScale();
        int int24 = bigMatrixImpl21.getScale();
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl21.getDataRef();
        bigMatrixImpl21.setRoundingMode((int) ' ');
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[] doubleArray45 = new double[] { 1, (byte) 10 };
        double[][] doubleArray46 = new double[][] { doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42, doubleArray45 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        int int50 = bigMatrixImpl49.getScale();
        int int51 = bigMatrixImpl49.getRowDimension();
        java.math.BigDecimal[] bigDecimalArray53 = bigMatrixImpl49.getRow(2);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
        double[][] doubleArray55 = bigMatrixImpl21.getDataAsDoubleArray();
        double[][] doubleArray56 = bigMatrixImpl21.getDataAsDoubleArray();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 64 + "'", int24 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 64 + "'", int50 == 64);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrixImpl5.getColumnMatrix((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl5.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        java.lang.String[] strArray1 = new java.lang.String[] { "BigMatrixImpl{{null},{null},{null},{null},{null}}" };
        java.lang.String[] strArray3 = new java.lang.String[] { "BigMatrixImpl{{null},{null},{null},{null},{null}}" };
        java.lang.String[][] strArray4 = new java.lang.String[][] { strArray1, strArray3 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean46 = bigMatrixImpl20.equals((java.lang.Object) (-1));
        boolean boolean47 = bigMatrixImpl20.isSquare();
        java.math.BigDecimal[][] bigDecimalArray48 = bigMatrixImpl20.getDataRef();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 100, (int) (byte) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix3 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.transpose();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl7 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = realMatrixImpl7.add(realMatrixImpl10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = realMatrixImpl14.add(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = realMatrixImpl7.add(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl7.scalarAdd((double) (byte) 1);
        double[] doubleArray23 = realMatrixImpl7.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl2.add(realMatrixImpl26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix3);
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertNotNull(realMatrixImpl11);
        org.junit.Assert.assertNotNull(realMatrixImpl18);
        org.junit.Assert.assertNotNull(realMatrixImpl19);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        boolean boolean71 = bigMatrixImpl67.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray73 = bigMatrixImpl67.getColumn((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = realMatrixImpl12.add(realMatrixImpl15);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl12.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl5.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl22);
        double[][] doubleArray26 = realMatrixImpl22.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray26, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray26, false);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(doubleArray26);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl21.getRowMatrix(4);
        int int27 = bigMatrixImpl21.getColumnDimension();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int20 = bigMatrixImpl19.getRoundingMode();
        boolean boolean21 = bigMatrixImpl19.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrixImpl19.transpose();
        java.lang.String str23 = bigMatrixImpl19.toString();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigMatrix22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str23, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl21.getRowMatrix(4);
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[][] doubleArray66 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        int int70 = bigMatrixImpl69.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = bigMatrixImpl47.add(bigMatrixImpl69);
        java.math.BigDecimal bigDecimal72 = bigMatrixImpl69.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl21.scalarAdd(bigDecimal72);
        java.lang.String str74 = bigMatrixImpl21.toString();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl71);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigMatrix73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str74, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        bigMatrixImpl12.setScale((int) '4');
        java.lang.String str19 = bigMatrixImpl12.toString();
        int int20 = bigMatrixImpl12.getColumnDimension();
        int int21 = bigMatrixImpl12.getRoundingMode();
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "BigMatrixImpl{{null},{null},{null},{null},{null}}" + "'", str19, "BigMatrixImpl{{null},{null},{null},{null},{null}}");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(4, 10);
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[][] doubleArray21 = new double[][] { doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17, doubleArray20 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        java.math.BigDecimal bigDecimal26 = bigMatrixImpl23.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl23.copy();
        boolean boolean28 = bigMatrixImpl2.equals((java.lang.Object) bigMatrix27);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl28.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl21.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl21.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl21.getColumnMatrix((int) (short) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl16.subtract(realMatrixImpl21);
        int int39 = realMatrixImpl16.getRowDimension();
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        boolean boolean3 = realMatrixImpl2.isSquare();
        int int4 = realMatrixImpl2.getColumnDimension();
        double[] doubleArray7 = new double[] { 1, (byte) 10 };
        double[] doubleArray10 = new double[] { 1, (byte) 10 };
        double[] doubleArray13 = new double[] { 1, (byte) 10 };
        double[] doubleArray16 = new double[] { 1, (byte) 10 };
        double[] doubleArray19 = new double[] { 1, (byte) 10 };
        double[] doubleArray22 = new double[] { 1, (byte) 10 };
        double[][] doubleArray23 = new double[][] { doubleArray7, doubleArray10, doubleArray13, doubleArray16, doubleArray19, doubleArray22 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray23);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray23);
        java.math.BigDecimal bigDecimal28 = bigMatrixImpl25.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl25.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl25.getRowMatrix(1);
        java.math.BigDecimal[][] bigDecimalArray32 = bigMatrixImpl25.getData();
        int int33 = bigMatrixImpl25.getRowDimension();
        boolean boolean34 = realMatrixImpl2.equals((java.lang.Object) int33);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl2.scalarAdd((double) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(realMatrix36);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl(5, 100);
        int int3 = realMatrixImpl2.getRowDimension();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        int int16 = bigMatrixImpl12.getRowDimension();
        int int17 = bigMatrixImpl12.getRoundingMode();
        boolean boolean18 = bigMatrixImpl12.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix20 = bigMatrixImpl12.getRowMatrix((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray24);
        boolean boolean26 = realMatrixImpl25.isSquare();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        int int25 = bigMatrixImpl24.getRoundingMode();
        double[][] doubleArray26 = bigMatrixImpl24.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(doubleArray26);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        double[] doubleArray21 = new double[] { 1, (byte) 10 };
        double[] doubleArray24 = new double[] { 1, (byte) 10 };
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray37);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray37);
        boolean boolean40 = bigMatrixImpl39.isSquare();
        java.math.BigDecimal[][] bigDecimalArray41 = bigMatrixImpl39.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl44.add(realMatrixImpl47);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl51.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl44.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl54.scalarMultiply(1.0d);
        int int59 = realMatrixImpl54.getColumnDimension();
        boolean boolean60 = bigMatrixImpl39.equals((java.lang.Object) realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl16.subtract(realMatrixImpl54);
        int[] intArray65 = new int[] { 1, 6, 2 };
        int[] intArray67 = new int[] { (byte) -1 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl54.getSubMatrix(intArray65, intArray67);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 6, 2]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1]");
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        boolean boolean44 = bigMatrixImpl43.isSquare();
        java.math.BigDecimal[][] bigDecimalArray45 = bigMatrixImpl43.getDataRef();
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl43.getEntry(1, (int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl22.scalarMultiply(bigDecimal48);
        boolean boolean50 = bigMatrixImpl22.isSingular();
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[] doubleArray68 = new double[] { 1, (byte) 10 };
        double[][] doubleArray69 = new double[][] { doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65, doubleArray68 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray69);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray69);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray69);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray69);
        org.apache.commons.math.linear.BigMatrix bigMatrix74 = bigMatrixImpl73.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix75 = bigMatrixImpl22.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl73);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigMatrix49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(bigMatrix74);
        org.junit.Assert.assertNotNull(bigMatrix75);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        int int25 = bigMatrixImpl24.getRoundingMode();
        boolean boolean26 = bigMatrixImpl24.isSingular();
        boolean boolean27 = bigMatrixImpl24.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl37.add(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl44.add(realMatrixImpl47);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl37.add(realMatrixImpl47);
        org.apache.commons.math.linear.RealMatrix realMatrix51 = realMatrixImpl37.scalarAdd((double) (byte) 1);
        double[] doubleArray53 = realMatrixImpl37.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray53);
        double[] doubleArray55 = realMatrixImpl33.preMultiply(doubleArray53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrixImpl58.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl65.add(realMatrixImpl68);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix73 = realMatrixImpl68.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl72);
        boolean boolean74 = realMatrixImpl61.equals((java.lang.Object) realMatrixImpl72);
        boolean boolean76 = realMatrixImpl61.equals((java.lang.Object) 0.0d);
        boolean boolean77 = realMatrixImpl61.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix78 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl61);
        boolean boolean79 = bigMatrixImpl24.equals((java.lang.Object) realMatrix78);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
        org.junit.Assert.assertNotNull(realMatrixImpl49);
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(realMatrix78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = realMatrixImpl43.add(realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl53.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        boolean boolean59 = realMatrixImpl53.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl65);
        int int67 = realMatrixImpl65.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl53.subtract(realMatrixImpl65);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl46.subtract(realMatrixImpl68);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = realMatrixImpl72.add(realMatrixImpl75);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl79 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix80 = realMatrixImpl75.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl79);
        org.apache.commons.math.linear.RealMatrix realMatrix81 = realMatrixImpl69.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl75);
        org.apache.commons.math.linear.RealMatrix realMatrix82 = realMatrixImpl34.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl75);
        double[][] doubleArray83 = realMatrixImpl75.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix88 = realMatrixImpl75.getSubMatrix(10, 0, 100, 6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(realMatrixImpl47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(realMatrixImpl76);
        org.junit.Assert.assertNotNull(realMatrix80);
        org.junit.Assert.assertNotNull(realMatrix81);
        org.junit.Assert.assertNotNull(realMatrix82);
        org.junit.Assert.assertNotNull(doubleArray83);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        boolean boolean17 = bigMatrixImpl12.isSquare();
        bigMatrixImpl12.setRoundingMode(97);
        int int20 = bigMatrixImpl12.getRowDimension();
        java.math.BigDecimal[][] bigDecimalArray21 = bigMatrixImpl12.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl12.getSubMatrix((int) (byte) -1, (-1), 2, 5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        int int10 = realMatrixImpl5.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = realMatrixImpl5.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        int int25 = bigMatrixImpl24.getRoundingMode();
        int int26 = bigMatrixImpl24.getColumnDimension();
        int int27 = bigMatrixImpl24.getScale();
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[] doubleArray45 = new double[] { 1, (byte) 10 };
        double[][] doubleArray46 = new double[][] { doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42, doubleArray45 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        int int50 = bigMatrixImpl49.getScale();
        int int51 = bigMatrixImpl49.getRowDimension();
        java.math.BigDecimal[] bigDecimalArray53 = bigMatrixImpl49.getRow(2);
        bigMatrixImpl49.setRoundingMode(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl56 = bigMatrixImpl24.multiply(bigMatrixImpl49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 64 + "'", int27 == 64);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 64 + "'", int50 == 64);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[] doubleArray47 = new double[] { 1, (byte) 10 };
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[][] doubleArray51 = new double[][] { doubleArray35, doubleArray38, doubleArray41, doubleArray44, doubleArray47, doubleArray50 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray51);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray51);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray51);
        int int55 = bigMatrixImpl54.getRoundingMode();
        int int56 = bigMatrixImpl54.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = bigMatrixImpl54.transpose();
        double[] doubleArray59 = bigMatrixImpl54.getColumnAsDoubleArray(1);
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[] doubleArray68 = new double[] { 1, (byte) 10 };
        double[] doubleArray71 = new double[] { 1, (byte) 10 };
        double[] doubleArray74 = new double[] { 1, (byte) 10 };
        double[] doubleArray77 = new double[] { 1, (byte) 10 };
        double[][] doubleArray78 = new double[][] { doubleArray62, doubleArray65, doubleArray68, doubleArray71, doubleArray74, doubleArray77 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl79 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray78);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl80 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray78);
        boolean boolean81 = bigMatrixImpl80.isSquare();
        java.math.BigDecimal[][] bigDecimalArray82 = bigMatrixImpl80.getDataRef();
        java.math.BigDecimal bigDecimal85 = bigMatrixImpl80.getEntry(1, (int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix86 = bigMatrixImpl54.scalarAdd(bigDecimal85);
        org.apache.commons.math.linear.BigMatrix bigMatrix87 = bigMatrixImpl32.scalarAdd(bigDecimal85);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal88 = bigMatrixImpl32.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 64 + "'", int56 == 64);
        org.junit.Assert.assertNotNull(bigMatrix57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray82);
        org.junit.Assert.assertNotNull(bigDecimal85);
        org.junit.Assert.assertNotNull(bigMatrix86);
        org.junit.Assert.assertNotNull(bigMatrix87);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl26.equals((java.lang.Object) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl5.add(realMatrixImpl37);
        int int41 = realMatrixImpl40.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray43 = realMatrixImpl40.getColumn(64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl2.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double40 = realMatrixImpl2.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix39);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl20.copy();
        int int24 = bigMatrixImpl20.getRowDimension();
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray25);
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        java.math.BigDecimal bigDecimal50 = bigMatrixImpl47.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray51 = bigMatrixImpl47.getData();
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[][] doubleArray70 = new double[][] { doubleArray54, doubleArray57, doubleArray60, doubleArray63, doubleArray66, doubleArray69 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        java.math.BigDecimal bigDecimal75 = bigMatrixImpl72.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl47.scalarMultiply(bigDecimal75);
        java.math.BigDecimal[] bigDecimalArray78 = bigMatrixImpl47.getRow(2);
        java.math.BigDecimal[] bigDecimalArray79 = bigMatrixImpl26.operate(bigDecimalArray78);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl80 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray78);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray78);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl81.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertNotNull(bigMatrix76);
        org.junit.Assert.assertNotNull(bigDecimalArray78);
        org.junit.Assert.assertNotNull(bigDecimalArray79);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        double[][] doubleArray17 = realMatrixImpl2.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl20.add(realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl27.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl20.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl20.scalarAdd((double) (byte) 1);
        double[] doubleArray36 = realMatrixImpl20.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray36);
        double[] doubleArray40 = realMatrixImpl2.preMultiply(doubleArray36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl41.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        double[] doubleArray16 = realMatrixImpl14.getColumn(10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        boolean boolean35 = realMatrixImpl29.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl38.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl41);
        int int43 = realMatrixImpl41.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl29.subtract(realMatrixImpl41);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl22.subtract(realMatrixImpl44);
        double[] doubleArray47 = realMatrixImpl22.getRow(0);
        boolean boolean48 = realMatrixImpl14.equals((java.lang.Object) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl14.scalarAdd(0.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix52 = realMatrixImpl14.getColumnMatrix(6);
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrixImpl14.getColumnMatrix((int) (short) 0);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertNotNull(realMatrix54);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        double[] doubleArray18 = realMatrixImpl2.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        boolean boolean29 = realMatrixImpl28.isSquare();
        double[][] doubleArray30 = realMatrixImpl28.getDataRef();
        double[][] doubleArray31 = realMatrixImpl28.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl34.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl41.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl34.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl44.scalarMultiply(1.0d);
        double[] doubleArray50 = realMatrixImpl44.getRow((int) (short) 1);
        double[] doubleArray51 = realMatrixImpl28.operate(doubleArray50);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray51);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrixImpl55.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl58);
        org.apache.commons.math.linear.RealMatrix realMatrix61 = realMatrixImpl58.getColumnMatrix((int) (short) 1);
        boolean boolean62 = realMatrixImpl58.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrixImpl58.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = realMatrixImpl52.add(realMatrixImpl58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(realMatrix63);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, false);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        double[][] doubleArray71 = bigMatrixImpl67.getDataAsDoubleArray();
        java.math.BigDecimal[][] bigDecimalArray72 = bigMatrixImpl67.getDataRef();
        double[] doubleArray75 = new double[] { 1, (byte) 10 };
        double[] doubleArray78 = new double[] { 1, (byte) 10 };
        double[] doubleArray81 = new double[] { 1, (byte) 10 };
        double[] doubleArray84 = new double[] { 1, (byte) 10 };
        double[] doubleArray87 = new double[] { 1, (byte) 10 };
        double[] doubleArray90 = new double[] { 1, (byte) 10 };
        double[][] doubleArray91 = new double[][] { doubleArray75, doubleArray78, doubleArray81, doubleArray84, doubleArray87, doubleArray90 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl92 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray91);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl93 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray91);
        int int94 = bigMatrixImpl93.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix95 = bigMatrixImpl67.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl93);
        boolean boolean96 = bigMatrixImpl93.isSingular();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 64 + "'", int94 == 64);
        org.junit.Assert.assertNotNull(bigMatrix95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl5.copy();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = realMatrixImpl22.add(realMatrixImpl25);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl29.add(realMatrixImpl32);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl32.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl36);
        boolean boolean38 = realMatrixImpl32.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl41.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl44);
        int int46 = realMatrixImpl44.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = realMatrixImpl32.subtract(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl25.subtract(realMatrixImpl47);
        double[] doubleArray50 = realMatrixImpl25.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = realMatrixImpl53.add(realMatrixImpl56);
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl25.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrixImpl5.subtract(realMatrix58);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = realMatrixImpl62.add(realMatrixImpl65);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = realMatrixImpl69.add(realMatrixImpl72);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = realMatrixImpl62.add(realMatrixImpl72);
        org.apache.commons.math.linear.RealMatrix realMatrix76 = realMatrixImpl72.scalarMultiply(1.0d);
        double[] doubleArray78 = realMatrixImpl72.getRow((int) (short) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl79 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray78);
        double[] doubleArray80 = realMatrixImpl5.operate(doubleArray78);
        org.apache.commons.math.linear.RealMatrix realMatrix82 = realMatrixImpl5.scalarAdd((-1.0d));
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrixImpl26);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl47);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl57);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(realMatrixImpl66);
        org.junit.Assert.assertNotNull(realMatrixImpl73);
        org.junit.Assert.assertNotNull(realMatrixImpl74);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix82);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        int int39 = realMatrixImpl38.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            double double42 = realMatrixImpl38.getEntry(6, 52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        java.math.BigDecimal[][] bigDecimalArray45 = bigMatrixImpl44.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45, true);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
        int int51 = bigMatrixImpl49.getRoundingMode();
        java.lang.String str52 = bigMatrixImpl49.toString();
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[][] doubleArray71 = new double[][] { doubleArray55, doubleArray58, doubleArray61, doubleArray64, doubleArray67, doubleArray70 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray71);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray71);
        int int74 = bigMatrixImpl73.getScale();
        java.math.BigDecimal[][] bigDecimalArray75 = bigMatrixImpl73.getData();
        int int76 = bigMatrixImpl73.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix77 = bigMatrixImpl73.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix78 = bigMatrixImpl49.subtract(bigMatrix77);
        int int79 = bigMatrixImpl49.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix84 = bigMatrixImpl49.getSubMatrix((int) (short) 1, 64, 5, 35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str52, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 64 + "'", int74 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 4 + "'", int76 == 4);
        org.junit.Assert.assertNotNull(bigMatrix77);
        org.junit.Assert.assertNotNull(bigMatrix78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        double[] doubleArray18 = realMatrixImpl2.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        boolean boolean22 = realMatrixImpl21.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl25.add(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl32);
        boolean boolean34 = realMatrixImpl28.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrixImpl37.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl40);
        int int42 = realMatrixImpl40.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl28.subtract(realMatrixImpl40);
        double[][] doubleArray44 = realMatrixImpl40.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray44, true);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray44, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix49 = realMatrixImpl21.multiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(doubleArray44);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl5.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl5.scalarAdd((double) 97);
        boolean boolean22 = realMatrixImpl5.isSingular();
        int int23 = realMatrixImpl5.getColumnDimension();
        boolean boolean24 = realMatrixImpl5.isSquare();
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl23.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl23.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl17.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl23);
        double[] doubleArray39 = realMatrixImpl17.getColumn((int) (byte) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl42.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl52.scalarMultiply(1.0d);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl59.add(realMatrixImpl62);
        double[] doubleArray65 = realMatrixImpl62.getColumn((int) (byte) 0);
        boolean boolean67 = realMatrixImpl62.equals((java.lang.Object) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix69 = realMatrixImpl62.getRowMatrix(5);
        double[] doubleArray71 = realMatrixImpl62.getColumn(0);
        double[] doubleArray72 = realMatrixImpl52.preMultiply(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray73 = realMatrixImpl17.solve(doubleArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(realMatrix69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl6.add(realMatrix23);
        double[] doubleArray26 = realMatrixImpl6.getRow((int) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl29.add(realMatrixImpl32);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl36.add(realMatrixImpl39);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl29.add(realMatrixImpl39);
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl29.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl46.add(realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrixImpl49.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl53);
        boolean boolean55 = realMatrixImpl49.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrixImpl58.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl61);
        int int63 = realMatrixImpl61.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = realMatrixImpl49.subtract(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = realMatrixImpl29.add(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrixImpl29.copy();
        boolean boolean67 = realMatrixImpl29.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl6.subtract(realMatrixImpl29);
        // The following exception was thrown during execution in test generation
        try {
            double double69 = realMatrixImpl6.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl64);
        org.junit.Assert.assertNotNull(realMatrixImpl65);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        boolean boolean7 = realMatrixImpl6.isSquare();
        int int8 = realMatrixImpl6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = realMatrixImpl6.transpose();
        double[][] doubleArray10 = realMatrixImpl6.getDataRef();
        double[] doubleArray13 = new double[] { 1, (byte) 10 };
        double[] doubleArray16 = new double[] { 1, (byte) 10 };
        double[] doubleArray19 = new double[] { 1, (byte) 10 };
        double[] doubleArray22 = new double[] { 1, (byte) 10 };
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[][] doubleArray29 = new double[][] { doubleArray13, doubleArray16, doubleArray19, doubleArray22, doubleArray25, doubleArray28 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray29);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray29);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray29);
        int int34 = realMatrixImpl33.getRowDimension();
        double[][] doubleArray35 = realMatrixImpl33.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray35);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl6.setSubMatrix(doubleArray35, (int) (short) 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertNotNull(doubleArray35);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) (byte) 1);
        double[] doubleArray25 = realMatrixImpl9.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray25);
        double[] doubleArray27 = realMatrixImpl5.preMultiply(doubleArray25);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl30.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl37.add(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl40.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl44);
        boolean boolean46 = realMatrixImpl33.equals((java.lang.Object) realMatrixImpl44);
        boolean boolean48 = realMatrixImpl33.equals((java.lang.Object) 0.0d);
        boolean boolean49 = realMatrixImpl33.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix57 = realMatrixImpl53.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl56);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl33.multiply(realMatrix57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(realMatrix57);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean45 = bigMatrixImpl44.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl48.add(realMatrixImpl51);
        double[] doubleArray54 = realMatrixImpl51.getColumn((int) (byte) 0);
        boolean boolean56 = realMatrixImpl51.equals((java.lang.Object) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl51.getRowMatrix(5);
        double[] doubleArray60 = realMatrixImpl51.getColumn(0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray61 = bigMatrixImpl44.solve(doubleArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.scalarAdd((double) 2);
        int int5 = realMatrixImpl2.getRowDimension();
        double double8 = realMatrixImpl2.getEntry((int) (short) 1, 6);
        double double11 = realMatrixImpl2.getEntry(1, (int) (byte) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl2.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        double[][] doubleArray21 = realMatrixImpl17.getData();
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        int int27 = bigMatrixImpl20.getColumnDimension();
        int int28 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl20.getData();
        java.lang.String str30 = bigMatrixImpl20.toString();
        bigMatrixImpl20.setRoundingMode((int) (short) 1);
        double[][] doubleArray33 = bigMatrixImpl20.getDataAsDoubleArray();
        java.math.BigDecimal bigDecimal34 = bigMatrixImpl20.getNorm();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str30, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(bigDecimal34);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl20.getData();
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl46.copy();
        boolean boolean48 = bigMatrixImpl20.equals((java.lang.Object) bigMatrixImpl46);
        java.lang.String str49 = bigMatrixImpl20.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal50 = bigMatrixImpl20.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str49, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[] bigDecimalArray23 = bigMatrixImpl20.getRow((int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        int int25 = bigMatrixImpl20.getRoundingMode();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean45 = bigMatrixImpl44.isSquare();
        int int46 = bigMatrixImpl44.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl44.copy();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray49 = bigMatrixImpl44.getRowAsDoubleArray((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 64 + "'", int46 == 64);
        org.junit.Assert.assertNotNull(bigMatrix47);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl19.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        boolean boolean35 = realMatrixImpl22.equals((java.lang.Object) realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl2.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl39.add(realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl46.add(realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = realMatrixImpl39.add(realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrix realMatrix53 = realMatrixImpl39.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix55 = realMatrixImpl39.scalarAdd((double) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl22.preMultiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertNotNull(realMatrixImpl51);
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertNotNull(realMatrix55);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        boolean boolean23 = bigMatrixImpl21.isSquare();
        bigMatrixImpl21.setScale(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl21.copy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(bigMatrix26);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        double[][] doubleArray71 = bigMatrixImpl67.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray71);
        org.apache.commons.math.linear.RealMatrix realMatrix73 = realMatrixImpl72.copy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(realMatrix73);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl25.add(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl32.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl25.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl35.scalarMultiply(1.0d);
        int int40 = realMatrixImpl35.getColumnDimension();
        boolean boolean41 = bigMatrixImpl20.equals((java.lang.Object) realMatrixImpl35);
        boolean boolean42 = bigMatrixImpl20.isSquare();
        double[][] doubleArray43 = bigMatrixImpl20.getDataAsDoubleArray();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal44 = bigMatrixImpl20.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) '#', (int) (byte) 1);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl42.getRowMatrix((int) (short) 1);
        bigMatrixImpl42.setScale((int) (byte) 100);
        java.math.BigDecimal[][] bigDecimalArray49 = bigMatrixImpl42.getData();
        int[] intArray50 = new int[] {};
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = realMatrixImpl53.add(realMatrixImpl56);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = realMatrixImpl60.add(realMatrixImpl63);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl63.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl67);
        boolean boolean69 = realMatrixImpl63.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix76 = realMatrixImpl72.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl75);
        int int77 = realMatrixImpl75.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl78 = realMatrixImpl63.subtract(realMatrixImpl75);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl79 = realMatrixImpl56.subtract(realMatrixImpl78);
        boolean boolean80 = realMatrixImpl79.isSingular();
        int[] intArray82 = new int[] { 4 };
        int[] intArray84 = new int[] { (byte) 0 };
        org.apache.commons.math.linear.RealMatrix realMatrix85 = realMatrixImpl79.getSubMatrix(intArray82, intArray84);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix86 = bigMatrixImpl42.getSubMatrix(intArray50, intArray84);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: selected row and column index arrays must be non-empty");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(realMatrixImpl57);
        org.junit.Assert.assertNotNull(realMatrixImpl64);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl78);
        org.junit.Assert.assertNotNull(realMatrixImpl79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[4]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0]");
        org.junit.Assert.assertNotNull(realMatrix85);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        int int40 = realMatrixImpl38.getRowDimension();
        boolean boolean41 = realMatrixImpl38.isSquare();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl19.getNorm();
        int int21 = bigMatrixImpl19.getRoundingMode();
        int int22 = bigMatrixImpl19.getScale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl19.getSubMatrix(4, (int) (short) 1, (int) (byte) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 64 + "'", int22 == 64);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        int int39 = realMatrixImpl38.getColumnDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        double[][] doubleArray47 = realMatrixImpl45.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl57.add(realMatrixImpl60);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix65 = realMatrixImpl60.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl64);
        boolean boolean66 = realMatrixImpl60.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix73 = realMatrixImpl69.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl72);
        int int74 = realMatrixImpl72.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = realMatrixImpl60.subtract(realMatrixImpl72);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = realMatrixImpl53.subtract(realMatrixImpl75);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl45.subtract(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrix realMatrix78 = realMatrixImpl38.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl75);
        org.junit.Assert.assertNotNull(realMatrixImpl76);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertNotNull(realMatrix78);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl5.copy();
        double double20 = realMatrixImpl5.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl26.equals((java.lang.Object) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl42.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl42.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl42.getColumnMatrix((int) (short) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl37.subtract(realMatrixImpl42);
        double[] doubleArray61 = realMatrixImpl37.getColumn((int) (short) 10);
        double[] doubleArray62 = realMatrixImpl5.preMultiply(doubleArray61);
        org.apache.commons.math.linear.RealMatrix realMatrix63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix64 = realMatrixImpl5.solve(realMatrix63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertNotNull(realMatrixImpl59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl2.copy();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        double[][] doubleArray21 = realMatrixImpl17.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray21);
        double double24 = realMatrixImpl23.getNorm();
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray43);
        int int48 = realMatrixImpl47.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix49 = realMatrixImpl23.preMultiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        int int21 = realMatrixImpl17.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray23 = realMatrixImpl17.getRow((-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(2, 97);
        java.math.BigDecimal[][] bigDecimalArray3 = bigMatrixImpl2.getDataRef();
        java.lang.String str4 = bigMatrixImpl2.toString();
        double[] doubleArray7 = new double[] { 1, (byte) 10 };
        double[] doubleArray10 = new double[] { 1, (byte) 10 };
        double[] doubleArray13 = new double[] { 1, (byte) 10 };
        double[] doubleArray16 = new double[] { 1, (byte) 10 };
        double[] doubleArray19 = new double[] { 1, (byte) 10 };
        double[] doubleArray22 = new double[] { 1, (byte) 10 };
        double[][] doubleArray23 = new double[][] { doubleArray7, doubleArray10, doubleArray13, doubleArray16, doubleArray19, doubleArray22 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray23);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray23);
        java.math.BigDecimal bigDecimal28 = bigMatrixImpl25.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl25.getData();
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[] doubleArray47 = new double[] { 1, (byte) 10 };
        double[][] doubleArray48 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44, doubleArray47 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray48);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray48);
        java.math.BigDecimal bigDecimal53 = bigMatrixImpl50.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = bigMatrixImpl25.scalarMultiply(bigDecimal53);
        java.math.BigDecimal[] bigDecimalArray56 = bigMatrixImpl25.getRow(2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray56);
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[] doubleArray72 = new double[] { 1, (byte) 10 };
        double[] doubleArray75 = new double[] { 1, (byte) 10 };
        double[][] doubleArray76 = new double[][] { doubleArray60, doubleArray63, doubleArray66, doubleArray69, doubleArray72, doubleArray75 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl77 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray76);
        java.math.BigDecimal bigDecimal78 = bigMatrixImpl77.getNorm();
        java.math.BigDecimal[] bigDecimalArray79 = new java.math.BigDecimal[] { bigDecimal78 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl80 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray79);
        org.apache.commons.math.linear.BigMatrix bigMatrix81 = bigMatrixImpl80.transpose();
        boolean boolean82 = bigMatrixImpl57.equals((java.lang.Object) bigMatrix81);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix83 = bigMatrixImpl2.subtract(bigMatrix81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null}}" + "'", str4, "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null}}");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(bigDecimal78);
        org.junit.Assert.assertNotNull(bigDecimalArray79);
        org.junit.Assert.assertNotNull(bigMatrix81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl19.getNorm();
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        java.math.BigDecimal[] bigDecimalArray24 = bigMatrixImpl22.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl27.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl30.getColumnMatrix((int) (short) 1);
        boolean boolean34 = realMatrixImpl30.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl30.getColumnMatrix((int) (byte) 10);
        boolean boolean37 = bigMatrixImpl22.equals((java.lang.Object) (byte) 10);
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[][] doubleArray56 = new double[][] { doubleArray40, doubleArray43, doubleArray46, doubleArray49, doubleArray52, doubleArray55 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray56);
        java.math.BigDecimal bigDecimal58 = bigMatrixImpl57.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl22.scalarAdd(bigDecimal58);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix61 = bigMatrixImpl22.getColumnMatrix(6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigMatrix59);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        int int46 = bigMatrixImpl42.getScale();
        int int47 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl57.add(realMatrixImpl60);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl64.add(realMatrixImpl67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl57.add(realMatrixImpl67);
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrixImpl57.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix72 = realMatrixImpl54.add(realMatrix71);
        double[] doubleArray74 = realMatrixImpl54.getRow((int) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray74);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray77 = bigMatrixImpl42.solve(doubleArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 64 + "'", int46 == 64);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertNotNull(realMatrix72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl21.getRowMatrix(4);
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[][] doubleArray66 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        int int70 = bigMatrixImpl69.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = bigMatrixImpl47.add(bigMatrixImpl69);
        java.math.BigDecimal bigDecimal72 = bigMatrixImpl69.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl21.scalarAdd(bigDecimal72);
        int int74 = bigMatrixImpl21.getScale();
        java.math.BigDecimal[][] bigDecimalArray75 = bigMatrixImpl21.getDataRef();
        double[][] doubleArray76 = bigMatrixImpl21.getDataAsDoubleArray();
        java.lang.String str77 = bigMatrixImpl21.toString();
        java.math.BigDecimal bigDecimal78 = bigMatrixImpl21.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = bigMatrixImpl21.transpose();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl71);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigMatrix73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 64 + "'", int74 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str77, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(bigDecimal78);
        org.junit.Assert.assertNotNull(bigMatrix79);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl5.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl5.scalarAdd((double) 97);
        boolean boolean22 = realMatrixImpl5.isSingular();
        double[][] doubleArray23 = realMatrixImpl5.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray23, true);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray23);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[] bigDecimalArray23 = bigMatrixImpl20.getRow((int) (short) 0);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray23);
        boolean boolean25 = bigMatrixImpl24.isSingular();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl6.add(realMatrix23);
        int int25 = realMatrixImpl6.getRowDimension();
        double[][] doubleArray26 = realMatrixImpl6.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray26);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(doubleArray26);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl6.add(realMatrix23);
        double[] doubleArray26 = realMatrixImpl6.getRow((int) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrixImpl6.scalarMultiply((double) 35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = realMatrixImpl38.add(realMatrixImpl41);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrixImpl41.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl45);
        boolean boolean47 = realMatrixImpl34.equals((java.lang.Object) realMatrixImpl45);
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[][] doubleArray66 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        boolean boolean69 = bigMatrixImpl68.isSquare();
        java.math.BigDecimal[][] bigDecimalArray70 = bigMatrixImpl68.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl73.add(realMatrixImpl76);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = realMatrixImpl80.add(realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl85 = realMatrixImpl73.add(realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrix realMatrix87 = realMatrixImpl83.scalarMultiply(1.0d);
        int int88 = realMatrixImpl83.getColumnDimension();
        boolean boolean89 = bigMatrixImpl68.equals((java.lang.Object) realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl90 = realMatrixImpl45.subtract(realMatrixImpl83);
        double[] doubleArray92 = realMatrixImpl45.getRow((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray93 = realMatrixImpl6.solve(doubleArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrixImpl42);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertNotNull(realMatrixImpl84);
        org.junit.Assert.assertNotNull(realMatrixImpl85);
        org.junit.Assert.assertNotNull(realMatrix87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 35 + "'", int88 == 35);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl90);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) (short) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.getColumnMatrix(4);
        org.junit.Assert.assertNotNull(realMatrix4);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl40.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = realMatrixImpl47.add(realMatrixImpl50);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl40.add(realMatrixImpl50);
        org.apache.commons.math.linear.RealMatrix realMatrix53 = realMatrixImpl40.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrixImpl34.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl57.add(realMatrixImpl60);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl64.add(realMatrixImpl67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix72 = realMatrixImpl67.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl71);
        boolean boolean73 = realMatrixImpl67.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl79 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix80 = realMatrixImpl76.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl79);
        int int81 = realMatrixImpl79.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl82 = realMatrixImpl67.subtract(realMatrixImpl79);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = realMatrixImpl60.subtract(realMatrixImpl82);
        double[] doubleArray85 = realMatrixImpl60.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl88 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl91 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl92 = realMatrixImpl88.add(realMatrixImpl91);
        org.apache.commons.math.linear.RealMatrix realMatrix93 = realMatrixImpl60.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl92);
        org.apache.commons.math.linear.RealMatrix realMatrix94 = realMatrixImpl40.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl60);
        org.apache.commons.math.linear.RealMatrix realMatrix95 = realMatrixImpl2.subtract(realMatrix94);
        org.apache.commons.math.linear.RealMatrix realMatrix96 = realMatrixImpl2.copy();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrixImpl51);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
        org.junit.Assert.assertNotNull(realMatrix72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(realMatrix80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl82);
        org.junit.Assert.assertNotNull(realMatrixImpl83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl92);
        org.junit.Assert.assertNotNull(realMatrix93);
        org.junit.Assert.assertNotNull(realMatrix94);
        org.junit.Assert.assertNotNull(realMatrix95);
        org.junit.Assert.assertNotNull(realMatrix96);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray27, false);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl19.getNorm();
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl22.copy();
        java.math.BigDecimal bigDecimal24 = bigMatrixImpl22.getTrace();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl22.getColumnMatrix(0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigMatrix26);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl21.subtract(bigMatrixImpl43);
        boolean boolean45 = bigMatrixImpl44.isSingular();
        bigMatrixImpl44.setRoundingMode((int) '4');
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[][] doubleArray66 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        int int70 = bigMatrixImpl69.getScale();
        boolean boolean71 = bigMatrixImpl69.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl44.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 64 + "'", int70 == 64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl45.getEntry(0, (int) (short) 0);
        boolean boolean49 = bigMatrixImpl45.isSingular();
        boolean boolean50 = bigMatrixImpl45.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl45);
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[][] doubleArray70 = new double[][] { doubleArray54, doubleArray57, doubleArray60, doubleArray63, doubleArray66, doubleArray69 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        java.math.BigDecimal[][] bigDecimalArray74 = bigMatrixImpl73.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl73.getColumnMatrix((int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix78 = bigMatrixImpl73.getRowMatrix(4);
        org.apache.commons.math.linear.BigMatrix bigMatrix80 = bigMatrixImpl73.getRowMatrix((int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix81 = bigMatrixImpl45.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl73);
        java.math.BigDecimal[] bigDecimalArray83 = bigMatrixImpl45.getColumn(0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(bigDecimalArray74);
        org.junit.Assert.assertNotNull(bigMatrix76);
        org.junit.Assert.assertNotNull(bigMatrix78);
        org.junit.Assert.assertNotNull(bigMatrix80);
        org.junit.Assert.assertNotNull(bigMatrix81);
        org.junit.Assert.assertNotNull(bigDecimalArray83);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrixImpl28.getColumnMatrix(0);
        double[][] doubleArray31 = realMatrixImpl28.getData();
        double double32 = realMatrixImpl28.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl28.copy();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl36.add(realMatrixImpl39);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = realMatrixImpl43.add(realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl43.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrix realMatrix57 = realMatrixImpl43.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl40.add(realMatrix57);
        double[] doubleArray60 = realMatrixImpl40.getRow((int) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray60);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray63 = realMatrixImpl28.solve(doubleArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrixImpl47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        boolean boolean71 = bigMatrixImpl67.isSingular();
        java.math.BigDecimal[][] bigDecimalArray72 = bigMatrixImpl67.getData();
        int int73 = bigMatrixImpl67.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            double double76 = bigMatrixImpl67.getEntryAsDouble((int) (short) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 6 + "'", int73 == 6);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, false);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl22.scalarAdd((double) (byte) 10);
        double[][] doubleArray25 = realMatrixImpl22.getDataRef();
        double[] doubleArray27 = realMatrixImpl22.getColumn(0);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = realMatrixImpl22.scalarAdd((double) (-1L));
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl32.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl39.add(realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl32.add(realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrixImpl32.getColumnMatrix((int) ' ');
        double[][] doubleArray47 = realMatrixImpl32.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl57.add(realMatrixImpl60);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = realMatrixImpl50.add(realMatrixImpl60);
        org.apache.commons.math.linear.RealMatrix realMatrix64 = realMatrixImpl50.scalarAdd((double) (byte) 1);
        double[] doubleArray66 = realMatrixImpl50.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray66);
        double[] doubleArray70 = realMatrixImpl32.preMultiply(doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray71 = realMatrixImpl22.operate(doubleArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(realMatrixImpl62);
        org.junit.Assert.assertNotNull(realMatrix64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        int int10 = realMatrixImpl5.getRowDimension();
        double[][] doubleArray11 = realMatrixImpl5.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrixImpl5.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = realMatrixImpl5.getEntry(35, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray27, true);
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[] doubleArray47 = new double[] { 1, (byte) 10 };
        double[][] doubleArray48 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44, doubleArray47 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray48);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray48);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray48);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray48);
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[][] doubleArray71 = new double[][] { doubleArray55, doubleArray58, doubleArray61, doubleArray64, doubleArray67, doubleArray70 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray71);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray71);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl74 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray71);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl75 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray71);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl75.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix77 = bigMatrixImpl52.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl75);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl78 = bigMatrixImpl29.subtract(bigMatrixImpl75);
        java.math.BigDecimal[][] bigDecimalArray79 = bigMatrixImpl78.getDataRef();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(bigMatrix76);
        org.junit.Assert.assertNotNull(bigMatrix77);
        org.junit.Assert.assertNotNull(bigMatrixImpl78);
        org.junit.Assert.assertNotNull(bigDecimalArray79);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        boolean boolean3 = realMatrixImpl2.isSquare();
        int[] intArray5 = new int[] { 10 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        int int9 = bigMatrixImpl8.getColumnDimension();
        int int10 = bigMatrixImpl8.getScale();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = realMatrixImpl13.add(realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl20.add(realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl27);
        boolean boolean29 = realMatrixImpl23.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl32.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl35);
        int int37 = realMatrixImpl35.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl23.subtract(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl16.subtract(realMatrixImpl38);
        boolean boolean40 = realMatrixImpl39.isSingular();
        int[] intArray42 = new int[] { 4 };
        int[] intArray44 = new int[] { (byte) 0 };
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl39.getSubMatrix(intArray42, intArray44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl48.add(realMatrixImpl51);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl55.add(realMatrixImpl58);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrixImpl58.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl62);
        boolean boolean64 = realMatrixImpl58.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrixImpl67.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl70);
        int int72 = realMatrixImpl70.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = realMatrixImpl58.subtract(realMatrixImpl70);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = realMatrixImpl51.subtract(realMatrixImpl73);
        boolean boolean75 = realMatrixImpl74.isSingular();
        int[] intArray77 = new int[] { 4 };
        int[] intArray79 = new int[] { (byte) 0 };
        org.apache.commons.math.linear.RealMatrix realMatrix80 = realMatrixImpl74.getSubMatrix(intArray77, intArray79);
        org.apache.commons.math.linear.BigMatrix bigMatrix81 = bigMatrixImpl8.getSubMatrix(intArray44, intArray79);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix82 = realMatrixImpl2.getSubMatrix(intArray5, intArray44);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 64 + "'", int10 == 64);
        org.junit.Assert.assertNotNull(realMatrixImpl17);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrixImpl39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[4]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0]");
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(realMatrixImpl59);
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl73);
        org.junit.Assert.assertNotNull(realMatrixImpl74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[4]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0]");
        org.junit.Assert.assertNotNull(realMatrix80);
        org.junit.Assert.assertNotNull(bigMatrix81);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        double[][] doubleArray29 = bigMatrixImpl27.getDataAsDoubleArray();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.getRowMatrix(52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int20 = bigMatrixImpl19.getRoundingMode();
        boolean boolean21 = bigMatrixImpl19.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrixImpl19.transpose();
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl19.getDataRef();
        double[] doubleArray25 = bigMatrixImpl19.getRowAsDoubleArray((int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigMatrix22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[][] doubleArray62 = new double[][] { doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = bigMatrixImpl42.subtract(bigMatrixImpl64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = bigMatrixImpl20.add(bigMatrixImpl65);
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[] doubleArray72 = new double[] { 1, (byte) 10 };
        double[] doubleArray75 = new double[] { 1, (byte) 10 };
        double[] doubleArray78 = new double[] { 1, (byte) 10 };
        double[] doubleArray81 = new double[] { 1, (byte) 10 };
        double[] doubleArray84 = new double[] { 1, (byte) 10 };
        double[][] doubleArray85 = new double[][] { doubleArray69, doubleArray72, doubleArray75, doubleArray78, doubleArray81, doubleArray84 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl86 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray85);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl87 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray85);
        java.math.BigDecimal bigDecimal90 = bigMatrixImpl87.getEntry(0, (int) (short) 0);
        boolean boolean91 = bigMatrixImpl87.isSingular();
        java.math.BigDecimal[][] bigDecimalArray92 = bigMatrixImpl87.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl93 = bigMatrixImpl66.subtract(bigMatrixImpl87);
        int int94 = bigMatrixImpl93.getScale();
        int int95 = bigMatrixImpl93.getColumnDimension();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(bigMatrixImpl65);
        org.junit.Assert.assertNotNull(bigMatrixImpl66);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(bigDecimal90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray92);
        org.junit.Assert.assertNotNull(bigMatrixImpl93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 64 + "'", int94 == 64);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = bigMatrixImpl12.transpose();
        double[] doubleArray16 = new double[] { 1, (byte) 10 };
        double[] doubleArray19 = new double[] { 1, (byte) 10 };
        double[] doubleArray22 = new double[] { 1, (byte) 10 };
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[][] doubleArray32 = new double[][] { doubleArray16, doubleArray19, doubleArray22, doubleArray25, doubleArray28, doubleArray31 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray32);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray32);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray32);
        java.math.BigDecimal[][] bigDecimalArray36 = bigMatrixImpl35.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl35.getColumnMatrix((int) (short) 1);
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[] doubleArray47 = new double[] { 1, (byte) 10 };
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[][] doubleArray57 = new double[][] { doubleArray41, doubleArray44, doubleArray47, doubleArray50, doubleArray53, doubleArray56 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray57);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl59 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray57);
        java.math.BigDecimal bigDecimal62 = bigMatrixImpl59.getEntry(0, (int) (short) 0);
        boolean boolean63 = bigMatrixImpl59.isSingular();
        boolean boolean64 = bigMatrixImpl59.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = bigMatrixImpl35.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl59);
        double[] doubleArray68 = new double[] { 1, (byte) 10 };
        double[] doubleArray71 = new double[] { 1, (byte) 10 };
        double[] doubleArray74 = new double[] { 1, (byte) 10 };
        double[] doubleArray77 = new double[] { 1, (byte) 10 };
        double[] doubleArray80 = new double[] { 1, (byte) 10 };
        double[] doubleArray83 = new double[] { 1, (byte) 10 };
        double[][] doubleArray84 = new double[][] { doubleArray68, doubleArray71, doubleArray74, doubleArray77, doubleArray80, doubleArray83 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl85 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray84);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl86 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray84);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl87 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray84);
        java.math.BigDecimal[][] bigDecimalArray88 = bigMatrixImpl87.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix90 = bigMatrixImpl87.getColumnMatrix((int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix92 = bigMatrixImpl87.getRowMatrix(4);
        org.apache.commons.math.linear.BigMatrix bigMatrix94 = bigMatrixImpl87.getRowMatrix((int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix95 = bigMatrixImpl59.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl87);
        bigMatrixImpl87.setRoundingMode(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix98 = bigMatrixImpl12.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(bigMatrix65);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(bigDecimalArray88);
        org.junit.Assert.assertNotNull(bigMatrix90);
        org.junit.Assert.assertNotNull(bigMatrix92);
        org.junit.Assert.assertNotNull(bigMatrix94);
        org.junit.Assert.assertNotNull(bigMatrix95);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        double[][] doubleArray71 = bigMatrixImpl67.getDataAsDoubleArray();
        java.math.BigDecimal[][] bigDecimalArray72 = bigMatrixImpl67.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray72);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        double[][] doubleArray14 = realMatrixImpl12.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl17.add(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrixImpl27.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl31);
        boolean boolean33 = realMatrixImpl27.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl36.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl39);
        int int41 = realMatrixImpl39.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = realMatrixImpl27.subtract(realMatrixImpl39);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl20.subtract(realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl12.subtract(realMatrixImpl20);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl5.multiply(realMatrixImpl20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl42);
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl20.getData();
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double27 = bigMatrixImpl20.getEntryAsDouble((int) (byte) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        boolean boolean3 = realMatrixImpl2.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrixImpl2.scalarMultiply((double) 1L);
        double double8 = realMatrixImpl2.getEntry(2, 0);
        boolean boolean9 = realMatrixImpl2.isSquare();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((-1), 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl42.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl42.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl59.add(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl42.add(realMatrix67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl38.subtract(realMatrixImpl42);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix74 = realMatrixImpl38.getSubMatrix((-1), (int) (byte) 0, 100, 6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        java.math.BigDecimal[][] bigDecimalArray46 = bigMatrixImpl42.getData();
        double double49 = bigMatrixImpl42.getEntryAsDouble(1, (int) (byte) 0);
        int int50 = bigMatrixImpl42.getColumnDimension();
        bigMatrixImpl42.setScale(2);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.copy();
        double[][] doubleArray18 = realMatrixImpl2.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, false);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        boolean boolean40 = realMatrixImpl34.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        int int48 = realMatrixImpl46.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl34.subtract(realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl27.subtract(realMatrixImpl49);
        boolean boolean51 = realMatrixImpl50.isSquare();
        double[][] doubleArray52 = realMatrixImpl50.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray52, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray52, true);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl21.add(realMatrixImpl57);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrixImpl21.getColumnMatrix((int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl49);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrixImpl5.getColumnMatrix((int) (byte) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrixImpl5.scalarMultiply((double) 'a');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl16.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrixImpl16.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl33.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrixImpl36.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl40);
        boolean boolean42 = realMatrixImpl36.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix49 = realMatrixImpl45.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl48);
        int int50 = realMatrixImpl48.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = realMatrixImpl36.subtract(realMatrixImpl48);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl16.add(realMatrixImpl48);
        double[][] doubleArray53 = realMatrixImpl52.getData();
        int int54 = realMatrixImpl52.getColumnDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl5.add(realMatrixImpl52);
        double double56 = realMatrixImpl55.getNorm();
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl51);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        bigMatrixImpl21.setScale(6);
        java.lang.String str27 = bigMatrixImpl21.toString();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str27, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        int int23 = realMatrixImpl22.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl22.scalarMultiply((double) (byte) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrixImpl22.transpose();
        double[][] doubleArray27 = realMatrixImpl22.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray27, false);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(doubleArray27);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        double[][] doubleArray17 = realMatrixImpl2.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray17, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl33.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrixImpl42.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl45);
        int int47 = realMatrixImpl45.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl33.subtract(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl26.subtract(realMatrixImpl48);
        double[] doubleArray51 = realMatrixImpl26.getRow(0);
        java.math.BigDecimal[] bigDecimalArray52 = bigMatrixImpl20.operate(doubleArray51);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray52);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray52);
        int int55 = bigMatrixImpl54.getRowDimension();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
        org.junit.Assert.assertNotNull(realMatrixImpl49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        double double25 = realMatrixImpl24.getNorm();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 60.0d + "'", double25 == 60.0d);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        int int23 = bigMatrixImpl21.getScale();
        int int24 = bigMatrixImpl21.getColumnDimension();
        bigMatrixImpl21.setScale((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl21.getRowMatrix(52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) (byte) 1);
        double[] doubleArray25 = realMatrixImpl9.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray25);
        double[] doubleArray27 = realMatrixImpl5.preMultiply(doubleArray25);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl30.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl37.add(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl40.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl44);
        boolean boolean46 = realMatrixImpl33.equals((java.lang.Object) realMatrixImpl44);
        boolean boolean48 = realMatrixImpl33.equals((java.lang.Object) 0.0d);
        boolean boolean49 = realMatrixImpl33.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        double[][] doubleArray51 = realMatrixImpl5.getDataRef();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(doubleArray51);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(6, 2);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl21.getRowMatrix(4);
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[][] doubleArray66 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        int int70 = bigMatrixImpl69.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = bigMatrixImpl47.add(bigMatrixImpl69);
        java.math.BigDecimal bigDecimal72 = bigMatrixImpl69.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl21.scalarAdd(bigDecimal72);
        double[][] doubleArray74 = bigMatrixImpl21.getDataAsDoubleArray();
        bigMatrixImpl21.setRoundingMode((int) (short) -1);
        boolean boolean77 = bigMatrixImpl21.isSquare();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl71);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigMatrix73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) (byte) 10);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        int int23 = bigMatrixImpl20.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl20.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        int int46 = bigMatrixImpl20.getRowDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl20.copy();
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl20.getNorm();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertNotNull(bigDecimal48);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        double[] doubleArray30 = realMatrixImpl5.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl33.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        double double39 = realMatrixImpl37.getNorm();
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[] doubleArray45 = new double[] { 1, (byte) 10 };
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[][] doubleArray58 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54, doubleArray57 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl59 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray58);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray58);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl61 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray58);
        int int62 = bigMatrixImpl61.getRoundingMode();
        int int63 = bigMatrixImpl61.getScale();
        int int64 = bigMatrixImpl61.getScale();
        java.math.BigDecimal[][] bigDecimalArray65 = bigMatrixImpl61.getDataRef();
        bigMatrixImpl61.setRoundingMode((int) ' ');
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[][] doubleArray86 = new double[][] { doubleArray70, doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl87 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl88 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl89 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        int int90 = bigMatrixImpl89.getScale();
        int int91 = bigMatrixImpl89.getRowDimension();
        java.math.BigDecimal[] bigDecimalArray93 = bigMatrixImpl89.getRow(2);
        org.apache.commons.math.linear.BigMatrix bigMatrix94 = bigMatrixImpl61.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl89);
        double[][] doubleArray95 = bigMatrixImpl61.getDataAsDoubleArray();
        boolean boolean96 = realMatrixImpl37.equals((java.lang.Object) bigMatrixImpl61);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 64 + "'", int63 == 64);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 64 + "'", int64 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray65);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 64 + "'", int90 == 64);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 6 + "'", int91 == 6);
        org.junit.Assert.assertNotNull(bigDecimalArray93);
        org.junit.Assert.assertNotNull(bigMatrix94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        boolean boolean25 = bigMatrixImpl24.isSingular();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 1, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = bigMatrixImpl24.multiply(bigMatrixImpl28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getRowDimension();
        double[][] doubleArray22 = bigMatrixImpl20.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray22, false);
        int int25 = realMatrixImpl24.getRowDimension();
        boolean boolean26 = realMatrixImpl24.isSingular();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl12.transpose();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        int int23 = bigMatrixImpl21.getScale();
        int int24 = bigMatrixImpl21.getScale();
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl21.getDataRef();
        bigMatrixImpl21.setRoundingMode((int) ' ');
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[] doubleArray45 = new double[] { 1, (byte) 10 };
        double[][] doubleArray46 = new double[][] { doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42, doubleArray45 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        int int50 = bigMatrixImpl49.getScale();
        int int51 = bigMatrixImpl49.getRowDimension();
        java.math.BigDecimal[] bigDecimalArray53 = bigMatrixImpl49.getRow(2);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
        double[][] doubleArray55 = bigMatrixImpl21.getDataAsDoubleArray();
        int int56 = bigMatrixImpl21.getRowDimension();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 64 + "'", int24 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 64 + "'", int50 == 64);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        boolean boolean41 = realMatrixImpl28.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl28.getRowMatrix(2);
        double[][] doubleArray44 = realMatrixImpl28.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = realMatrixImpl47.add(realMatrixImpl50);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl54.add(realMatrixImpl57);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = realMatrixImpl61.add(realMatrixImpl64);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = realMatrixImpl54.add(realMatrixImpl64);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl54.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix69 = realMatrixImpl51.add(realMatrix68);
        double[] doubleArray71 = realMatrixImpl51.getRow((int) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix73 = realMatrixImpl51.scalarMultiply((double) 35);
        org.apache.commons.math.linear.RealMatrix realMatrix74 = realMatrixImpl28.subtract(realMatrix73);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realMatrixImpl51);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrixImpl65);
        org.junit.Assert.assertNotNull(realMatrixImpl66);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrix69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertNotNull(realMatrix74);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        int int25 = bigMatrixImpl21.getRowDimension();
        java.lang.String str26 = bigMatrixImpl21.toString();
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        java.math.BigDecimal bigDecimal47 = bigMatrixImpl46.getNorm();
        java.math.BigDecimal[] bigDecimalArray48 = new java.math.BigDecimal[] { bigDecimal47 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl49.copy();
        java.math.BigDecimal bigDecimal51 = bigMatrixImpl49.getNorm();
        boolean boolean52 = bigMatrixImpl49.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = bigMatrixImpl21.multiply(bigMatrixImpl49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str26, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl26.equals((java.lang.Object) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl5.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl53.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        boolean boolean59 = realMatrixImpl46.equals((java.lang.Object) realMatrixImpl57);
        boolean boolean60 = realMatrixImpl46.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl37.add(realMatrixImpl46);
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[][] doubleArray80 = new double[][] { doubleArray64, doubleArray67, doubleArray70, doubleArray73, doubleArray76, doubleArray79 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray80);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl82 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray80);
        boolean boolean83 = realMatrixImpl61.equals((java.lang.Object) bigMatrixImpl82);
        double[][] doubleArray84 = realMatrixImpl61.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl85 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray84);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl88 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl91 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl92 = realMatrixImpl88.add(realMatrixImpl91);
        double[] doubleArray94 = realMatrixImpl91.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl95 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray94);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl96 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray94);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl97 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray94);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray98 = bigMatrixImpl85.solve(doubleArray94);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(realMatrixImpl92);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl23.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl23.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl17.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl23);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray39 = realMatrixImpl23.getRow(52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        double[][] doubleArray21 = realMatrixImpl17.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray21);
        double double24 = realMatrixImpl23.getNorm();
        int int25 = realMatrixImpl23.getColumnDimension();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl26.equals((java.lang.Object) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl5.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl53.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        boolean boolean59 = realMatrixImpl46.equals((java.lang.Object) realMatrixImpl57);
        boolean boolean60 = realMatrixImpl46.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl37.add(realMatrixImpl46);
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[][] doubleArray80 = new double[][] { doubleArray64, doubleArray67, doubleArray70, doubleArray73, doubleArray76, doubleArray79 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray80);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl82 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray80);
        boolean boolean83 = realMatrixImpl61.equals((java.lang.Object) bigMatrixImpl82);
        java.math.BigDecimal[][] bigDecimalArray84 = bigMatrixImpl82.getData();
        java.math.BigDecimal[][] bigDecimalArray85 = bigMatrixImpl82.getData();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray84);
        org.junit.Assert.assertNotNull(bigDecimalArray85);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl(97, (int) (byte) 1);
        java.lang.String str3 = realMatrixImpl2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}" + "'", str3, "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}");
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getScale();
        int int23 = bigMatrixImpl21.getRowDimension();
        java.math.BigDecimal[] bigDecimalArray25 = bigMatrixImpl21.getRow(2);
        bigMatrixImpl21.setRoundingMode(0);
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[] doubleArray45 = new double[] { 1, (byte) 10 };
        double[][] doubleArray46 = new double[][] { doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42, doubleArray45 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        java.math.BigDecimal bigDecimal51 = bigMatrixImpl48.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray52 = bigMatrixImpl48.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray52, false);
        double[][] doubleArray55 = bigMatrixImpl54.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = bigMatrixImpl54.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = bigMatrixImpl21.preMultiply(bigMatrix56);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 64 + "'", int22 == 64);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(bigMatrix56);
        org.junit.Assert.assertNotNull(bigMatrix57);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        boolean boolean25 = bigMatrixImpl24.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl24.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl24.transpose();
        java.math.BigDecimal bigDecimal28 = bigMatrixImpl24.getNorm();
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        int int51 = bigMatrixImpl50.getColumnDimension();
        int int52 = bigMatrixImpl50.getScale();
        bigMatrixImpl50.setRoundingMode((int) '#');
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[] doubleArray72 = new double[] { 1, (byte) 10 };
        double[][] doubleArray73 = new double[][] { doubleArray57, doubleArray60, doubleArray63, doubleArray66, doubleArray69, doubleArray72 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl74 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray73);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl75 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray73);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl76 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray73);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl77 = bigMatrixImpl50.add(bigMatrixImpl76);
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = bigMatrixImpl50.getRowMatrix((int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix81 = bigMatrixImpl50.getRowMatrix(4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix82 = bigMatrixImpl24.add(bigMatrix81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigMatrix27);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 64 + "'", int52 == 64);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(bigMatrixImpl77);
        org.junit.Assert.assertNotNull(bigMatrix79);
        org.junit.Assert.assertNotNull(bigMatrix81);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getRowDimension();
        double[] doubleArray23 = bigMatrixImpl20.getColumnAsDoubleArray(1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray23);
        double double25 = realMatrixImpl24.getNorm();
        int int26 = realMatrixImpl24.getRowDimension();
        boolean boolean27 = realMatrixImpl24.isSquare();
        boolean boolean28 = realMatrixImpl24.isSingular();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 60.0d + "'", double25 == 60.0d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        double double9 = realMatrixImpl2.getEntry(1, (int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = realMatrixImpl12.add(realMatrixImpl15);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl12.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl12.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl12.scalarMultiply((double) (short) -1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl37.add(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = realMatrixImpl30.add(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrixImpl30.getColumnMatrix((int) ' ');
        double[][] doubleArray45 = realMatrixImpl30.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray45, false);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl12.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl47);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl2.subtract(realMatrixImpl47);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrixImpl16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrixImpl42);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(realMatrixImpl49);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        boolean boolean7 = realMatrixImpl6.isSquare();
        int int8 = realMatrixImpl6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = realMatrixImpl6.transpose();
        double[][] doubleArray10 = realMatrixImpl6.getDataRef();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrixImpl6.multiply(realMatrix11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl42.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl42.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl59.add(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl42.add(realMatrix67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl38.subtract(realMatrixImpl42);
        double[] doubleArray71 = realMatrixImpl42.getColumn((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix78 = realMatrixImpl74.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl77);
        org.apache.commons.math.linear.RealMatrix realMatrix79 = realMatrixImpl42.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl74);
        java.lang.Object obj80 = null;
        boolean boolean81 = realMatrixImpl42.equals(obj80);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix78);
        org.junit.Assert.assertNotNull(realMatrix79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl45.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl20.scalarMultiply(bigDecimal48);
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[][] doubleArray68 = new double[][] { doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64, doubleArray67 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        int int72 = bigMatrixImpl71.getColumnDimension();
        int int73 = bigMatrixImpl71.getScale();
        java.math.BigDecimal[] bigDecimalArray75 = bigMatrixImpl71.getColumn((int) (byte) 0);
        java.math.BigDecimal[] bigDecimalArray76 = bigMatrixImpl20.preMultiply(bigDecimalArray75);
        int int77 = bigMatrixImpl20.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix79 = bigMatrixImpl20.getRowMatrix((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigMatrix49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 64 + "'", int73 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray75);
        org.junit.Assert.assertNotNull(bigDecimalArray76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4 + "'", int77 == 4);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl20.getData();
        int int24 = bigMatrixImpl20.getRoundingMode();
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        boolean boolean46 = bigMatrixImpl45.isSquare();
        java.math.BigDecimal[][] bigDecimalArray47 = bigMatrixImpl45.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray47);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = bigMatrixImpl20.add(bigMatrixImpl48);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertNotNull(bigMatrixImpl49);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        java.math.BigDecimal[][] bigDecimalArray45 = bigMatrixImpl44.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45, true);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl49.copy();
        int int52 = bigMatrixImpl49.getRowDimension();
        int int53 = bigMatrixImpl49.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl49.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        bigMatrixImpl12.setScale((int) '4');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl28.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl35);
        boolean boolean37 = realMatrixImpl31.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrixImpl40.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl43);
        int int45 = realMatrixImpl43.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl31.subtract(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = realMatrixImpl24.subtract(realMatrixImpl46);
        boolean boolean48 = bigMatrixImpl12.equals((java.lang.Object) realMatrixImpl46);
        java.math.BigDecimal[][] bigDecimalArray49 = bigMatrixImpl12.getData();
        int int50 = bigMatrixImpl12.getRoundingMode();
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) 'a', (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix7 = realMatrixImpl2.getSubMatrix((int) (short) -1, (int) (byte) 0, 97, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        double[][] doubleArray40 = realMatrixImpl38.getData();
        boolean boolean41 = realMatrixImpl38.isSingular();
        double[][] doubleArray42 = realMatrixImpl38.getData();
        double[][] doubleArray43 = realMatrixImpl38.getData();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        java.math.BigDecimal[][] bigDecimalArray46 = bigMatrixImpl42.getData();
        java.math.BigDecimal bigDecimal47 = bigMatrixImpl42.getNorm();
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[][] doubleArray66 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        double[] doubleArray71 = new double[] { 1, (byte) 10 };
        double[] doubleArray74 = new double[] { 1, (byte) 10 };
        double[] doubleArray77 = new double[] { 1, (byte) 10 };
        double[] doubleArray80 = new double[] { 1, (byte) 10 };
        double[] doubleArray83 = new double[] { 1, (byte) 10 };
        double[] doubleArray86 = new double[] { 1, (byte) 10 };
        double[][] doubleArray87 = new double[][] { doubleArray71, doubleArray74, doubleArray77, doubleArray80, doubleArray83, doubleArray86 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl88 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray87);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl89 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray87);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl90 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray87);
        int int91 = bigMatrixImpl90.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl92 = bigMatrixImpl68.add(bigMatrixImpl90);
        java.math.BigDecimal bigDecimal93 = bigMatrixImpl90.getNorm();
        java.math.BigDecimal bigDecimal94 = bigMatrixImpl90.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix95 = bigMatrixImpl42.scalarAdd(bigDecimal94);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix97 = bigMatrixImpl42.getRowMatrix(52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl92);
        org.junit.Assert.assertNotNull(bigDecimal93);
        org.junit.Assert.assertNotNull(bigDecimal94);
        org.junit.Assert.assertNotNull(bigMatrix95);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl45.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl20.scalarMultiply(bigDecimal48);
        java.math.BigDecimal[] bigDecimalArray51 = bigMatrixImpl20.getRow(2);
        java.lang.String str52 = bigMatrixImpl20.toString();
        java.math.BigDecimal[][] bigDecimalArray53 = bigMatrixImpl20.getData();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl20.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigMatrix49);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str52, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(bigDecimalArray53);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        double[] doubleArray18 = realMatrixImpl12.getRow((int) (short) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrixImpl20.scalarAdd((double) 97);
        int int23 = realMatrixImpl20.getRowDimension();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[][] doubleArray62 = new double[][] { doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = bigMatrixImpl42.subtract(bigMatrixImpl64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = bigMatrixImpl20.add(bigMatrixImpl65);
        java.math.BigDecimal[][] bigDecimalArray67 = bigMatrixImpl65.getDataRef();
        boolean boolean68 = bigMatrixImpl65.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = bigMatrixImpl65.getColumnMatrix(0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(bigMatrixImpl65);
        org.junit.Assert.assertNotNull(bigMatrixImpl66);
        org.junit.Assert.assertNotNull(bigDecimalArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(bigMatrix70);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getRoundingMode();
        java.math.BigDecimal[][] bigDecimalArray14 = bigMatrixImpl12.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray15 = bigMatrixImpl12.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = realMatrixImpl18.add(realMatrixImpl21);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl25.add(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl32.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl25.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl25.scalarAdd((double) (byte) 1);
        double[] doubleArray41 = realMatrixImpl25.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray41);
        double[] doubleArray43 = realMatrixImpl21.preMultiply(doubleArray41);
        boolean boolean44 = bigMatrixImpl12.equals((java.lang.Object) doubleArray43);
        java.lang.String str45 = bigMatrixImpl12.toString();
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertNotNull(realMatrixImpl22);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{null},{null},{null},{null},{null}}" + "'", str45, "BigMatrixImpl{{null},{null},{null},{null},{null}}");
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl19.getNorm();
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl22.copy();
        java.math.BigDecimal bigDecimal24 = bigMatrixImpl22.getNorm();
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        boolean boolean46 = bigMatrixImpl45.isSquare();
        java.math.BigDecimal[][] bigDecimalArray47 = bigMatrixImpl45.getDataRef();
        java.math.BigDecimal bigDecimal50 = bigMatrixImpl45.getEntry(1, (int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl22.scalarAdd(bigDecimal50);
        int int52 = bigMatrixImpl22.getScale();
        // The following exception was thrown during execution in test generation
        try {
            double double55 = bigMatrixImpl22.getEntryAsDouble(10, 64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 64 + "'", int52 == 64);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        int int10 = realMatrixImpl5.getRowDimension();
        double[][] doubleArray11 = realMatrixImpl5.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray11, false);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray11);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(doubleArray11);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        java.math.BigDecimal[][] bigDecimalArray45 = bigMatrixImpl44.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45, true);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl49.copy();
        java.math.BigDecimal[][] bigDecimalArray52 = bigMatrixImpl49.getDataRef();
        bigMatrixImpl49.setScale((int) (byte) 10);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrixImpl49.copy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigMatrix55);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl42.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl42.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl59.add(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl42.add(realMatrix67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl38.subtract(realMatrixImpl42);
        double[] doubleArray71 = realMatrixImpl69.getRow(4);
        org.apache.commons.math.linear.RealMatrix realMatrix73 = realMatrixImpl69.scalarAdd(10.0d);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix73);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean46 = bigMatrixImpl20.equals((java.lang.Object) (-1));
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[][] doubleArray65 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[][] doubleArray86 = new double[][] { doubleArray70, doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl87 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl88 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl89 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        int int90 = bigMatrixImpl89.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl91 = bigMatrixImpl67.add(bigMatrixImpl89);
        java.math.BigDecimal bigDecimal92 = bigMatrixImpl89.getNorm();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl93 = bigMatrixImpl20.subtract(bigMatrixImpl89);
        bigMatrixImpl93.setScale(1);
        int int96 = bigMatrixImpl93.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal97 = bigMatrixImpl93.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl91);
        org.junit.Assert.assertNotNull(bigDecimal92);
        org.junit.Assert.assertNotNull(bigMatrixImpl93);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[][] doubleArray7 = realMatrixImpl5.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray7);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray7, false);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray7);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean46 = bigMatrixImpl20.equals((java.lang.Object) (-1));
        java.math.BigDecimal[][] bigDecimalArray47 = bigMatrixImpl20.getDataRef();
        boolean boolean48 = bigMatrixImpl20.isSquare();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, false);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl22.scalarAdd((double) (byte) 10);
        double[][] doubleArray25 = realMatrixImpl22.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray25);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray25);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray25);
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl28.getData();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        java.math.BigDecimal[][] bigDecimalArray46 = bigMatrixImpl42.getData();
        double double49 = bigMatrixImpl42.getEntryAsDouble(1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = bigMatrixImpl42.getEntryAsDouble(52, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(35, (int) ' ');
        boolean boolean3 = bigMatrixImpl2.isSquare();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 100, (int) (byte) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix3 = realMatrixImpl2.transpose();
        org.junit.Assert.assertNotNull(realMatrix3);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        double[][] doubleArray71 = bigMatrixImpl67.getDataAsDoubleArray();
        int int72 = bigMatrixImpl67.getScale();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 64 + "'", int72 == 64);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        boolean boolean17 = realMatrixImpl12.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl12.copy();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix29 = realMatrixImpl24.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl28);
        boolean boolean30 = realMatrixImpl24.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl33.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl40.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl47);
        boolean boolean49 = realMatrixImpl43.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl52.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl55);
        int int57 = realMatrixImpl55.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl43.subtract(realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl36.subtract(realMatrixImpl58);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = realMatrixImpl62.add(realMatrixImpl65);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix70 = realMatrixImpl65.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl69);
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrixImpl59.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl65);
        double[][] doubleArray72 = realMatrixImpl65.getDataRef();
        org.apache.commons.math.linear.RealMatrix realMatrix73 = realMatrixImpl24.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl65);
        boolean boolean74 = realMatrixImpl12.equals((java.lang.Object) realMatrixImpl65);
        org.apache.commons.math.linear.RealMatrix realMatrix75 = realMatrixImpl65.copy();
        double[][] doubleArray76 = realMatrixImpl65.getData();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrixImpl59);
        org.junit.Assert.assertNotNull(realMatrixImpl66);
        org.junit.Assert.assertNotNull(realMatrix70);
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertNotNull(doubleArray76);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl5.copy();
        boolean boolean20 = realMatrixImpl5.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl5.transpose();
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl5.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl20.copy();
        java.math.BigDecimal[][] bigDecimalArray47 = bigMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl57.add(realMatrixImpl60);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = realMatrixImpl50.add(realMatrixImpl60);
        org.apache.commons.math.linear.RealMatrix realMatrix64 = realMatrixImpl60.scalarMultiply(1.0d);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = realMatrixImpl67.add(realMatrixImpl70);
        double[] doubleArray73 = realMatrixImpl70.getColumn((int) (byte) 0);
        boolean boolean75 = realMatrixImpl70.equals((java.lang.Object) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix77 = realMatrixImpl70.getRowMatrix(5);
        double[] doubleArray79 = realMatrixImpl70.getColumn(0);
        double[] doubleArray80 = realMatrixImpl60.preMultiply(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray81 = bigMatrixImpl20.solve(doubleArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(realMatrixImpl62);
        org.junit.Assert.assertNotNull(realMatrix64);
        org.junit.Assert.assertNotNull(realMatrixImpl71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(realMatrix77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        double[][] doubleArray21 = realMatrixImpl17.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray21, true);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray21, true);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl35.add(realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl38.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl42);
        boolean boolean44 = realMatrixImpl31.equals((java.lang.Object) realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl31.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl31.scalarAdd((double) 97);
        boolean boolean48 = realMatrixImpl25.equals((java.lang.Object) realMatrixImpl31);
        double[][] doubleArray49 = realMatrixImpl25.getData();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrixImpl39);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(doubleArray49);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) '4', (int) '4');
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[][] doubleArray21 = new double[][] { doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17, doubleArray20 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        java.math.BigDecimal bigDecimal26 = bigMatrixImpl23.getEntry(0, (int) (short) 0);
        boolean boolean27 = bigMatrixImpl23.isSingular();
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl23.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28, true);
        bigMatrixImpl2.setSubMatrix(bigDecimalArray28, (int) (short) 0, 0);
        int int35 = bigMatrixImpl2.getRoundingMode();
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[] doubleArray47 = new double[] { 1, (byte) 10 };
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[][] doubleArray54 = new double[][] { doubleArray38, doubleArray41, doubleArray44, doubleArray47, doubleArray50, doubleArray53 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray54);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl56 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray54);
        java.math.BigDecimal bigDecimal59 = bigMatrixImpl56.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray60 = bigMatrixImpl56.getData();
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[] doubleArray72 = new double[] { 1, (byte) 10 };
        double[] doubleArray75 = new double[] { 1, (byte) 10 };
        double[] doubleArray78 = new double[] { 1, (byte) 10 };
        double[][] doubleArray79 = new double[][] { doubleArray63, doubleArray66, doubleArray69, doubleArray72, doubleArray75, doubleArray78 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl80 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray79);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray79);
        java.math.BigDecimal bigDecimal84 = bigMatrixImpl81.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix85 = bigMatrixImpl56.scalarMultiply(bigDecimal84);
        java.math.BigDecimal[] bigDecimalArray87 = bigMatrixImpl56.getRow(2);
        java.lang.String str88 = bigMatrixImpl56.toString();
        java.math.BigDecimal[][] bigDecimalArray89 = bigMatrixImpl56.getDataRef();
        java.math.BigDecimal[] bigDecimalArray91 = bigMatrixImpl56.getColumn((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray92 = bigMatrixImpl2.preMultiply(bigDecimalArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertNotNull(bigDecimalArray60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(bigDecimal84);
        org.junit.Assert.assertNotNull(bigMatrix85);
        org.junit.Assert.assertNotNull(bigDecimalArray87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str88, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(bigDecimalArray89);
        org.junit.Assert.assertNotNull(bigDecimalArray91);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl20.getData();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal24 = bigMatrixImpl20.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[][] doubleArray62 = new double[][] { doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = bigMatrixImpl42.subtract(bigMatrixImpl64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = bigMatrixImpl20.add(bigMatrixImpl65);
        java.math.BigDecimal[][] bigDecimalArray67 = bigMatrixImpl66.getData();
        java.lang.String str68 = bigMatrixImpl66.toString();
        bigMatrixImpl66.setScale((-1));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(bigMatrixImpl65);
        org.junit.Assert.assertNotNull(bigMatrixImpl66);
        org.junit.Assert.assertNotNull(bigDecimalArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str68, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl19.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray22 = bigMatrixImpl19.getRowAsDoubleArray(10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal20);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        double[][] doubleArray40 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray40);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getScale();
        int int23 = bigMatrixImpl21.getRowDimension();
        java.math.BigDecimal[] bigDecimalArray25 = bigMatrixImpl21.getRow(2);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray26, true);
        java.math.BigDecimal[] bigDecimalArray30 = bigMatrixImpl28.getColumn((int) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 64 + "'", int22 == 64);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl20.copy();
        java.math.BigDecimal[][] bigDecimalArray47 = bigMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray47);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) ' ', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be postive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        int int23 = bigMatrixImpl21.getRowDimension();
        boolean boolean24 = bigMatrixImpl21.isSquare();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        int int3 = realMatrixImpl2.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = realMatrixImpl2.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[][] doubleArray7 = realMatrixImpl5.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray7);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray7);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray7);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        int int46 = bigMatrixImpl20.getRoundingMode();
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[][] doubleArray65 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        int int68 = bigMatrixImpl67.getScale();
        java.math.BigDecimal[][] bigDecimalArray69 = bigMatrixImpl67.getData();
        java.math.BigDecimal[][] bigDecimalArray70 = bigMatrixImpl67.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray70, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = bigMatrixImpl20.subtract(bigMatrixImpl72);
        bigMatrixImpl20.setRoundingMode(97);
        java.math.BigDecimal[][] bigDecimalArray76 = bigMatrixImpl20.getData();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 64 + "'", int68 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertNotNull(bigMatrixImpl73);
        org.junit.Assert.assertNotNull(bigDecimalArray76);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl34.scalarMultiply((double) (short) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl34.scalarMultiply((double) 6);
        double[][] doubleArray43 = realMatrixImpl34.getData();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        int int27 = bigMatrixImpl20.getColumnDimension();
        int int28 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl20.getData();
        java.lang.String str30 = bigMatrixImpl20.toString();
        bigMatrixImpl20.setRoundingMode((int) (short) 1);
        boolean boolean33 = bigMatrixImpl20.isSquare();
        java.math.BigDecimal[][] bigDecimalArray34 = bigMatrixImpl20.getDataRef();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str30, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray34);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl20.getData();
        int int28 = bigMatrixImpl20.getRowDimension();
        boolean boolean29 = bigMatrixImpl20.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl20.subtract(bigMatrix30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl23.getSubMatrix(6, (int) ' ', (int) (short) -1, (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        boolean boolean17 = realMatrixImpl12.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl12.copy();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix29 = realMatrixImpl24.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl28);
        boolean boolean30 = realMatrixImpl24.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl33.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl40.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl47);
        boolean boolean49 = realMatrixImpl43.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl52.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl55);
        int int57 = realMatrixImpl55.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl43.subtract(realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl36.subtract(realMatrixImpl58);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = realMatrixImpl62.add(realMatrixImpl65);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix70 = realMatrixImpl65.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl69);
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrixImpl59.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl65);
        double[][] doubleArray72 = realMatrixImpl65.getDataRef();
        org.apache.commons.math.linear.RealMatrix realMatrix73 = realMatrixImpl24.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl65);
        boolean boolean74 = realMatrixImpl12.equals((java.lang.Object) realMatrixImpl65);
        double[][] doubleArray75 = realMatrixImpl65.getData();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrixImpl59);
        org.junit.Assert.assertNotNull(realMatrixImpl66);
        org.junit.Assert.assertNotNull(realMatrix70);
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(doubleArray75);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray8);
        double[][] doubleArray10 = realMatrixImpl9.getData();
        double[][] doubleArray11 = realMatrixImpl9.getData();
        int int12 = realMatrixImpl9.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = realMatrixImpl9.getColumnMatrix(0);
        java.lang.String str15 = realMatrixImpl9.toString();
        boolean boolean16 = realMatrixImpl9.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl19.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl19.getColumnMatrix((int) ' ');
        double[][] doubleArray34 = realMatrixImpl19.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl37.add(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl44.add(realMatrixImpl47);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl37.add(realMatrixImpl47);
        org.apache.commons.math.linear.RealMatrix realMatrix51 = realMatrixImpl37.scalarAdd((double) (byte) 1);
        double[] doubleArray53 = realMatrixImpl37.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray53);
        double[] doubleArray57 = realMatrixImpl19.preMultiply(doubleArray53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray53);
        double[][] doubleArray59 = realMatrixImpl58.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrixImpl58.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix61 = realMatrixImpl9.multiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}" + "'", str15, "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
        org.junit.Assert.assertNotNull(realMatrixImpl49);
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realMatrix60);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean45 = bigMatrixImpl44.isSquare();
        java.math.BigDecimal bigDecimal46 = bigMatrixImpl44.getNorm();
        int int47 = bigMatrixImpl44.getRowDimension();
        double[] doubleArray49 = bigMatrixImpl44.getColumnAsDoubleArray(1);
        java.math.BigDecimal bigDecimal50 = null;
        java.math.BigDecimal[] bigDecimalArray51 = new java.math.BigDecimal[] { bigDecimal50 };
        java.math.BigDecimal bigDecimal52 = null;
        java.math.BigDecimal[] bigDecimalArray53 = new java.math.BigDecimal[] { bigDecimal52 };
        java.math.BigDecimal bigDecimal54 = null;
        java.math.BigDecimal[] bigDecimalArray55 = new java.math.BigDecimal[] { bigDecimal54 };
        java.math.BigDecimal bigDecimal56 = null;
        java.math.BigDecimal[] bigDecimalArray57 = new java.math.BigDecimal[] { bigDecimal56 };
        java.math.BigDecimal bigDecimal58 = null;
        java.math.BigDecimal[] bigDecimalArray59 = new java.math.BigDecimal[] { bigDecimal58 };
        java.math.BigDecimal[][] bigDecimalArray60 = new java.math.BigDecimal[][] { bigDecimalArray51, bigDecimalArray53, bigDecimalArray55, bigDecimalArray57, bigDecimalArray59 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray60, true);
        int int63 = bigMatrixImpl62.getRoundingMode();
        bigMatrixImpl62.setScale((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix66 = bigMatrixImpl44.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[20.0, 20.0, 20.0, 20.0, 20.0, 20.0]");
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
        org.junit.Assert.assertNotNull(bigDecimalArray57);
        org.junit.Assert.assertNotNull(bigDecimalArray59);
        org.junit.Assert.assertNotNull(bigDecimalArray60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl23.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl23.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl17.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl23);
        double double38 = realMatrixImpl23.getNorm();
        boolean boolean39 = realMatrixImpl23.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray41 = realMatrixImpl23.getRow((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        java.math.BigDecimal bigDecimal47 = bigMatrixImpl44.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray48 = bigMatrixImpl44.getData();
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[][] doubleArray67 = new double[][] { doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63, doubleArray66 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray67);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray67);
        java.math.BigDecimal bigDecimal72 = bigMatrixImpl69.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl44.scalarMultiply(bigDecimal72);
        java.math.BigDecimal[] bigDecimalArray75 = bigMatrixImpl44.getRow(2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl76 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray75);
        java.math.BigDecimal[] bigDecimalArray77 = bigMatrixImpl20.operate(bigDecimalArray75);
        java.math.BigDecimal bigDecimal78 = null;
        java.math.BigDecimal[] bigDecimalArray79 = new java.math.BigDecimal[] { bigDecimal78 };
        java.math.BigDecimal bigDecimal80 = null;
        java.math.BigDecimal[] bigDecimalArray81 = new java.math.BigDecimal[] { bigDecimal80 };
        java.math.BigDecimal bigDecimal82 = null;
        java.math.BigDecimal[] bigDecimalArray83 = new java.math.BigDecimal[] { bigDecimal82 };
        java.math.BigDecimal bigDecimal84 = null;
        java.math.BigDecimal[] bigDecimalArray85 = new java.math.BigDecimal[] { bigDecimal84 };
        java.math.BigDecimal bigDecimal86 = null;
        java.math.BigDecimal[] bigDecimalArray87 = new java.math.BigDecimal[] { bigDecimal86 };
        java.math.BigDecimal[][] bigDecimalArray88 = new java.math.BigDecimal[][] { bigDecimalArray79, bigDecimalArray81, bigDecimalArray83, bigDecimalArray85, bigDecimalArray87 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl90 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray88, true);
        bigMatrixImpl90.setScale((int) (short) 0);
        int int93 = bigMatrixImpl90.getRoundingMode();
        boolean boolean94 = bigMatrixImpl90.isSingular();
        boolean boolean95 = bigMatrixImpl90.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl96 = bigMatrixImpl20.multiply(bigMatrixImpl90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigMatrix73);
        org.junit.Assert.assertNotNull(bigDecimalArray75);
        org.junit.Assert.assertNotNull(bigDecimalArray77);
        org.junit.Assert.assertNotNull(bigDecimalArray79);
        org.junit.Assert.assertNotNull(bigDecimalArray81);
        org.junit.Assert.assertNotNull(bigDecimalArray83);
        org.junit.Assert.assertNotNull(bigDecimalArray85);
        org.junit.Assert.assertNotNull(bigDecimalArray87);
        org.junit.Assert.assertNotNull(bigDecimalArray88);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 4 + "'", int93 == 4);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        bigMatrixImpl12.setScale((int) '4');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl28.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl35);
        boolean boolean37 = realMatrixImpl31.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrixImpl40.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl43);
        int int45 = realMatrixImpl43.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl31.subtract(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = realMatrixImpl24.subtract(realMatrixImpl46);
        boolean boolean48 = bigMatrixImpl12.equals((java.lang.Object) realMatrixImpl46);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl12.getRowMatrix(1);
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[] doubleArray68 = new double[] { 1, (byte) 10 };
        double[][] doubleArray69 = new double[][] { doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65, doubleArray68 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray69);
        java.math.BigDecimal bigDecimal71 = bigMatrixImpl70.getNorm();
        java.math.BigDecimal[] bigDecimalArray72 = new java.math.BigDecimal[] { bigDecimal71 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray72);
        java.math.BigDecimal[] bigDecimalArray75 = bigMatrixImpl73.getRow(0);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl76 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray75);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray77 = bigMatrixImpl12.solve(bigDecimalArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertNotNull(bigDecimalArray75);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        java.math.BigDecimal[][] bigDecimalArray45 = bigMatrixImpl44.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45, true);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
        int int51 = bigMatrixImpl49.getRowDimension();
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[][] doubleArray70 = new double[][] { doubleArray54, doubleArray57, doubleArray60, doubleArray63, doubleArray66, doubleArray69 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        double[] doubleArray75 = new double[] { 1, (byte) 10 };
        double[] doubleArray78 = new double[] { 1, (byte) 10 };
        double[] doubleArray81 = new double[] { 1, (byte) 10 };
        double[] doubleArray84 = new double[] { 1, (byte) 10 };
        double[] doubleArray87 = new double[] { 1, (byte) 10 };
        double[] doubleArray90 = new double[] { 1, (byte) 10 };
        double[][] doubleArray91 = new double[][] { doubleArray75, doubleArray78, doubleArray81, doubleArray84, doubleArray87, doubleArray90 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl92 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray91);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl93 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray91);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl94 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray91);
        int int95 = bigMatrixImpl94.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl96 = bigMatrixImpl72.add(bigMatrixImpl94);
        java.lang.String str97 = bigMatrixImpl72.toString();
        int int98 = bigMatrixImpl72.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl99 = bigMatrixImpl49.subtract(bigMatrixImpl72);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str97, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 64 + "'", int98 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl99);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = bigMatrixImpl45.add(bigMatrixImpl67);
        java.math.BigDecimal bigDecimal70 = bigMatrixImpl67.getNorm();
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[] doubleArray88 = new double[] { 1, (byte) 10 };
        double[][] doubleArray89 = new double[][] { doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85, doubleArray88 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl90 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl91 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl92 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        int int93 = bigMatrixImpl92.getColumnDimension();
        int int94 = bigMatrixImpl92.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl95 = bigMatrixImpl67.subtract(bigMatrixImpl92);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl96 = bigMatrixImpl20.subtract(bigMatrixImpl67);
        boolean boolean97 = bigMatrixImpl67.isSquare();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 64 + "'", int94 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl95);
        org.junit.Assert.assertNotNull(bigMatrixImpl96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        boolean boolean17 = realMatrixImpl12.isSingular();
        boolean boolean19 = realMatrixImpl12.equals((java.lang.Object) 6);
        double double20 = realMatrixImpl12.getNorm();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl28.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl21.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl21.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl21.getColumnMatrix((int) (short) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl16.subtract(realMatrixImpl21);
        double[] doubleArray40 = realMatrixImpl16.getColumn((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrixImpl16.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray39);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl19.getNorm();
        int int21 = bigMatrixImpl19.getRoundingMode();
        int int22 = bigMatrixImpl19.getRoundingMode();
        bigMatrixImpl19.setRoundingMode((int) (short) 0);
        double[][] doubleArray25 = bigMatrixImpl19.getDataAsDoubleArray();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(doubleArray25);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        int int46 = bigMatrixImpl20.getRowDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl20.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl20.transpose();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertNotNull(bigMatrix48);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl21.subtract(bigMatrixImpl43);
        double[][] doubleArray45 = bigMatrixImpl21.getDataAsDoubleArray();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl21.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(doubleArray45);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, true);
        int int23 = realMatrixImpl22.getRowDimension();
        java.lang.String str24 = realMatrixImpl22.toString();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RealMatrixImpl{{1.0,10.0},{1.0,10.0},{1.0,10.0},{1.0,10.0},{1.0,10.0},{1.0,10.0}}" + "'", str24, "RealMatrixImpl{{1.0,10.0},{1.0,10.0},{1.0,10.0},{1.0,10.0},{1.0,10.0},{1.0,10.0}}");
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray25);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray25, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray25, false);
        int int31 = bigMatrixImpl30.getRoundingMode();
        boolean boolean32 = bigMatrixImpl30.isSingular();
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[] doubleArray47 = new double[] { 1, (byte) 10 };
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[][] doubleArray51 = new double[][] { doubleArray35, doubleArray38, doubleArray41, doubleArray44, doubleArray47, doubleArray50 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray51);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray51);
        java.math.BigDecimal bigDecimal56 = bigMatrixImpl53.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray57 = bigMatrixImpl53.getData();
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[] doubleArray72 = new double[] { 1, (byte) 10 };
        double[] doubleArray75 = new double[] { 1, (byte) 10 };
        double[][] doubleArray76 = new double[][] { doubleArray60, doubleArray63, doubleArray66, doubleArray69, doubleArray72, doubleArray75 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl77 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray76);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl78 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray76);
        java.math.BigDecimal bigDecimal81 = bigMatrixImpl78.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix82 = bigMatrixImpl53.scalarMultiply(bigDecimal81);
        org.apache.commons.math.linear.BigMatrix bigMatrix83 = bigMatrixImpl30.scalarAdd(bigDecimal81);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray85 = bigMatrixImpl30.getRow((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(bigDecimalArray57);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(bigDecimal81);
        org.junit.Assert.assertNotNull(bigMatrix82);
        org.junit.Assert.assertNotNull(bigMatrix83);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl21.subtract(bigMatrixImpl43);
        int int45 = bigMatrixImpl44.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl44.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray8);
        double[][] doubleArray10 = realMatrixImpl9.getData();
        double[][] doubleArray11 = realMatrixImpl9.getDataRef();
        double double12 = realMatrixImpl9.getNorm();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl(52, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be postive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        bigMatrixImpl19.setScale((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl24.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl24.getColumnMatrix((int) ' ');
        double[][] doubleArray39 = realMatrixImpl24.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray39, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl45.add(realMatrixImpl48);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl52.add(realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrixImpl55.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl59);
        boolean boolean61 = realMatrixImpl55.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl64.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl67);
        int int69 = realMatrixImpl67.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = realMatrixImpl55.subtract(realMatrixImpl67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = realMatrixImpl48.subtract(realMatrixImpl70);
        double[] doubleArray73 = realMatrixImpl48.getRow(0);
        java.math.BigDecimal[] bigDecimalArray74 = bigMatrixImpl42.operate(doubleArray73);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl75 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray74);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl76 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray74);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray77 = bigMatrixImpl19.preMultiply(bigDecimalArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realMatrixImpl49);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl70);
        org.junit.Assert.assertNotNull(realMatrixImpl71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimalArray74);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        bigMatrixImpl12.setScale((int) '4');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl28.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl35);
        boolean boolean37 = realMatrixImpl31.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrixImpl40.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl43);
        int int45 = realMatrixImpl43.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl31.subtract(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = realMatrixImpl24.subtract(realMatrixImpl46);
        boolean boolean48 = bigMatrixImpl12.equals((java.lang.Object) realMatrixImpl46);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl46.getRowMatrix((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl20.copy();
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[][] doubleArray65 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        java.math.BigDecimal[][] bigDecimalArray69 = bigMatrixImpl68.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray69, false);
        boolean boolean72 = bigMatrixImpl71.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl71.copy();
        java.math.BigDecimal[] bigDecimalArray75 = bigMatrixImpl71.getColumn((int) (byte) 1);
        java.math.BigDecimal[] bigDecimalArray76 = bigMatrixImpl20.preMultiply(bigDecimalArray75);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(bigMatrix73);
        org.junit.Assert.assertNotNull(bigDecimalArray75);
        org.junit.Assert.assertNotNull(bigDecimalArray76);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl(100, 52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl8 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = realMatrixImpl5.add(realMatrixImpl8);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrixImpl8.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl12);
        boolean boolean14 = realMatrixImpl8.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl17.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl20);
        int int22 = realMatrixImpl20.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl8.subtract(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl33.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl26.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl26.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl20.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrixImpl2.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl9);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        double[] doubleArray47 = new double[] { 1, (byte) 10 };
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[][] doubleArray63 = new double[][] { doubleArray47, doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray63);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray63);
        java.math.BigDecimal bigDecimal68 = bigMatrixImpl65.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray69 = bigMatrixImpl65.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray69, false);
        double[][] doubleArray72 = bigMatrixImpl71.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl44.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl71);
        java.lang.Class<?> wildcardClass74 = bigMatrix73.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(bigMatrix73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getScale();
        int int23 = bigMatrixImpl21.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal24 = bigMatrixImpl21.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 64 + "'", int22 == 64);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, false);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, true);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrixImpl9.scalarAdd((double) 4);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = realMatrixImpl9.scalarAdd((double) 0L);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl17.add(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl17.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl17.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl34.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl37.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl41);
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl17.add(realMatrix42);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl9.multiply(realMatrixImpl17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(realMatrix43);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl(5, 100);
        double[][] doubleArray3 = realMatrixImpl2.getData();
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = bigMatrixImpl42.transpose();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertNotNull(bigMatrix71);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        boolean boolean17 = realMatrixImpl12.isSingular();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl20.add(realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl27.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl20.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl20.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl37.add(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl40.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl44);
        boolean boolean46 = realMatrixImpl40.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix53 = realMatrixImpl49.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl52);
        int int54 = realMatrixImpl52.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl40.subtract(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl20.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix57 = realMatrixImpl20.copy();
        boolean boolean58 = realMatrixImpl20.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl12.subtract(realMatrixImpl20);
        double[][] doubleArray60 = realMatrixImpl20.getDataRef();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl59);
        org.junit.Assert.assertNotNull(doubleArray60);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        double[][] doubleArray21 = realMatrixImpl17.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        boolean boolean23 = bigMatrixImpl22.isSquare();
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        double[] doubleArray47 = bigMatrixImpl45.getColumnAsDoubleArray(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl22.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        int int3 = realMatrixImpl2.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getRowDimension();
        double[] doubleArray23 = bigMatrixImpl20.getColumnAsDoubleArray(1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray23);
        double double25 = realMatrixImpl24.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrixImpl24.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 60.0d + "'", double25 == 60.0d);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        int int23 = realMatrixImpl22.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl22.getRowMatrix(0);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrixImpl22.transpose();
        double[][] doubleArray27 = realMatrixImpl22.getData();
        double[][] doubleArray28 = realMatrixImpl22.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            double double29 = realMatrixImpl22.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl23.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl23.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl40.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl47);
        boolean boolean49 = realMatrixImpl43.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl52.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl55);
        int int57 = realMatrixImpl55.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl43.subtract(realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl23.add(realMatrixImpl55);
        double[][] doubleArray60 = realMatrixImpl59.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = realMatrixImpl63.add(realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = realMatrixImpl70.add(realMatrixImpl73);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = realMatrixImpl63.add(realMatrixImpl73);
        org.apache.commons.math.linear.RealMatrix realMatrix77 = realMatrixImpl63.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = realMatrixImpl80.add(realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix88 = realMatrixImpl83.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl87);
        org.apache.commons.math.linear.RealMatrix realMatrix89 = realMatrixImpl63.add(realMatrix88);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl90 = realMatrixImpl59.subtract(realMatrixImpl63);
        double[] doubleArray92 = realMatrixImpl90.getRow(4);
        double[] doubleArray93 = realMatrixImpl17.operate(doubleArray92);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix95 = realMatrixImpl17.getRowMatrix((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrixImpl59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realMatrixImpl67);
        org.junit.Assert.assertNotNull(realMatrixImpl74);
        org.junit.Assert.assertNotNull(realMatrixImpl75);
        org.junit.Assert.assertNotNull(realMatrix77);
        org.junit.Assert.assertNotNull(realMatrixImpl84);
        org.junit.Assert.assertNotNull(realMatrix88);
        org.junit.Assert.assertNotNull(realMatrix89);
        org.junit.Assert.assertNotNull(realMatrixImpl90);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrixImpl5.getColumnMatrix((int) (byte) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrixImpl5.transpose();
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean46 = bigMatrixImpl20.equals((java.lang.Object) (-1));
        java.math.BigDecimal[][] bigDecimalArray47 = bigMatrixImpl20.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray48 = bigMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray48, true);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        double[] doubleArray18 = realMatrixImpl12.getRow((int) (short) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrixImpl20.scalarAdd((double) 97);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl20.copy();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrix23);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        int int16 = bigMatrixImpl12.getRowDimension();
        double[] doubleArray19 = new double[] { 1, (byte) 10 };
        double[] doubleArray22 = new double[] { 1, (byte) 10 };
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[][] doubleArray35 = new double[][] { doubleArray19, doubleArray22, doubleArray25, doubleArray28, doubleArray31, doubleArray34 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        java.math.BigDecimal[][] bigDecimalArray39 = bigMatrixImpl38.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl38.getColumnMatrix((int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl38.getRowMatrix(4);
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[][] doubleArray62 = new double[][] { doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[][] doubleArray83 = new double[][] { doubleArray67, doubleArray70, doubleArray73, doubleArray76, doubleArray79, doubleArray82 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl84 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray83);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl85 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray83);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl86 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray83);
        int int87 = bigMatrixImpl86.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl88 = bigMatrixImpl64.add(bigMatrixImpl86);
        java.math.BigDecimal bigDecimal89 = bigMatrixImpl86.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix90 = bigMatrixImpl38.scalarAdd(bigDecimal89);
        int int91 = bigMatrixImpl38.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix92 = bigMatrixImpl38.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix93 = bigMatrixImpl12.solve((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertNotNull(bigMatrix41);
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl88);
        org.junit.Assert.assertNotNull(bigDecimal89);
        org.junit.Assert.assertNotNull(bigMatrix90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 64 + "'", int91 == 64);
        org.junit.Assert.assertNotNull(bigMatrix92);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray8);
        double[][] doubleArray10 = realMatrixImpl9.getData();
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl9.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        bigMatrixImpl12.setScale((int) '4');
        java.lang.String str19 = bigMatrixImpl12.toString();
        int int20 = bigMatrixImpl12.getColumnDimension();
        int int21 = bigMatrixImpl12.getScale();
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "BigMatrixImpl{{null},{null},{null},{null},{null}}" + "'", str19, "BigMatrixImpl{{null},{null},{null},{null},{null}}");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        boolean boolean3 = realMatrixImpl2.isSquare();
        boolean boolean4 = realMatrixImpl2.isSingular();
        double[][] doubleArray5 = realMatrixImpl2.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = realMatrixImpl2.scalarAdd((double) (byte) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl2.transpose();
        int int9 = realMatrixImpl2.getColumnDimension();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        int int23 = bigMatrixImpl21.getScale();
        int int24 = bigMatrixImpl21.getScale();
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl21.getDataRef();
        bigMatrixImpl21.setRoundingMode((int) ' ');
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[] doubleArray45 = new double[] { 1, (byte) 10 };
        double[][] doubleArray46 = new double[][] { doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42, doubleArray45 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        int int50 = bigMatrixImpl49.getScale();
        int int51 = bigMatrixImpl49.getRowDimension();
        java.math.BigDecimal[] bigDecimalArray53 = bigMatrixImpl49.getRow(2);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
        java.lang.String str55 = bigMatrixImpl49.toString();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 64 + "'", int24 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 64 + "'", int50 == 64);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str55, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray27, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray27);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        java.math.BigDecimal bigDecimal46 = bigMatrixImpl43.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl21.scalarAdd(bigDecimal46);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        int int51 = bigMatrixImpl50.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl21.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        bigMatrixImpl22.setScale((int) (byte) 100);
        double[] doubleArray26 = bigMatrixImpl22.getColumnAsDoubleArray((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl22.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.scalarMultiply((double) (short) -1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl20.add(realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl27.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl20.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl20.getColumnMatrix((int) ' ');
        double[][] doubleArray35 = realMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray35, false);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl2.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl37.scalarAdd((double) 35);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(realMatrix40);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getScale();
        java.math.BigDecimal[][] bigDecimalArray14 = bigMatrixImpl12.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl17.add(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl20.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        boolean boolean26 = realMatrixImpl20.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl32);
        int int34 = realMatrixImpl32.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl20.subtract(realMatrixImpl32);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = realMatrixImpl38.add(realMatrixImpl41);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl45.add(realMatrixImpl48);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl38.add(realMatrixImpl48);
        org.apache.commons.math.linear.RealMatrix realMatrix51 = realMatrixImpl38.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix52 = realMatrixImpl32.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        double double53 = realMatrixImpl38.getNorm();
        boolean boolean54 = bigMatrixImpl12.equals((java.lang.Object) realMatrixImpl38);
        java.math.BigDecimal[][] bigDecimalArray55 = bigMatrixImpl12.getDataRef();
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 64 + "'", int13 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray14);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrixImpl42);
        org.junit.Assert.assertNotNull(realMatrixImpl49);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.scalarMultiply((double) (short) -1);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl2.scalarAdd((double) 'a');
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl20.copy();
        int int24 = bigMatrixImpl20.getRowDimension();
        boolean boolean25 = bigMatrixImpl20.isSingular();
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl20.getDataRef();
        bigMatrixImpl20.setRoundingMode((int) ' ');
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[][] doubleArray68 = new double[][] { doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64, doubleArray67 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        int int72 = bigMatrixImpl71.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = bigMatrixImpl49.add(bigMatrixImpl71);
        java.lang.String str74 = bigMatrixImpl49.toString();
        int int75 = bigMatrixImpl49.getRowDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl49.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix77 = bigMatrixImpl20.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix78 = bigMatrixImpl49.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str74, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 6 + "'", int75 == 6);
        org.junit.Assert.assertNotNull(bigMatrix76);
        org.junit.Assert.assertNotNull(bigMatrix77);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(6, 4);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = bigMatrixImpl2.getColumnMatrix(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl7 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = realMatrixImpl7.add(realMatrixImpl10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl10.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl14);
        boolean boolean16 = realMatrixImpl10.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl19.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl22);
        int int24 = realMatrixImpl22.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl10.subtract(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl35.add(realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl38.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl42);
        boolean boolean44 = realMatrixImpl31.equals((java.lang.Object) realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl10.add(realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix52 = realMatrixImpl48.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl51);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl55.add(realMatrixImpl58);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrixImpl58.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl62);
        boolean boolean64 = realMatrixImpl51.equals((java.lang.Object) realMatrixImpl62);
        boolean boolean65 = realMatrixImpl51.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = realMatrixImpl42.add(realMatrixImpl51);
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[] doubleArray72 = new double[] { 1, (byte) 10 };
        double[] doubleArray75 = new double[] { 1, (byte) 10 };
        double[] doubleArray78 = new double[] { 1, (byte) 10 };
        double[] doubleArray81 = new double[] { 1, (byte) 10 };
        double[] doubleArray84 = new double[] { 1, (byte) 10 };
        double[][] doubleArray85 = new double[][] { doubleArray69, doubleArray72, doubleArray75, doubleArray78, doubleArray81, doubleArray84 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl86 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray85);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl87 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray85);
        boolean boolean88 = realMatrixImpl66.equals((java.lang.Object) bigMatrixImpl87);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix89 = bigMatrixImpl2.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigMatrix4);
        org.junit.Assert.assertNotNull(realMatrixImpl11);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrixImpl39);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertNotNull(realMatrixImpl59);
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl66);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl20.copy();
        boolean boolean47 = bigMatrixImpl20.isSingular();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl57.add(realMatrixImpl60);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl64.add(realMatrixImpl67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl57.add(realMatrixImpl67);
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrixImpl57.scalarAdd((double) (byte) 1);
        double[] doubleArray73 = realMatrixImpl57.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray73);
        double[] doubleArray75 = realMatrixImpl53.preMultiply(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray76 = bigMatrixImpl20.solve(doubleArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray23, true);
        boolean boolean26 = bigMatrixImpl25.isSquare();
        bigMatrixImpl25.setScale(1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl22.transpose();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl33.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrixImpl36.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl40);
        boolean boolean42 = realMatrixImpl36.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix49 = realMatrixImpl45.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl48);
        int int50 = realMatrixImpl48.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = realMatrixImpl36.subtract(realMatrixImpl48);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl29.subtract(realMatrixImpl51);
        boolean boolean53 = realMatrixImpl52.isSquare();
        double[][] doubleArray54 = realMatrixImpl52.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray54, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray54);
        java.math.BigDecimal bigDecimal58 = bigMatrixImpl57.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl22.scalarMultiply(bigDecimal58);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl51);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigMatrix59);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.scalarMultiply((double) (short) -1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl20.add(realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl27.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl20.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl20.getColumnMatrix((int) ' ');
        double[][] doubleArray35 = realMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray35, false);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl2.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        int int39 = realMatrixImpl37.getRowDimension();
        java.lang.Class<?> wildcardClass40 = realMatrixImpl37.getClass();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        boolean boolean17 = bigMatrixImpl12.isSquare();
        bigMatrixImpl12.setRoundingMode(97);
        int int20 = bigMatrixImpl12.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray22 = bigMatrixImpl12.getRow(35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        boolean boolean25 = bigMatrixImpl20.isSingular();
        boolean boolean26 = bigMatrixImpl20.isSquare();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        java.math.BigDecimal[][] bigDecimalArray45 = bigMatrixImpl44.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45, true);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
        int int51 = bigMatrixImpl49.getRoundingMode();
        double[][] doubleArray52 = bigMatrixImpl49.getDataAsDoubleArray();
        java.math.BigDecimal[][] bigDecimalArray53 = bigMatrixImpl49.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray53, false);
        boolean boolean56 = bigMatrixImpl55.isSquare();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        double[][] doubleArray21 = realMatrixImpl17.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray21, true);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray21, true);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl35.add(realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl38.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl42);
        boolean boolean44 = realMatrixImpl31.equals((java.lang.Object) realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl31.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl31.scalarAdd((double) 97);
        boolean boolean48 = realMatrixImpl25.equals((java.lang.Object) realMatrixImpl31);
        double[][] doubleArray49 = realMatrixImpl31.getDataRef();
        org.apache.commons.math.linear.RealMatrix realMatrix51 = realMatrixImpl31.scalarMultiply((-1.0d));
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrixImpl39);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realMatrix51);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        int int21 = realMatrixImpl17.getColumnDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrixImpl17.transpose();
        double[] doubleArray24 = realMatrixImpl17.getRow((int) (short) 1);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        double[] doubleArray25 = realMatrixImpl22.getColumn((int) (byte) 0);
        boolean boolean27 = realMatrixImpl22.equals((java.lang.Object) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = realMatrixImpl22.getRowMatrix(5);
        double[] doubleArray31 = realMatrixImpl22.getColumn(0);
        double[] doubleArray32 = realMatrixImpl12.preMultiply(doubleArray31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = realMatrixImpl34.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 100, (int) (byte) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix3 = realMatrixImpl2.copy();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray5 = realMatrixImpl2.getColumn((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix3);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        int int10 = realMatrixImpl5.getRowDimension();
        double[][] doubleArray11 = realMatrixImpl5.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray11, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl13.getSubMatrix((int) 'a', 52, 4, 52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(doubleArray11);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        int int23 = bigMatrixImpl21.getScale();
        bigMatrixImpl21.setRoundingMode((int) '#');
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[][] doubleArray44 = new double[][] { doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = bigMatrixImpl21.add(bigMatrixImpl47);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl21.getRowMatrix((int) (short) 1);
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[] doubleArray68 = new double[] { 1, (byte) 10 };
        double[][] doubleArray69 = new double[][] { doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65, doubleArray68 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray69);
        java.math.BigDecimal bigDecimal71 = bigMatrixImpl70.getNorm();
        int int72 = bigMatrixImpl70.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl21.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(bigMatrixImpl48);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray27);
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        int int51 = bigMatrixImpl50.getColumnDimension();
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[][] doubleArray70 = new double[][] { doubleArray54, doubleArray57, doubleArray60, doubleArray63, doubleArray66, doubleArray69 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        java.math.BigDecimal[][] bigDecimalArray74 = bigMatrixImpl73.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl76 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray74, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl78 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray74, true);
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = bigMatrixImpl50.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl78);
        int int80 = bigMatrixImpl78.getRoundingMode();
        double[][] doubleArray81 = bigMatrixImpl78.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl82 = bigMatrixImpl28.add(bigMatrixImpl78);
        org.apache.commons.math.linear.BigMatrix bigMatrix84 = bigMatrixImpl28.getRowMatrix(1);
        int int85 = bigMatrixImpl28.getScale();
        int int86 = bigMatrixImpl28.getScale();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(bigDecimalArray74);
        org.junit.Assert.assertNotNull(bigMatrix79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 4 + "'", int80 == 4);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(bigMatrixImpl82);
        org.junit.Assert.assertNotNull(bigMatrix84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 64 + "'", int85 == 64);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 64 + "'", int86 == 64);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        double[][] doubleArray71 = bigMatrixImpl67.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray71, false);
        int int74 = realMatrixImpl73.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl73.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        boolean boolean7 = realMatrixImpl6.isSquare();
        int int8 = realMatrixImpl6.getRowDimension();
        double[][] doubleArray9 = realMatrixImpl6.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray9, true);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(doubleArray9);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray25);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray25, true);
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl28.getData();
        bigMatrixImpl28.setRoundingMode(0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl20.getData();
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray27 = bigMatrixImpl25.getColumnAsDoubleArray((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl20.getData();
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl46.copy();
        boolean boolean48 = bigMatrixImpl20.equals((java.lang.Object) bigMatrixImpl46);
        bigMatrixImpl20.setScale((-1));
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray52 = bigMatrixImpl20.getColumnAsDoubleArray((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.scalarMultiply((double) (short) -1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl20.add(realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl27.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl20.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl20.getColumnMatrix((int) ' ');
        double[][] doubleArray35 = realMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray35, false);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl2.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl2.isSingular();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl42.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl42.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrixImpl59.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = realMatrixImpl66.add(realMatrixImpl69);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix74 = realMatrixImpl69.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl73);
        boolean boolean75 = realMatrixImpl62.equals((java.lang.Object) realMatrixImpl73);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = realMatrixImpl42.add(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrix realMatrix78 = realMatrixImpl42.scalarMultiply((double) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix79 = realMatrixImpl2.multiply(realMatrix78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertNotNull(realMatrixImpl70);
        org.junit.Assert.assertNotNull(realMatrix74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl76);
        org.junit.Assert.assertNotNull(realMatrix78);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        double[] doubleArray18 = realMatrixImpl12.getRow((int) (short) 1);
        double[][] doubleArray19 = realMatrixImpl12.getData();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        java.lang.String[] strArray4 = new java.lang.String[] { "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}", "", "BigMatrixImpl{{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null}}", "" };
        java.lang.String[] strArray9 = new java.lang.String[] { "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}", "", "BigMatrixImpl{{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null}}", "" };
        java.lang.String[] strArray14 = new java.lang.String[] { "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}", "", "BigMatrixImpl{{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null}}", "" };
        java.lang.String[][] strArray15 = new java.lang.String[][] { strArray4, strArray9, strArray14 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl16 = new org.apache.commons.math.linear.BigMatrixImpl(strArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.scalarAdd((double) 2);
        int int5 = realMatrixImpl2.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl8 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = realMatrixImpl8.add(realMatrixImpl11);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = realMatrixImpl15.add(realMatrixImpl18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl8.add(realMatrixImpl18);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrixImpl8.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl25.add(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl32);
        boolean boolean34 = realMatrixImpl28.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrixImpl37.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl40);
        int int42 = realMatrixImpl40.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl28.subtract(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl8.add(realMatrixImpl40);
        double[][] doubleArray45 = realMatrixImpl44.getData();
        int int46 = realMatrixImpl44.getColumnDimension();
        boolean boolean47 = realMatrixImpl2.equals((java.lang.Object) realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl57.add(realMatrixImpl60);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix65 = realMatrixImpl60.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl64);
        boolean boolean66 = realMatrixImpl60.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix73 = realMatrixImpl69.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl72);
        int int74 = realMatrixImpl72.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = realMatrixImpl60.subtract(realMatrixImpl72);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = realMatrixImpl53.subtract(realMatrixImpl75);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl44.subtract(realMatrixImpl75);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = realMatrixImpl80.add(realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrix realMatrix85 = realMatrixImpl84.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix86 = realMatrixImpl77.preMultiply(realMatrix85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl12);
        org.junit.Assert.assertNotNull(realMatrixImpl19);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl75);
        org.junit.Assert.assertNotNull(realMatrixImpl76);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertNotNull(realMatrixImpl84);
        org.junit.Assert.assertNotNull(realMatrix85);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl45.getEntry(0, (int) (short) 0);
        boolean boolean49 = bigMatrixImpl45.isSingular();
        boolean boolean50 = bigMatrixImpl45.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl45);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl45.transpose();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal53 = bigMatrixImpl45.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(bigMatrix52);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        double[] doubleArray30 = realMatrixImpl5.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl33.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        double double39 = realMatrixImpl37.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrixImpl37.getColumnMatrix(5);
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrixImpl37.getSubMatrix(0, 0, 0, (int) ' ');
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(realMatrix46);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        boolean boolean3 = realMatrixImpl2.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrixImpl2.copy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertNotNull(realMatrix5);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal30 = bigMatrixImpl27.getEntry((-1), 5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl20.getColumnMatrix(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl20.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigMatrix46);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        int int25 = bigMatrixImpl24.getRoundingMode();
        double[][] doubleArray26 = bigMatrixImpl24.getDataAsDoubleArray();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal27 = bigMatrixImpl24.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(doubleArray26);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl26.equals((java.lang.Object) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl5.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl53.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        boolean boolean59 = realMatrixImpl46.equals((java.lang.Object) realMatrixImpl57);
        boolean boolean60 = realMatrixImpl46.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl37.add(realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrixImpl46.scalarAdd(0.0d);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(realMatrix63);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        int int23 = bigMatrixImpl21.getScale();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        boolean boolean35 = realMatrixImpl29.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl38.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl41);
        int int43 = realMatrixImpl41.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl29.subtract(realMatrixImpl41);
        double[][] doubleArray45 = realMatrixImpl41.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl21.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(doubleArray45);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl19.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        boolean boolean35 = realMatrixImpl22.equals((java.lang.Object) realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl2.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl2.scalarMultiply((double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrixImpl2.getRowMatrix((int) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl44.add(realMatrixImpl47);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl51.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = realMatrixImpl58.add(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl51.add(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrix realMatrix65 = realMatrixImpl51.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrixImpl48.add(realMatrix65);
        double[] doubleArray68 = realMatrixImpl48.getRow((int) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray68);
        double[] doubleArray70 = realMatrixImpl2.operate(doubleArray68);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrixImpl62);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = realMatrixImpl14.add(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix29 = realMatrixImpl24.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl28);
        boolean boolean30 = realMatrixImpl24.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl36);
        int int38 = realMatrixImpl36.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl24.subtract(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl17.subtract(realMatrixImpl39);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = realMatrixImpl43.add(realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix51 = realMatrixImpl46.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl50);
        org.apache.commons.math.linear.RealMatrix realMatrix52 = realMatrixImpl40.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        double[][] doubleArray53 = realMatrixImpl46.getDataRef();
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrixImpl5.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl57.add(realMatrixImpl60);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl64.add(realMatrixImpl67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl57.add(realMatrixImpl67);
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrixImpl57.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl78 = realMatrixImpl74.add(realMatrixImpl77);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl81 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix82 = realMatrixImpl77.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl81);
        boolean boolean83 = realMatrixImpl77.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl86 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl89 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix90 = realMatrixImpl86.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl89);
        int int91 = realMatrixImpl89.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl92 = realMatrixImpl77.subtract(realMatrixImpl89);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl93 = realMatrixImpl57.add(realMatrixImpl89);
        double[][] doubleArray94 = realMatrixImpl93.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl95 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray94);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl5.setSubMatrix(doubleArray94, 10, 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl18);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl39);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrixImpl47);
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertNotNull(realMatrixImpl78);
        org.junit.Assert.assertNotNull(realMatrix82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(realMatrix90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl92);
        org.junit.Assert.assertNotNull(realMatrixImpl93);
        org.junit.Assert.assertNotNull(doubleArray94);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        double[][] doubleArray21 = realMatrixImpl17.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray21);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl23.scalarMultiply((double) '#');
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[][] doubleArray44 = new double[][] { doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        int int47 = bigMatrixImpl46.getScale();
        java.math.BigDecimal[] bigDecimalArray49 = bigMatrixImpl46.getRow((int) (short) 0);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray49);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray49);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray49);
        boolean boolean53 = realMatrixImpl23.equals((java.lang.Object) bigDecimalArray49);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 64 + "'", int47 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        boolean boolean3 = realMatrixImpl2.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = realMatrixImpl2.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = realMatrixImpl43.add(realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl53.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        boolean boolean59 = realMatrixImpl53.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl65);
        int int67 = realMatrixImpl65.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl53.subtract(realMatrixImpl65);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl46.subtract(realMatrixImpl68);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = realMatrixImpl72.add(realMatrixImpl75);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl79 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix80 = realMatrixImpl75.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl79);
        org.apache.commons.math.linear.RealMatrix realMatrix81 = realMatrixImpl69.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl75);
        org.apache.commons.math.linear.RealMatrix realMatrix82 = realMatrixImpl34.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl75);
        boolean boolean83 = realMatrixImpl75.isSingular();
        double[][] doubleArray84 = realMatrixImpl75.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl86 = realMatrixImpl75.subtract(realMatrixImpl85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(realMatrixImpl47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(realMatrixImpl76);
        org.junit.Assert.assertNotNull(realMatrix80);
        org.junit.Assert.assertNotNull(realMatrix81);
        org.junit.Assert.assertNotNull(realMatrix82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(doubleArray84);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl2.scalarAdd(0.0d);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        int int26 = realMatrixImpl21.getColumnDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(realMatrix27);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl22.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl22.transpose();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl20.copy();
        int int24 = bigMatrixImpl20.getRowDimension();
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl20.getData();
        int int26 = bigMatrixImpl20.getColumnDimension();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.scalarMultiply((double) (short) -1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl20.add(realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl27.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl20.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl20.getColumnMatrix((int) ' ');
        double[][] doubleArray35 = realMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray35, false);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl2.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        int int39 = realMatrixImpl37.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl37.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[][] doubleArray62 = new double[][] { doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = bigMatrixImpl42.subtract(bigMatrixImpl64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = bigMatrixImpl20.add(bigMatrixImpl65);
        java.math.BigDecimal[][] bigDecimalArray67 = bigMatrixImpl65.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray67);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(bigMatrixImpl65);
        org.junit.Assert.assertNotNull(bigMatrixImpl66);
        org.junit.Assert.assertNotNull(bigDecimalArray67);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrixImpl5.getColumnMatrix((int) (byte) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrixImpl5.copy();
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        java.lang.String[] strArray6 = new java.lang.String[] { "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}", "BigMatrixImpl{{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}", "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}" };
        java.lang.String[] strArray13 = new java.lang.String[] { "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}", "BigMatrixImpl{{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}", "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}" };
        java.lang.String[] strArray20 = new java.lang.String[] { "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}", "BigMatrixImpl{{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}", "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}" };
        java.lang.String[] strArray27 = new java.lang.String[] { "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}", "BigMatrixImpl{{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null},{null}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}", "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}" };
        java.lang.String[][] strArray28 = new java.lang.String[][] { strArray6, strArray13, strArray20, strArray27 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(strArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl19.getNorm();
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        java.math.BigDecimal[] bigDecimalArray24 = bigMatrixImpl22.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl27.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl30.getColumnMatrix((int) (short) 1);
        boolean boolean34 = realMatrixImpl30.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl30.getColumnMatrix((int) (byte) 10);
        boolean boolean37 = bigMatrixImpl22.equals((java.lang.Object) (byte) 10);
        double[][] doubleArray38 = bigMatrixImpl22.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray38);
        java.math.BigDecimal bigDecimal40 = bigMatrixImpl39.getTrace();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(bigDecimal40);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        boolean boolean29 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrixImpl5.transpose();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(realMatrix30);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.scalarMultiply((double) (short) -1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl20.add(realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl27.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl20.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl20.getColumnMatrix((int) ' ');
        double[][] doubleArray35 = realMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray35, false);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl2.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        int int39 = realMatrixImpl37.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix57 = realMatrixImpl52.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl56);
        boolean boolean58 = realMatrixImpl52.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix65 = realMatrixImpl61.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl64);
        int int66 = realMatrixImpl64.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = realMatrixImpl52.subtract(realMatrixImpl64);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl45.subtract(realMatrixImpl67);
        boolean boolean69 = realMatrixImpl45.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix70 = realMatrixImpl37.multiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl67);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, true);
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        int int49 = bigMatrixImpl48.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl26.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl48);
        double[][] doubleArray51 = bigMatrixImpl26.getDataAsDoubleArray();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(doubleArray51);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        int int46 = bigMatrixImpl20.getRoundingMode();
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[][] doubleArray65 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        int int68 = bigMatrixImpl67.getScale();
        java.math.BigDecimal[][] bigDecimalArray69 = bigMatrixImpl67.getData();
        java.math.BigDecimal[][] bigDecimalArray70 = bigMatrixImpl67.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray70, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = bigMatrixImpl20.subtract(bigMatrixImpl72);
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[] doubleArray88 = new double[] { 1, (byte) 10 };
        double[] doubleArray91 = new double[] { 1, (byte) 10 };
        double[][] doubleArray92 = new double[][] { doubleArray76, doubleArray79, doubleArray82, doubleArray85, doubleArray88, doubleArray91 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl93 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray92);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl94 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray92);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl95 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray92);
        java.math.BigDecimal[][] bigDecimalArray96 = bigMatrixImpl95.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix97 = bigMatrixImpl20.solve((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl95);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 64 + "'", int68 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertNotNull(bigMatrixImpl73);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(bigDecimalArray96);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        java.lang.String[] strArray1 = new java.lang.String[] { "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}" };
        java.lang.String[] strArray3 = new java.lang.String[] { "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}" };
        java.lang.String[][] strArray4 = new java.lang.String[][] { strArray1, strArray3 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl19.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        boolean boolean35 = realMatrixImpl22.equals((java.lang.Object) realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl2.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl2.scalarMultiply((double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrixImpl2.getRowMatrix((int) (byte) 1);
        boolean boolean42 = realMatrixImpl2.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrixImpl2.scalarMultiply((double) 52);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(realMatrix44);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl19.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        boolean boolean35 = realMatrixImpl22.equals((java.lang.Object) realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl2.add(realMatrixImpl22);
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[] doubleArray45 = new double[] { 1, (byte) 10 };
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[][] doubleArray55 = new double[][] { doubleArray39, doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl56 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray55);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray55);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray55);
        int int59 = bigMatrixImpl58.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray60 = bigMatrixImpl58.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray60, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray60, false);
        boolean boolean65 = realMatrixImpl22.equals((java.lang.Object) false);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = bigMatrixImpl45.add(bigMatrixImpl67);
        java.math.BigDecimal bigDecimal70 = bigMatrixImpl67.getNorm();
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[] doubleArray88 = new double[] { 1, (byte) 10 };
        double[][] doubleArray89 = new double[][] { doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85, doubleArray88 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl90 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl91 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl92 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        int int93 = bigMatrixImpl92.getColumnDimension();
        int int94 = bigMatrixImpl92.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl95 = bigMatrixImpl67.subtract(bigMatrixImpl92);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl96 = bigMatrixImpl20.subtract(bigMatrixImpl67);
        java.math.BigDecimal[][] bigDecimalArray97 = bigMatrixImpl67.getDataRef();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 64 + "'", int94 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl95);
        org.junit.Assert.assertNotNull(bigMatrixImpl96);
        org.junit.Assert.assertNotNull(bigDecimalArray97);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl6.add(realMatrix23);
        double[] doubleArray26 = realMatrixImpl6.getRow((int) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray26);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = realMatrixImpl28.getEntry((int) (byte) 100, 4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getScale();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl45.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl45);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray49 = bigMatrixImpl21.getColumnAsDoubleArray((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 64 + "'", int22 == 64);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(bigMatrix47);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        double[][] doubleArray21 = realMatrixImpl17.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        double[] doubleArray47 = new double[] { 1, (byte) 10 };
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[][] doubleArray63 = new double[][] { doubleArray47, doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray63);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray63);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray63);
        int int67 = bigMatrixImpl66.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = bigMatrixImpl44.add(bigMatrixImpl66);
        org.apache.commons.math.linear.BigMatrix bigMatrix69 = bigMatrixImpl68.copy();
        java.math.BigDecimal[][] bigDecimalArray70 = bigMatrixImpl68.getData();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl23.setSubMatrix(bigDecimalArray70, 97, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl68);
        org.junit.Assert.assertNotNull(bigMatrix69);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        int int23 = bigMatrixImpl21.getScale();
        int int24 = bigMatrixImpl21.getScale();
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl21.getDataRef();
        bigMatrixImpl21.setRoundingMode((int) ' ');
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[] doubleArray45 = new double[] { 1, (byte) 10 };
        double[][] doubleArray46 = new double[][] { doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42, doubleArray45 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        int int50 = bigMatrixImpl49.getScale();
        int int51 = bigMatrixImpl49.getRowDimension();
        java.math.BigDecimal[] bigDecimalArray53 = bigMatrixImpl49.getRow(2);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix56 = bigMatrixImpl21.getColumnMatrix((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 64 + "'", int24 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 64 + "'", int50 == 64);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigMatrix54);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl(10, 1);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl5.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl5.scalarAdd((double) 97);
        boolean boolean22 = realMatrixImpl5.isSingular();
        double[][] doubleArray23 = realMatrixImpl5.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray23, false);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl28.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl35.add(realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl28.add(realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl38.scalarMultiply(1.0d);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl45.add(realMatrixImpl48);
        double[] doubleArray51 = realMatrixImpl48.getColumn((int) (byte) 0);
        boolean boolean53 = realMatrixImpl48.equals((java.lang.Object) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix55 = realMatrixImpl48.getRowMatrix(5);
        double[] doubleArray57 = realMatrixImpl48.getColumn(0);
        double[] doubleArray58 = realMatrixImpl38.preMultiply(doubleArray57);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray57);
        double[] doubleArray60 = realMatrixImpl25.preMultiply(doubleArray57);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrixImpl39);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(realMatrixImpl49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl19.getNorm();
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl22.copy();
        java.math.BigDecimal bigDecimal24 = bigMatrixImpl22.getNorm();
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        boolean boolean46 = bigMatrixImpl45.isSquare();
        java.math.BigDecimal[][] bigDecimalArray47 = bigMatrixImpl45.getDataRef();
        java.math.BigDecimal bigDecimal50 = bigMatrixImpl45.getEntry(1, (int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl22.scalarAdd(bigDecimal50);
        int int52 = bigMatrixImpl22.getScale();
        java.math.BigDecimal bigDecimal53 = bigMatrixImpl22.getDeterminant();
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = bigMatrixImpl22.transpose();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 64 + "'", int52 == 64);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigMatrix54);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl22.transpose();
        boolean boolean24 = bigMatrixImpl22.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl22.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getScale();
        boolean boolean14 = bigMatrixImpl12.isSingular();
        int int15 = bigMatrixImpl12.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray16 = bigMatrixImpl12.getData();
        int int17 = bigMatrixImpl12.getScale();
        int int18 = bigMatrixImpl12.getRoundingMode();
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 64 + "'", int13 == 64);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 64 + "'", int17 == 64);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl42.getRowMatrix((int) (short) 1);
        bigMatrixImpl42.setScale((int) (byte) 100);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(4, 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl42.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigMatrix46);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = realMatrixImpl12.add(realMatrixImpl15);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl12.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl5.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl22);
        double[][] doubleArray26 = realMatrixImpl22.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray26, false);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        double[] doubleArray37 = realMatrixImpl34.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl41.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl48.add(realMatrixImpl51);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl41.add(realMatrixImpl51);
        org.apache.commons.math.linear.RealMatrix realMatrix55 = realMatrixImpl41.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = realMatrixImpl58.add(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl65.add(realMatrixImpl68);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = realMatrixImpl58.add(realMatrixImpl68);
        org.apache.commons.math.linear.RealMatrix realMatrix72 = realMatrixImpl58.getColumnMatrix((int) ' ');
        double[][] doubleArray73 = realMatrixImpl58.getDataRef();
        org.apache.commons.math.linear.RealMatrix realMatrix74 = realMatrixImpl41.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl58);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix75 = realMatrixImpl34.multiply(realMatrix74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertNotNull(realMatrixImpl62);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(realMatrixImpl70);
        org.junit.Assert.assertNotNull(realMatrix72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(realMatrix74);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl6.scalarMultiply((double) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl6.scalarMultiply((double) (short) -1);
        int int11 = realMatrixImpl6.getRowDimension();
        boolean boolean12 = realMatrixImpl6.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = realMatrixImpl6.getColumnMatrix(0);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getScale();
        java.math.BigDecimal[][] bigDecimalArray14 = bigMatrixImpl12.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl17.add(realMatrixImpl20);
        double[] doubleArray23 = realMatrixImpl20.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray27 = bigMatrixImpl12.solve(doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 64 + "'", int13 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray14);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 10, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal3 = bigMatrixImpl2.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl26.equals((java.lang.Object) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl5.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl53.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        boolean boolean59 = realMatrixImpl46.equals((java.lang.Object) realMatrixImpl57);
        boolean boolean60 = realMatrixImpl46.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl37.add(realMatrixImpl46);
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[][] doubleArray80 = new double[][] { doubleArray64, doubleArray67, doubleArray70, doubleArray73, doubleArray76, doubleArray79 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray80);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl82 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray80);
        boolean boolean83 = realMatrixImpl61.equals((java.lang.Object) bigMatrixImpl82);
        double[][] doubleArray84 = realMatrixImpl61.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl85 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray84);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray84, false);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(doubleArray84);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        double[][] doubleArray17 = realMatrixImpl2.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray17, false);
        double[] doubleArray22 = new double[] { 1, (byte) 10 };
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[][] doubleArray38 = new double[][] { doubleArray22, doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray38);
        int int40 = bigMatrixImpl39.getRoundingMode();
        boolean boolean41 = bigMatrixImpl39.isSquare();
        boolean boolean42 = realMatrixImpl19.equals((java.lang.Object) bigMatrixImpl39);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrixImpl19.getColumnMatrix((int) (byte) 0);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(realMatrix44);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = realMatrixImpl12.add(realMatrixImpl15);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl12.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl5.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl22);
        double[][] doubleArray26 = realMatrixImpl22.getData();
        boolean boolean27 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl37.add(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = realMatrixImpl30.add(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrixImpl30.scalarAdd((double) (byte) 1);
        double[] doubleArray46 = realMatrixImpl30.getColumn((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray47 = realMatrixImpl22.operate(doubleArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrixImpl42);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl44.getNorm();
        java.math.BigDecimal[] bigDecimalArray46 = new java.math.BigDecimal[] { bigDecimal45 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray46);
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl47.copy();
        java.math.BigDecimal bigDecimal49 = bigMatrixImpl47.getNorm();
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[][] doubleArray68 = new double[][] { doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64, doubleArray67 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        boolean boolean71 = bigMatrixImpl70.isSquare();
        java.math.BigDecimal[][] bigDecimalArray72 = bigMatrixImpl70.getDataRef();
        java.math.BigDecimal bigDecimal75 = bigMatrixImpl70.getEntry(1, (int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl47.scalarAdd(bigDecimal75);
        int int77 = bigMatrixImpl47.getScale();
        boolean boolean78 = bigMatrixImpl20.equals((java.lang.Object) int77);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertNotNull(bigMatrix76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 64 + "'", int77 == 64);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        boolean boolean3 = realMatrixImpl2.isSquare();
        boolean boolean4 = realMatrixImpl2.isSingular();
        java.lang.String str5 = realMatrixImpl2.toString();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl8 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = realMatrixImpl8.add(realMatrixImpl11);
        double[] doubleArray14 = realMatrixImpl11.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray14);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray14);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray17 = realMatrixImpl2.preMultiply(doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "RealMatrixImpl{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}}" + "'", str5, "RealMatrixImpl{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}}");
        org.junit.Assert.assertNotNull(realMatrixImpl12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl5.copy();
        double double20 = realMatrixImpl5.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrixImpl5.scalarMultiply((-1.0d));
        double[][] doubleArray23 = realMatrixImpl5.getDataRef();
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl5.copy();
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realMatrix24);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl21.getRowMatrix(4);
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[][] doubleArray66 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        int int70 = bigMatrixImpl69.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = bigMatrixImpl47.add(bigMatrixImpl69);
        java.math.BigDecimal bigDecimal72 = bigMatrixImpl69.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl21.scalarAdd(bigDecimal72);
        int int74 = bigMatrixImpl21.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix75 = bigMatrixImpl21.copy();
        bigMatrixImpl21.setRoundingMode((int) (short) 100);
        int int78 = bigMatrixImpl21.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl80 = bigMatrixImpl21.multiply(bigMatrixImpl79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl71);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigMatrix73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 64 + "'", int74 == 64);
        org.junit.Assert.assertNotNull(bigMatrix75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 64 + "'", int78 == 64);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean45 = bigMatrixImpl44.isSquare();
        int int46 = bigMatrixImpl44.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl44.copy();
        int int48 = bigMatrixImpl44.getRowDimension();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 64 + "'", int46 == 64);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        double[][] doubleArray21 = realMatrixImpl17.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray21);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl23.scalarMultiply((double) '#');
        // The following exception was thrown during execution in test generation
        try {
            double double28 = realMatrixImpl23.getEntry((int) (short) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realMatrix25);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        boolean boolean41 = realMatrixImpl28.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl28.getRowMatrix(2);
        double[][] doubleArray44 = realMatrixImpl28.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrixImpl28.scalarMultiply((double) 35);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realMatrix46);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl(100, 64);
        double double3 = realMatrixImpl2.getNorm();
        double double6 = realMatrixImpl2.getEntry((int) 'a', (int) (short) 10);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        int int29 = realMatrixImpl28.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrixImpl28.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[] strArray1 = new java.lang.String[] {};
        java.lang.String[] strArray2 = new java.lang.String[] {};
        java.lang.String[] strArray3 = new java.lang.String[] {};
        java.lang.String[][] strArray4 = new java.lang.String[][] { strArray0, strArray1, strArray2, strArray3 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must have at least one column.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        bigMatrixImpl20.setScale(5);
        double[] doubleArray28 = bigMatrixImpl20.getColumnAsDoubleArray((int) (byte) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = bigMatrixImpl20.getColumnMatrix((int) (byte) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl20.transpose();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(bigMatrix30);
        org.junit.Assert.assertNotNull(bigMatrix31);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl45.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl20.scalarMultiply(bigDecimal48);
        java.math.BigDecimal[] bigDecimalArray51 = bigMatrixImpl20.getRow(2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray51);
        int int53 = bigMatrixImpl52.getRoundingMode();
        int int54 = bigMatrixImpl52.getRoundingMode();
        double[][] doubleArray55 = bigMatrixImpl52.getDataAsDoubleArray();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray57 = bigMatrixImpl52.getRowAsDoubleArray((int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigMatrix49);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertNotNull(doubleArray55);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl2.scalarAdd(0.0d);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix29 = realMatrixImpl24.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl28);
        boolean boolean30 = realMatrixImpl24.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl36);
        int int38 = realMatrixImpl36.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl24.subtract(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl42.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix55 = realMatrixImpl42.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl36.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl42);
        int int57 = realMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl2.add(realMatrixImpl42);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl39);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 100, (int) (byte) 10);
        double[][] doubleArray3 = realMatrixImpl2.getDataRef();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrixImpl2.scalarMultiply((double) '#');
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[][] doubleArray24 = new double[][] { doubleArray8, doubleArray11, doubleArray14, doubleArray17, doubleArray20, doubleArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray24);
        int int29 = realMatrixImpl28.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl28.getRowMatrix(0);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrixImpl28.transpose();
        double[][] doubleArray33 = realMatrixImpl28.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl2.subtract(realMatrixImpl28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(doubleArray33);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        int int16 = bigMatrixImpl12.getRowDimension();
        int int17 = bigMatrixImpl12.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl12.subtract(bigMatrix18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray27);
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        int int51 = bigMatrixImpl50.getColumnDimension();
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[][] doubleArray70 = new double[][] { doubleArray54, doubleArray57, doubleArray60, doubleArray63, doubleArray66, doubleArray69 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        java.math.BigDecimal[][] bigDecimalArray74 = bigMatrixImpl73.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl76 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray74, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl78 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray74, true);
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = bigMatrixImpl50.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl78);
        int int80 = bigMatrixImpl78.getRoundingMode();
        double[][] doubleArray81 = bigMatrixImpl78.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl82 = bigMatrixImpl28.add(bigMatrixImpl78);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray84 = bigMatrixImpl28.getColumn(97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(bigDecimalArray74);
        org.junit.Assert.assertNotNull(bigMatrix79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 4 + "'", int80 == 4);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(bigMatrixImpl82);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray16 = bigMatrixImpl12.getRow(97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl19.getNorm();
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        java.math.BigDecimal[] bigDecimalArray24 = bigMatrixImpl22.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl27.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl30.getColumnMatrix((int) (short) 1);
        boolean boolean34 = realMatrixImpl30.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl30.getColumnMatrix((int) (byte) 10);
        boolean boolean37 = bigMatrixImpl22.equals((java.lang.Object) (byte) 10);
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[][] doubleArray56 = new double[][] { doubleArray40, doubleArray43, doubleArray46, doubleArray49, doubleArray52, doubleArray55 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray56);
        java.math.BigDecimal bigDecimal58 = bigMatrixImpl57.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl22.scalarAdd(bigDecimal58);
        org.apache.commons.math.linear.BigMatrix bigMatrix60 = bigMatrixImpl22.transpose();
        bigMatrixImpl22.setScale(64);
        int int63 = bigMatrixImpl22.getScale();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigMatrix59);
        org.junit.Assert.assertNotNull(bigMatrix60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 64 + "'", int63 == 64);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        int int10 = realMatrixImpl5.getRowDimension();
        double[][] doubleArray11 = realMatrixImpl5.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray11);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(doubleArray11);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl42.getRowMatrix((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double49 = bigMatrixImpl42.getEntryAsDouble(97, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigMatrix46);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        double[] doubleArray19 = new double[] { 1, (byte) 10 };
        double[] doubleArray22 = new double[] { 1, (byte) 10 };
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[][] doubleArray35 = new double[][] { doubleArray19, doubleArray22, doubleArray25, doubleArray28, doubleArray31, doubleArray34 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        java.math.BigDecimal[][] bigDecimalArray39 = bigMatrixImpl38.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray39, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray39, false);
        java.math.BigDecimal[][] bigDecimalArray45 = bigMatrixImpl44.getDataRef();
        double[][] doubleArray46 = bigMatrixImpl44.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray46);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl12.preMultiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        boolean boolean20 = realMatrixImpl5.equals((java.lang.Object) 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl5.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, true);
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        int int49 = bigMatrixImpl48.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl26.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl48);
        int int51 = bigMatrixImpl48.getRowDimension();
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[][] doubleArray70 = new double[][] { doubleArray54, doubleArray57, doubleArray60, doubleArray63, doubleArray66, doubleArray69 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        java.math.BigDecimal bigDecimal72 = bigMatrixImpl71.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl48.scalarMultiply(bigDecimal72);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray75 = bigMatrixImpl48.getColumn((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigMatrix73);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl23.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl23.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl40.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl47);
        boolean boolean49 = realMatrixImpl43.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl52.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl55);
        int int57 = realMatrixImpl55.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl43.subtract(realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl23.add(realMatrixImpl55);
        double[][] doubleArray60 = realMatrixImpl59.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = realMatrixImpl63.add(realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = realMatrixImpl70.add(realMatrixImpl73);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = realMatrixImpl63.add(realMatrixImpl73);
        org.apache.commons.math.linear.RealMatrix realMatrix77 = realMatrixImpl63.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = realMatrixImpl80.add(realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix88 = realMatrixImpl83.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl87);
        org.apache.commons.math.linear.RealMatrix realMatrix89 = realMatrixImpl63.add(realMatrix88);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl90 = realMatrixImpl59.subtract(realMatrixImpl63);
        double[] doubleArray92 = realMatrixImpl90.getRow(4);
        double[] doubleArray93 = realMatrixImpl17.operate(doubleArray92);
        double[][] doubleArray94 = realMatrixImpl17.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl96 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray94, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl97 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray94);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl99 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray94, false);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrixImpl59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realMatrixImpl67);
        org.junit.Assert.assertNotNull(realMatrixImpl74);
        org.junit.Assert.assertNotNull(realMatrixImpl75);
        org.junit.Assert.assertNotNull(realMatrix77);
        org.junit.Assert.assertNotNull(realMatrixImpl84);
        org.junit.Assert.assertNotNull(realMatrix88);
        org.junit.Assert.assertNotNull(realMatrix89);
        org.junit.Assert.assertNotNull(realMatrixImpl90);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24, false);
        double[][] doubleArray27 = bigMatrixImpl26.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl26.transpose();
        bigMatrixImpl26.setScale(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl33.add(realMatrixImpl36);
        double[] doubleArray39 = realMatrixImpl36.getColumn((int) (byte) 0);
        boolean boolean41 = realMatrixImpl36.equals((java.lang.Object) 6);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl44.add(realMatrixImpl47);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl51.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl44.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl54.scalarMultiply(1.0d);
        double[] doubleArray60 = realMatrixImpl54.getRow((int) (short) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray60);
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrixImpl36.multiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl61);
        boolean boolean63 = bigMatrixImpl26.equals((java.lang.Object) realMatrixImpl36);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(bigMatrix28);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        boolean boolean3 = realMatrixImpl2.isSquare();
        double[][] doubleArray4 = realMatrixImpl2.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.scalarMultiply(100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl2.scalarMultiply((double) (short) 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.scalarMultiply((double) (short) -1);
        double[][] doubleArray18 = realMatrixImpl2.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean20 = bigMatrixImpl19.isSquare();
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        java.math.BigDecimal bigDecimal44 = bigMatrixImpl41.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray45 = bigMatrixImpl41.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl41.getRowMatrix(1);
        java.math.BigDecimal[][] bigDecimalArray48 = bigMatrixImpl41.getDataRef();
        java.math.BigDecimal[] bigDecimalArray50 = bigMatrixImpl41.getColumn((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl19.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.scalarAdd((double) 2);
        int int5 = realMatrixImpl2.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl8 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = realMatrixImpl8.add(realMatrixImpl11);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = realMatrixImpl15.add(realMatrixImpl18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl8.add(realMatrixImpl18);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrixImpl8.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl25.add(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl32);
        boolean boolean34 = realMatrixImpl28.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrixImpl37.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl40);
        int int42 = realMatrixImpl40.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl28.subtract(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl8.add(realMatrixImpl40);
        double[][] doubleArray45 = realMatrixImpl44.getData();
        int int46 = realMatrixImpl44.getColumnDimension();
        boolean boolean47 = realMatrixImpl2.equals((java.lang.Object) realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl57.add(realMatrixImpl60);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix65 = realMatrixImpl60.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl64);
        boolean boolean66 = realMatrixImpl60.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix73 = realMatrixImpl69.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl72);
        int int74 = realMatrixImpl72.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = realMatrixImpl60.subtract(realMatrixImpl72);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = realMatrixImpl53.subtract(realMatrixImpl75);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl44.subtract(realMatrixImpl75);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = realMatrixImpl44.getEntry((int) (byte) -1, 35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl12);
        org.junit.Assert.assertNotNull(realMatrixImpl19);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl75);
        org.junit.Assert.assertNotNull(realMatrixImpl76);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl28.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl21.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl21.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl21.getColumnMatrix((int) (short) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl16.subtract(realMatrixImpl21);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl41.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl48.add(realMatrixImpl51);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl51.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl55);
        boolean boolean57 = realMatrixImpl51.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix64 = realMatrixImpl60.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl63);
        int int65 = realMatrixImpl63.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = realMatrixImpl51.subtract(realMatrixImpl63);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = realMatrixImpl44.subtract(realMatrixImpl66);
        double[] doubleArray69 = realMatrixImpl44.getRow(0);
        double[] doubleArray70 = realMatrixImpl16.operate(doubleArray69);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray70);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(realMatrix64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl66);
        org.junit.Assert.assertNotNull(realMatrixImpl67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        boolean boolean25 = bigMatrixImpl24.isSingular();
        int int26 = bigMatrixImpl24.getRoundingMode();
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl24.getData();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        java.math.BigDecimal bigDecimal46 = null;
        java.math.BigDecimal[] bigDecimalArray47 = new java.math.BigDecimal[] { bigDecimal46 };
        java.math.BigDecimal bigDecimal48 = null;
        java.math.BigDecimal[] bigDecimalArray49 = new java.math.BigDecimal[] { bigDecimal48 };
        java.math.BigDecimal bigDecimal50 = null;
        java.math.BigDecimal[] bigDecimalArray51 = new java.math.BigDecimal[] { bigDecimal50 };
        java.math.BigDecimal bigDecimal52 = null;
        java.math.BigDecimal[] bigDecimalArray53 = new java.math.BigDecimal[] { bigDecimal52 };
        java.math.BigDecimal bigDecimal54 = null;
        java.math.BigDecimal[] bigDecimalArray55 = new java.math.BigDecimal[] { bigDecimal54 };
        java.math.BigDecimal[][] bigDecimalArray56 = new java.math.BigDecimal[][] { bigDecimalArray47, bigDecimalArray49, bigDecimalArray51, bigDecimalArray53, bigDecimalArray55 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray56, true);
        int int59 = bigMatrixImpl58.getScale();
        boolean boolean60 = bigMatrixImpl58.isSingular();
        int int61 = bigMatrixImpl58.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray62 = bigMatrixImpl58.getData();
        int int63 = bigMatrixImpl58.getScale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = bigMatrixImpl42.add(bigMatrixImpl58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 64 + "'", int59 == 64);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 64 + "'", int63 == 64);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl45.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl22.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl45);
        boolean boolean48 = bigMatrixImpl22.isSingular();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        int int7 = realMatrixImpl5.getRowDimension();
        boolean boolean8 = realMatrixImpl5.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = realMatrixImpl5.copy();
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(realMatrix9);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        bigMatrixImpl20.setScale(35);
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl20.getDataRef();
        int int28 = bigMatrixImpl20.getColumnDimension();
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        java.math.BigDecimal bigDecimal52 = bigMatrixImpl49.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray53 = bigMatrixImpl49.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray53, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray53, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray53);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray53, false);
        int int61 = bigMatrixImpl60.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = bigMatrixImpl20.multiply(bigMatrixImpl60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        double[] doubleArray16 = realMatrixImpl14.getColumn(10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        boolean boolean35 = realMatrixImpl29.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl38.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl41);
        int int43 = realMatrixImpl41.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl29.subtract(realMatrixImpl41);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl22.subtract(realMatrixImpl44);
        double[] doubleArray47 = realMatrixImpl22.getRow(0);
        boolean boolean48 = realMatrixImpl14.equals((java.lang.Object) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl14.scalarAdd(0.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix52 = realMatrixImpl14.getColumnMatrix(6);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl55.add(realMatrixImpl58);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrixImpl58.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl62);
        boolean boolean64 = realMatrixImpl58.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrixImpl67.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl70);
        int int72 = realMatrixImpl70.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = realMatrixImpl58.subtract(realMatrixImpl70);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = realMatrixImpl14.subtract(realMatrixImpl58);
        double[][] doubleArray75 = realMatrixImpl74.getData();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertNotNull(realMatrixImpl59);
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl73);
        org.junit.Assert.assertNotNull(realMatrixImpl74);
        org.junit.Assert.assertNotNull(doubleArray75);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl20.copy();
        int int24 = bigMatrixImpl20.getRowDimension();
        boolean boolean25 = bigMatrixImpl20.isSingular();
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray26, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray26);
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[] doubleArray47 = new double[] { 1, (byte) 10 };
        double[][] doubleArray48 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44, doubleArray47 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray48);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray48);
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[] doubleArray68 = new double[] { 1, (byte) 10 };
        double[][] doubleArray69 = new double[][] { doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65, doubleArray68 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray69);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray69);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray69);
        int int73 = bigMatrixImpl72.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl74 = bigMatrixImpl50.add(bigMatrixImpl72);
        boolean boolean75 = bigMatrixImpl74.isSquare();
        int int76 = bigMatrixImpl74.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix77 = bigMatrixImpl74.transpose();
        int int78 = bigMatrixImpl74.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = bigMatrixImpl29.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl74);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNotNull(bigMatrix77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 4 + "'", int78 == 4);
        org.junit.Assert.assertNotNull(bigMatrix79);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        int int46 = bigMatrixImpl20.getRoundingMode();
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[][] doubleArray65 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        int int68 = bigMatrixImpl67.getScale();
        java.math.BigDecimal[][] bigDecimalArray69 = bigMatrixImpl67.getData();
        java.math.BigDecimal[][] bigDecimalArray70 = bigMatrixImpl67.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray70, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = bigMatrixImpl20.subtract(bigMatrixImpl72);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal74 = bigMatrixImpl20.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 64 + "'", int68 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertNotNull(bigMatrixImpl73);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        int int19 = realMatrixImpl16.getRowDimension();
        double double22 = realMatrixImpl16.getEntry(4, (int) (short) 1);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl45.getEntry(0, (int) (short) 0);
        boolean boolean49 = bigMatrixImpl45.isSingular();
        boolean boolean50 = bigMatrixImpl45.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl45);
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[][] doubleArray70 = new double[][] { doubleArray54, doubleArray57, doubleArray60, doubleArray63, doubleArray66, doubleArray69 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        java.math.BigDecimal bigDecimal75 = bigMatrixImpl72.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl72.copy();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl77 = bigMatrixImpl21.add(bigMatrixImpl72);
        int int78 = bigMatrixImpl72.getScale();
        java.lang.String str79 = bigMatrixImpl72.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal80 = bigMatrixImpl72.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertNotNull(bigMatrix76);
        org.junit.Assert.assertNotNull(bigMatrixImpl77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 64 + "'", int78 == 64);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str79, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        int int17 = realMatrixImpl2.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl2.copy();
        int int19 = realMatrixImpl2.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray21 = realMatrixImpl2.getRow((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = realMatrixImpl5.copy();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = realMatrixImpl12.add(realMatrixImpl15);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl12.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrixImpl12.scalarAdd((double) (byte) 1);
        double[] doubleArray28 = realMatrixImpl12.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl5.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrixImpl5.copy();
        double double31 = realMatrixImpl5.getNorm();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrixImpl16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        int int27 = bigMatrixImpl20.getColumnDimension();
        int int28 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl20.getData();
        java.lang.String str30 = bigMatrixImpl20.toString();
        bigMatrixImpl20.setRoundingMode((int) (short) 1);
        double[][] doubleArray33 = bigMatrixImpl20.getDataAsDoubleArray();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray35 = bigMatrixImpl20.getRowAsDoubleArray((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str30, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(doubleArray33);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        double[] doubleArray30 = realMatrixImpl5.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl33.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl41.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl48.add(realMatrixImpl51);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl41.add(realMatrixImpl51);
        double[] doubleArray55 = realMatrixImpl53.getColumn(10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = realMatrixImpl58.add(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl65.add(realMatrixImpl68);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix73 = realMatrixImpl68.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl72);
        boolean boolean74 = realMatrixImpl68.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix81 = realMatrixImpl77.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl80);
        int int82 = realMatrixImpl80.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = realMatrixImpl68.subtract(realMatrixImpl80);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = realMatrixImpl61.subtract(realMatrixImpl83);
        double[] doubleArray86 = realMatrixImpl61.getRow(0);
        boolean boolean87 = realMatrixImpl53.equals((java.lang.Object) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix89 = realMatrixImpl53.scalarAdd(0.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix91 = realMatrixImpl53.getColumnMatrix(6);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl92 = realMatrixImpl5.subtract(realMatrixImpl53);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl53.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl62);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(realMatrix81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl83);
        org.junit.Assert.assertNotNull(realMatrixImpl84);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(realMatrix89);
        org.junit.Assert.assertNotNull(realMatrix91);
        org.junit.Assert.assertNotNull(realMatrixImpl92);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[] bigDecimalArray23 = bigMatrixImpl20.getRow((int) (short) 0);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray23);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray23);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray23);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl26.getSubMatrix(64, (int) (byte) 1, (int) (short) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl23.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl23.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl17.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl23);
        double double38 = realMatrixImpl23.getNorm();
        boolean boolean39 = realMatrixImpl23.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        boolean boolean43 = realMatrixImpl42.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl42.scalarMultiply((double) 1L);
        int int46 = realMatrixImpl42.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl42.scalarMultiply((double) 10L);
        boolean boolean49 = realMatrixImpl23.equals((java.lang.Object) realMatrix48);
        // The following exception was thrown during execution in test generation
        try {
            double double50 = realMatrixImpl23.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean45 = bigMatrixImpl20.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl20.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        boolean boolean3 = realMatrixImpl2.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrixImpl2.scalarMultiply((double) 1L);
        double double8 = realMatrixImpl2.getEntry(2, 0);
        int int9 = realMatrixImpl2.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = realMatrixImpl2.getEntry(64, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl20.copy();
        java.lang.String str47 = bigMatrixImpl20.toString();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str47, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[][] doubleArray62 = new double[][] { doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = bigMatrixImpl42.subtract(bigMatrixImpl64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = bigMatrixImpl20.add(bigMatrixImpl65);
        java.math.BigDecimal[][] bigDecimalArray67 = bigMatrixImpl65.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray67, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray67);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(bigMatrixImpl65);
        org.junit.Assert.assertNotNull(bigMatrixImpl66);
        org.junit.Assert.assertNotNull(bigDecimalArray67);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        int int23 = bigMatrixImpl21.getScale();
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl21.getData();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        double[][] doubleArray17 = realMatrixImpl2.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl20.add(realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl27.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl20.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl20.scalarAdd((double) (byte) 1);
        double[] doubleArray36 = realMatrixImpl20.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray36);
        double[] doubleArray40 = realMatrixImpl2.preMultiply(doubleArray36);
        double[][] doubleArray41 = realMatrixImpl2.getData();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, true);
        int int27 = bigMatrixImpl26.getRoundingMode();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl(52, 2);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        int int16 = bigMatrixImpl12.getRowDimension();
        int int17 = bigMatrixImpl12.getRoundingMode();
        boolean boolean18 = bigMatrixImpl12.isSquare();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl12.getDataRef();
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        int int3 = bigMatrixImpl2.getColumnDimension();
        int int4 = bigMatrixImpl2.getScale();
        double[] doubleArray7 = new double[] { 1, (byte) 10 };
        double[] doubleArray10 = new double[] { 1, (byte) 10 };
        double[] doubleArray13 = new double[] { 1, (byte) 10 };
        double[] doubleArray16 = new double[] { 1, (byte) 10 };
        double[] doubleArray19 = new double[] { 1, (byte) 10 };
        double[] doubleArray22 = new double[] { 1, (byte) 10 };
        double[][] doubleArray23 = new double[][] { doubleArray7, doubleArray10, doubleArray13, doubleArray16, doubleArray19, doubleArray22 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray23);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray23);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray23);
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl26.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray27, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray27, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray27);
        java.math.BigDecimal bigDecimal33 = bigMatrixImpl32.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix34 = bigMatrixImpl2.solve((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 64 + "'", int4 == 64);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigDecimal33);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl20.getData();
        bigMatrixImpl20.setRoundingMode(6);
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[] doubleArray47 = new double[] { 1, (byte) 10 };
        double[][] doubleArray48 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44, doubleArray47 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray48);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray48);
        java.math.BigDecimal bigDecimal53 = bigMatrixImpl50.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray54 = bigMatrixImpl50.getData();
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[] doubleArray72 = new double[] { 1, (byte) 10 };
        double[][] doubleArray73 = new double[][] { doubleArray57, doubleArray60, doubleArray63, doubleArray66, doubleArray69, doubleArray72 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl74 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray73);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl75 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray73);
        java.math.BigDecimal bigDecimal78 = bigMatrixImpl75.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = bigMatrixImpl50.scalarMultiply(bigDecimal78);
        java.math.BigDecimal[] bigDecimalArray81 = bigMatrixImpl50.getRow(2);
        java.lang.String str82 = bigMatrixImpl50.toString();
        java.math.BigDecimal[][] bigDecimalArray83 = bigMatrixImpl50.getDataRef();
        java.math.BigDecimal[] bigDecimalArray85 = bigMatrixImpl50.getColumn((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray86 = bigMatrixImpl20.solve(bigDecimalArray85);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(bigDecimal78);
        org.junit.Assert.assertNotNull(bigMatrix79);
        org.junit.Assert.assertNotNull(bigDecimalArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str82, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(bigDecimalArray83);
        org.junit.Assert.assertNotNull(bigDecimalArray85);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.scalarMultiply((double) '4');
        java.lang.String str5 = realMatrixImpl2.toString();
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "RealMatrixImpl{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}}" + "'", str5, "RealMatrixImpl{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}}");
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getRowDimension();
        bigMatrixImpl20.setRoundingMode(5);
        java.math.BigDecimal bigDecimal24 = bigMatrixImpl20.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl27.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl34.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl27.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrixImpl27.getColumnMatrix((int) ' ');
        double[][] doubleArray42 = realMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray42, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl48.add(realMatrixImpl51);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl55.add(realMatrixImpl58);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrixImpl58.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl62);
        boolean boolean64 = realMatrixImpl58.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrixImpl67.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl70);
        int int72 = realMatrixImpl70.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = realMatrixImpl58.subtract(realMatrixImpl70);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = realMatrixImpl51.subtract(realMatrixImpl73);
        double[] doubleArray76 = realMatrixImpl51.getRow(0);
        java.math.BigDecimal[] bigDecimalArray77 = bigMatrixImpl45.operate(doubleArray76);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl78 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray77);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl79 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray77);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl80 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray77);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray81 = bigMatrixImpl20.solve(bigDecimalArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrixImpl39);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(realMatrixImpl59);
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl73);
        org.junit.Assert.assertNotNull(realMatrixImpl74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimalArray77);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        boolean boolean41 = bigMatrixImpl40.isSingular();
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[] doubleArray47 = new double[] { 1, (byte) 10 };
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[][] doubleArray60 = new double[][] { doubleArray44, doubleArray47, doubleArray50, doubleArray53, doubleArray56, doubleArray59 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl61 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray60);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray60);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray60);
        int int64 = bigMatrixImpl63.getColumnDimension();
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[][] doubleArray83 = new double[][] { doubleArray67, doubleArray70, doubleArray73, doubleArray76, doubleArray79, doubleArray82 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl84 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray83);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl85 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray83);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl86 = bigMatrixImpl63.subtract(bigMatrixImpl85);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix87 = bigMatrixImpl40.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(bigMatrixImpl86);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        int int23 = bigMatrixImpl21.getScale();
        int int24 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        java.math.BigDecimal[][] bigDecimalArray47 = bigMatrixImpl46.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray47, false);
        boolean boolean50 = bigMatrixImpl49.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl49.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl49.copy();
        int int53 = bigMatrixImpl49.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = bigMatrixImpl21.add(bigMatrixImpl49);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix56 = bigMatrixImpl54.multiply(bigMatrix55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 64 + "'", int53 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl54);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl23.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl23.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl40.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl47);
        boolean boolean49 = realMatrixImpl43.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl52.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl55);
        int int57 = realMatrixImpl55.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl43.subtract(realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl23.add(realMatrixImpl55);
        double[][] doubleArray60 = realMatrixImpl59.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = realMatrixImpl63.add(realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = realMatrixImpl70.add(realMatrixImpl73);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = realMatrixImpl63.add(realMatrixImpl73);
        org.apache.commons.math.linear.RealMatrix realMatrix77 = realMatrixImpl63.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = realMatrixImpl80.add(realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix88 = realMatrixImpl83.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl87);
        org.apache.commons.math.linear.RealMatrix realMatrix89 = realMatrixImpl63.add(realMatrix88);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl90 = realMatrixImpl59.subtract(realMatrixImpl63);
        double[] doubleArray92 = realMatrixImpl90.getRow(4);
        double[] doubleArray93 = realMatrixImpl17.operate(doubleArray92);
        double[][] doubleArray94 = realMatrixImpl17.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl95 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray94);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrixImpl59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realMatrixImpl67);
        org.junit.Assert.assertNotNull(realMatrixImpl74);
        org.junit.Assert.assertNotNull(realMatrixImpl75);
        org.junit.Assert.assertNotNull(realMatrix77);
        org.junit.Assert.assertNotNull(realMatrixImpl84);
        org.junit.Assert.assertNotNull(realMatrix88);
        org.junit.Assert.assertNotNull(realMatrix89);
        org.junit.Assert.assertNotNull(realMatrixImpl90);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 10, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = bigMatrixImpl12.multiply(bigMatrixImpl17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        int int23 = bigMatrixImpl21.getScale();
        int int24 = bigMatrixImpl21.getScale();
        double[][] doubleArray25 = bigMatrixImpl21.getDataAsDoubleArray();
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[][] doubleArray44 = new double[][] { doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        int int47 = bigMatrixImpl46.getRowDimension();
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[][] doubleArray66 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        double[] doubleArray71 = new double[] { 1, (byte) 10 };
        double[] doubleArray74 = new double[] { 1, (byte) 10 };
        double[] doubleArray77 = new double[] { 1, (byte) 10 };
        double[] doubleArray80 = new double[] { 1, (byte) 10 };
        double[] doubleArray83 = new double[] { 1, (byte) 10 };
        double[] doubleArray86 = new double[] { 1, (byte) 10 };
        double[][] doubleArray87 = new double[][] { doubleArray71, doubleArray74, doubleArray77, doubleArray80, doubleArray83, doubleArray86 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl88 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray87);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl89 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray87);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl90 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray87);
        int int91 = bigMatrixImpl90.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl92 = bigMatrixImpl68.add(bigMatrixImpl90);
        java.math.BigDecimal bigDecimal93 = bigMatrixImpl90.getNorm();
        java.math.BigDecimal bigDecimal94 = bigMatrixImpl90.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix95 = bigMatrixImpl46.scalarMultiply(bigDecimal94);
        org.apache.commons.math.linear.BigMatrix bigMatrix96 = bigMatrixImpl21.scalarAdd(bigDecimal94);
        org.apache.commons.math.linear.BigMatrix bigMatrix97 = bigMatrixImpl21.copy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 64 + "'", int24 == 64);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl92);
        org.junit.Assert.assertNotNull(bigDecimal93);
        org.junit.Assert.assertNotNull(bigDecimal94);
        org.junit.Assert.assertNotNull(bigMatrix95);
        org.junit.Assert.assertNotNull(bigMatrix96);
        org.junit.Assert.assertNotNull(bigMatrix97);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setRoundingMode((int) (short) 100);
        java.math.BigDecimal[][] bigDecimalArray15 = bigMatrixImpl12.getDataRef();
        int int16 = bigMatrixImpl12.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl12.getSubMatrix(100, 100, (int) 'a', (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        int int23 = bigMatrixImpl21.getScale();
        int int24 = bigMatrixImpl21.getScale();
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl21.getDataRef();
        bigMatrixImpl21.setRoundingMode((int) ' ');
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[] doubleArray45 = new double[] { 1, (byte) 10 };
        double[][] doubleArray46 = new double[][] { doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42, doubleArray45 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        int int50 = bigMatrixImpl49.getScale();
        int int51 = bigMatrixImpl49.getRowDimension();
        java.math.BigDecimal[] bigDecimalArray53 = bigMatrixImpl49.getRow(2);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
        java.math.BigDecimal[][] bigDecimalArray55 = bigMatrixImpl49.getDataRef();
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[][] doubleArray74 = new double[][] { doubleArray58, doubleArray61, doubleArray64, doubleArray67, doubleArray70, doubleArray73 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl75 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray74);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl76 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray74);
        java.math.BigDecimal bigDecimal79 = bigMatrixImpl76.getEntry(0, (int) (short) 0);
        double[][] doubleArray80 = bigMatrixImpl76.getDataAsDoubleArray();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix81 = bigMatrixImpl49.solve((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl76);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 64 + "'", int24 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 64 + "'", int50 == 64);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(bigDecimal79);
        org.junit.Assert.assertNotNull(doubleArray80);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrixImpl9.scalarAdd((double) (byte) -1);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        double[] doubleArray18 = realMatrixImpl12.getRow((int) (short) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl19.getSubMatrix(1, 2, 6, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl26.equals((java.lang.Object) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl5.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl53.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        boolean boolean59 = realMatrixImpl46.equals((java.lang.Object) realMatrixImpl57);
        boolean boolean60 = realMatrixImpl46.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl37.add(realMatrixImpl46);
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[][] doubleArray80 = new double[][] { doubleArray64, doubleArray67, doubleArray70, doubleArray73, doubleArray76, doubleArray79 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray80);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl82 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray80);
        boolean boolean83 = realMatrixImpl61.equals((java.lang.Object) bigMatrixImpl82);
        double[][] doubleArray84 = realMatrixImpl61.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl85 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray84);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl86 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray84);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(doubleArray84);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl20.copy();
        boolean boolean47 = bigMatrixImpl20.isSingular();
        boolean boolean48 = bigMatrixImpl20.isSquare();
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[][] doubleArray67 = new double[][] { doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63, doubleArray66 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray67);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray67);
        boolean boolean70 = bigMatrixImpl69.isSquare();
        java.math.BigDecimal[][] bigDecimalArray71 = bigMatrixImpl69.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl78 = realMatrixImpl74.add(realMatrixImpl77);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl81 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl85 = realMatrixImpl81.add(realMatrixImpl84);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl86 = realMatrixImpl74.add(realMatrixImpl84);
        org.apache.commons.math.linear.RealMatrix realMatrix88 = realMatrixImpl84.scalarMultiply(1.0d);
        int int89 = realMatrixImpl84.getColumnDimension();
        boolean boolean90 = bigMatrixImpl69.equals((java.lang.Object) realMatrixImpl84);
        org.apache.commons.math.linear.BigMatrix bigMatrix91 = bigMatrixImpl20.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl69);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl93 = bigMatrixImpl20.subtract(bigMatrixImpl92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray71);
        org.junit.Assert.assertNotNull(realMatrixImpl78);
        org.junit.Assert.assertNotNull(realMatrixImpl85);
        org.junit.Assert.assertNotNull(realMatrixImpl86);
        org.junit.Assert.assertNotNull(realMatrix88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 35 + "'", int89 == 35);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(bigMatrix91);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl6.add(realMatrix23);
        int int25 = realMatrixImpl6.getRowDimension();
        double[][] doubleArray26 = realMatrixImpl6.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl29.add(realMatrixImpl32);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl36.add(realMatrixImpl39);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl29.add(realMatrixImpl39);
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl39.scalarMultiply(1.0d);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl46.add(realMatrixImpl49);
        double[] doubleArray52 = realMatrixImpl49.getColumn((int) (byte) 0);
        boolean boolean54 = realMatrixImpl49.equals((java.lang.Object) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl49.getRowMatrix(5);
        double[] doubleArray58 = realMatrixImpl49.getColumn(0);
        double[] doubleArray59 = realMatrixImpl39.preMultiply(doubleArray58);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray58);
        double[] doubleArray61 = realMatrixImpl6.preMultiply(doubleArray58);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray61);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[] doubleArray45 = new double[] { 1, (byte) 10 };
        double[][] doubleArray46 = new double[][] { doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42, doubleArray45 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl47.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl27.scalarMultiply(bigDecimal48);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigMatrix49);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl21.getRowMatrix(4);
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[][] doubleArray66 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        int int70 = bigMatrixImpl69.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = bigMatrixImpl47.add(bigMatrixImpl69);
        java.math.BigDecimal bigDecimal72 = bigMatrixImpl69.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl21.scalarAdd(bigDecimal72);
        int int74 = bigMatrixImpl21.getScale();
        java.math.BigDecimal[][] bigDecimalArray75 = bigMatrixImpl21.getDataRef();
        double[][] doubleArray76 = bigMatrixImpl21.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl71);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigMatrix73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 64 + "'", int74 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl20.copy();
        int int24 = bigMatrixImpl20.getRowDimension();
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl20.getData();
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[][] doubleArray44 = new double[][] { doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        java.math.BigDecimal bigDecimal49 = bigMatrixImpl46.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray50 = bigMatrixImpl46.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl46.getRowMatrix(1);
        java.math.BigDecimal[][] bigDecimalArray53 = bigMatrixImpl46.getDataRef();
        java.math.BigDecimal[] bigDecimalArray55 = bigMatrixImpl46.getColumn((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray56 = bigMatrixImpl20.solve(bigDecimalArray55);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
    }
}

